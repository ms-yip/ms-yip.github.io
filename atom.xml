<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>珊珊的小本子</title>
  <icon>https://www.gravatar.com/avatar/b5c247f59c4ff39dce2796b57d2cf6f1</icon>
  <subtitle>一个记满小鱼干的小本本</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ms-yip.github.io/"/>
  <updated>2024-03-14T12:43:55.906Z</updated>
  <id>https://ms-yip.github.io/</id>
  
  <author>
    <name>ms.y</name>
    <email>yeminshan@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代码提交管理规范</title>
    <link href="https://ms-yip.github.io/2024/03/07/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/"/>
    <id>https://ms-yip.github.io/2024/03/07/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/</id>
    <published>2024-03-07T00:59:59.000Z</published>
    <updated>2024-03-14T12:43:55.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Commit-message-格式"><a href="#Commit-message-格式" class="headerlink" title="Commit message 格式"></a>Commit message 格式</h3><p>为了方便使用，我们避免了过于复杂的规定，格式较为简单且不限制中英文：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br></pre></td></tr></table></figure><p>// 注意冒号 : 后有空格<br>// 如 feat(miniprogram): 增加了小程序模板消息相关功能<br>scope选填表示commit的作用范围，如数据层、视图层，也可以是目录名称<br>subject必填用于对commit进行简短的描述</p><p>type必填表示提交类型，值有以下几种：</p><ul><li>feat - 新功能 feature</li><li>fix - 修复 bug</li><li>docs - 文档注释</li><li>style - 代码格式(不影响代码运行的变动)</li><li>refactor - 重构、优化(既不增加新功能，也不是修复bug)</li><li>perf - 性能优化</li><li>test - 增加测试</li><li>chore - 构建过程或辅助工具的变动</li><li>revert - 回退</li><li>build - 打包</li><li>ci - 更改持续集成软件的配置文件和package中的scripts命令，例如scopes: Travis, Circle等</li><li>config 配置修改</li></ul><p>实践：</p><ul><li>安装husky 后， 执行 husky 命令行工具，启用 git hook</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky install</span><br></pre></td></tr></table></figure><p>可能会忘记执行上面的命令启用 git hook。但有一个命令他们是一定会执行的，就是执行 <code>npm install</code> 或 <code>yarn</code> 去安装依赖。</p><p>于是我们需要利用 npm script 的生命周期脚本，加上一个 prepare。prepare 会在 install 之后执行。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">   // ...</span><br><span class="line">    &quot;prepare&quot;: &quot;husky install&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能保证同事拉项目并安装依赖后，husky 被启用。</p><ul><li>创建hook   生成结果如下图</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/pre-commit &quot;npm test&quot;</span><br><span class="line">npx husky add .husky/commit-msg &#x27;npx --no-install commitlint --edit &quot;$1&quot;&#x27;</span><br></pre></td></tr></table></figure><img src="/images/代码提交管理规范/image-20240307195157919.png" alt="image-20240307195157919"  /><ul><li>commitlint.config.js 文件配置</li></ul><p><a href="https://zhuanlan.zhihu.com/p/579595030">git hook 一些原理</a></p><p><a href="https://blog.csdn.net/sg_knight/article/details/128221272?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-5-128221272-blog-102690412.235^v43^pc_blog_bottom_relevance_base1&spm=1001.2101.3001.4242.4&utm_relevant_index=8">比较简单的校验</a></p><p><a href="https://juejin.cn/post/6844903793033756680">https://juejin.cn/post/6844903793033756680</a></p><p>自动生成changlog：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev conventional-changelog conventional-changelog-cli </span><br></pre></td></tr></table></figure><ul><li>配置 commitlint（commitlint.config.js）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>配置 git 钩子 如果没有生成hook文件的话</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;husky&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;commit-msg&quot;</span>: <span class="string">&quot;npx commitlint -E HUSKY_GIT_PARAMS&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置 CHANGELOG 自动生成</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;changelog&quot;</span>: <span class="string">&quot;conventional-changelog -p angular -i CHANGELOG.md -s -r 0&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>执行n个提交后运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm run changelog </span><br></pre></td></tr></table></figure><p><img src="/images/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/image-20240307185808757.png" alt="image-20240307185808757"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Commit-message-格式&quot;&gt;&lt;a href=&quot;#Commit-message-格式&quot; class=&quot;headerlink&quot; title=&quot;Commit message 格式&quot;&gt;&lt;/a&gt;Commit message 格式&lt;/h3&gt;&lt;p&gt;为了方便使用，我们避
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>lerna monorepo 实践</title>
    <link href="https://ms-yip.github.io/2024/03/06/lerna-monorepo-%E5%AE%9E%E8%B7%B5/"/>
    <id>https://ms-yip.github.io/2024/03/06/lerna-monorepo-%E5%AE%9E%E8%B7%B5/</id>
    <published>2024-03-06T08:50:04.000Z</published>
    <updated>2024-03-14T13:09:45.608Z</updated>
    
    <content type="html"><![CDATA[<ol start="0"><li><p>安装lerna</p><p><code>yarn global add lerna *// or* pnpm install lerna -g</code></p></li><li><p><code>lerna init --indepentdent</code></p><ol><li><strong>固定模式</strong>：所有 <code>package</code> 的版本号保持一致，每次更新发包都是全量的</li><li><strong>独立模式</strong>：每个 <code>package</code> 版本号各自独立，互不影响，每次更新按需发包 ( –indepentdent )</li></ol></li></ol><p><img src="/images/lerna-monorepo-%E5%AE%9E%E8%B7%B5/image-20240307082031858.png" alt="image-20240307082031858"></p><p>查看文件夹结果：</p><img src="/images/lerna-monorepo-实践/image-20240307082120971.png" alt="image-20240307082120971" style="zoom: 50%;"/><ol start="2"><li><p><code>lerna.json</code> 配置</p></li><li><p><code>pnpm-workspace.yaml</code> 配置</p></li><li><p><code>package.json</code> 设置</p><p>默认忽略掉在 <code>package.json</code> 中设置了 <code>&quot;private&quot;: true</code> 的私有包，</p><p>所以根目录 package.json 设置 “private”: true</p></li><li><p><strong>增加 packages</strong></p><p><code>lerna create @mo-demo/components</code> </p><p><code>lerna create @mo-demo/utils</code></p><img src="/images/lerna-monorepo-实践/image-20240307085026514.png" alt="image-20240307085026514" style="zoom:50%;" /></li><li><p><strong>分别给相应的 package 增加依赖模块</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lerna add chalk                                           // 为所有 package 增加 chalk 模块</span><br><span class="line">lerna add semver --scope @mo-demo/utils                   // 为 @mo-demo/utils 增加 semver 模块</span><br><span class="line">lerna add @mo-demo/utils  --scope @mo-demo/components     // 增加内部模块之间的依赖</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>发包更新</p><p>可以给团队申请一个公共账号，通过 <code>npm token create</code> 创建一个权限 token，放到项目根目录下的 <code>.npmrc</code> 文件中。</p><p>之后无论是哪个开发者维护，都将默认使用团队账号发包更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lerna publish</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lerna init  # 初始化 lerna 项目</span><br><span class="line">lerna create &lt;name&gt;  # 创建一个新的由 lerna 管理的包</span><br><span class="line">lerna bootstrap # 安装所有依赖项并连接所有的交叉依赖</span><br><span class="line">lerna add axios # 增加模块包到最外层的公共 node_modules中</span><br><span class="line">lerna add a --scope=b # 增加模块包到 packages 中指定项目 下面是将 a 模块增加到 b 项目中</span><br><span class="line">lerna exec --scope a -- yarn start # 在 packages 中对应包下的执行任意命令 下面的命令，是对 packages 下的 a 项目执行 yarn start # 命令 ，比较常用，可以把它配置到最外层的 package.json 中</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果命令中不增加 --scope a 直接使用下面的命令，这会在 packages 下所有包执行命令<span class="built_in">rm</span> -rf ./node_modules</span></span><br><span class="line">lerna exec -- rm -rf ./node_modules</span><br><span class="line"></span><br><span class="line">lerna list # 显示所有的安装的包。等同于 lerna ls</span><br><span class="line">lerna clean # 从所有包中删除 node_modules 目录。不会删除项目最外层的根 node_modules</span><br><span class="line">lerna publish # 在当前项目中发布包。lerna publish 永远不会发布标记为 private 的包（package.json中的”private“: true）</span><br></pre></td></tr></table></figure><h2 id="五、ESlint-配置"><a href="#五、ESlint-配置" class="headerlink" title="五、ESlint 配置"></a>五、ESlint 配置</h2><p>如果是小团队协作开发，就会涉及到代码规范问题，换个角度，如果是开源的产品，有人提 MR 的时候，我们会希望他的代码风格是比较符合我们一些预期的，因此将在项目中引入 <strong>ESlint</strong>。</p><p>先安装 eslint 开发环境依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add eslint -D</span><br></pre></td></tr></table></figure><p>然后可以使用刚安装好的 <code>eslint</code> 初始化一个配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/eslint --init</span><br></pre></td></tr></table></figure><p><img src="/images/lerna-monorepo-%E5%AE%9E%E8%B7%B5/image-20240314210923669.png" alt="image-20240314210923669"></p><p>这样在项目的根目录就有一个 <code>.eslintrc.json</code> 配置文件，</p><p>然后可以根据自己的需要去修改 ESlint 的一些规则，笔者配置好的规则内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;env&quot;: &#123;</span><br><span class="line">    &quot;browser&quot;: true,</span><br><span class="line">    &quot;commonjs&quot;: true,</span><br><span class="line">    &quot;es2021&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;extends&quot;: [&quot;eslint:recommended&quot;, &quot;plugin:@typescript-eslint/recommended&quot;],</span><br><span class="line">  &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,</span><br><span class="line">  &quot;parserOptions&quot;: &#123;</span><br><span class="line">    &quot;ecmaVersion&quot;: 8</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;plugins&quot;: [&quot;@typescript-eslint&quot;],</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    &quot;@typescript-eslint/no-unused-vars&quot;:  [</span><br><span class="line">      &quot;error&quot;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;varsIgnorePattern&quot;: &quot;^_&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;no-unused-vars&quot;: &quot;off&quot;,</span><br><span class="line">    &quot;no-console&quot;: &quot;warn&quot;,</span><br><span class="line">    &quot;space-before-function-paren&quot;: &quot;warn&quot;,</span><br><span class="line">    &quot;semi&quot;: &quot;warn&quot;,</span><br><span class="line">    &quot;quotes&quot;: [&quot;warn&quot;, &quot;single&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、Prettier-代码自动格式化"><a href="#六、Prettier-代码自动格式化" class="headerlink" title="六、Prettier 代码自动格式化"></a>六、Prettier 代码自动格式化</h2><p>前端开发项目中会涉及到一些代码格式问题，比如函数括号后空格，CSS 格式，因此可以借助 <strong>Prettier</strong> 三方工具来实现团队代码的自动统一。</p><p>安装 <code>prettier</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add prettier -D</span><br></pre></td></tr></table></figure><p>然后新建一个 <code>.prettierrc.json</code> 的配置文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;printWidth&quot;: 100, //单行长度</span><br><span class="line">  &quot;tabWidth&quot;: 2, //缩进长度</span><br><span class="line">  &quot;useTabs&quot;: false, //使用空格代替tab缩进</span><br><span class="line">  &quot;semi&quot;: true, //句末使用分号</span><br><span class="line">  &quot;singleQuote&quot;: true, //使用单引号</span><br><span class="line">  &quot;bracketSpacing&quot;: true, //在对象前后添加空格-eg: &#123; foo: bar &#125;</span><br><span class="line">  &quot;arrowParens&quot;: &quot;avoid&quot; //单参数箭头函数参数周围使用圆括号-eg: (x) =&gt; x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多使用规则可以参考：<strong>Configuration File</strong>[2]</p><p>开发者可以通过快捷键 <code>Shift + Commond + F</code> 来实现当前文件的格式化排版。</p><h2 id="七、Husky-Git-提交约束"><a href="#七、Husky-Git-提交约束" class="headerlink" title="七、Husky Git 提交约束"></a>七、Husky Git 提交约束</h2><p>当然除了手动格式化，如果开发者没有格式化就提交代码到远程了怎么办，为此，引入 <code>Husky</code> 作为 <code>Git commit</code> 提交前做一个自动格式化暂存区内的文件，以及校验是否符合 Eslint 规则。</p><p>与此同时，还需要将用户的 <code>git commit message</code> 规范，可以引入 <code>commitlint</code> 工具，用于校验提交的 <code>message</code> 格式是否符合规范</p><p>具体的规范可以参考：<strong>Conventional Commits</strong>[3]</p><p>首先安装开发环境依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn add husky@3.1.0 -D</span><br><span class="line">yarn add lint-staged -D</span><br><span class="line">yarn add @commitlint/cli -D</span><br><span class="line">yarn add @commitlint/config-conventional -D</span><br></pre></td></tr></table></figure><p>然后在 <code>package.json</code> 文件中新增如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&quot;husky&quot;: &#123;</span><br><span class="line">  &quot;hooks&quot;: &#123;</span><br><span class="line">    &quot;pre-commit&quot;: &quot;lint-staged&quot;,</span><br><span class="line">    &quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;commitlint&quot;: &#123;</span><br><span class="line">  &quot;extends&quot;: [</span><br><span class="line">    &quot;@commitlint/config-conventional&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">&quot;lint-staged&quot;: &#123;</span><br><span class="line">  &quot;*.&#123;ts,js&#125;&quot;: [</span><br><span class="line">    &quot;node --max_old_space_size=8192 ./node_modules/.bin/prettier -w&quot;,</span><br><span class="line">    &quot;node --max_old_space_size=8192 ./node_modules/.bin/eslint --fix --color&quot;,</span><br><span class="line">    &quot;git add&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样配置好了后，开发者在 <code>git commit</code> 时，会首先调用 <code>lint-staged</code> 字段中命令，首先是 <code>prettier</code> 格式化，然后是 <code>ESlint</code> 校验并修复，然后将修改后的文件存入暂存区。</p><p>然后是校验 <code>commit message</code> 是否符合规范，符合规范后才会成功 <code>commit</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;&lt;p&gt;安装lerna&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yarn global add lerna *// or* pnpm install lerna -g&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lerna init --in
      
    
    </summary>
    
    
      <category term="lerna" scheme="https://ms-yip.github.io/categories/lerna/"/>
    
      <category term="monorepo" scheme="https://ms-yip.github.io/categories/lerna/monorepo/"/>
    
    
      <category term="monorepo" scheme="https://ms-yip.github.io/tags/monorepo/"/>
    
      <category term="lerna" scheme="https://ms-yip.github.io/tags/lerna/"/>
    
  </entry>
  
  <entry>
    <title>EditorConfig</title>
    <link href="https://ms-yip.github.io/2024/02/19/EditorConfig/"/>
    <id>https://ms-yip.github.io/2024/02/19/EditorConfig/</id>
    <published>2024-02-19T08:55:27.000Z</published>
    <updated>2024-03-14T12:00:26.122Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>是什么</p><p>EditorConfig 有助于为跨各种编辑器和 IDE 处理同一项目的多个开发人员维护一致的编码风格。</p><p>EditorConfig 项目<strong>由用于【定义编码样式的文件格式规范】和一组【文本编辑器插件】组成</strong>，这些插件使编辑器能够读取文件格式并遵循定义的样式。</p><p><strong>.editorconfig 优先级比编辑器自身的设置要高</strong></p><p>EditorConfig文件从上到下读取，最新规则优先</p></li><li><p>文件格式详情</p></li></ol><p><code>EditorConfig</code> 文件使用 INI 格式（<em>译注：请参考<a href="http://zh.wikipedia.org/wiki/INI文件">维基百科</a></em>），目的是可以与 <a href="https://docs.python.org/2/library/configparser.html">Python ConfigParser Library</a> 兼容，但是<strong>允许在分段名</strong>（译注：原文是 section names）中使用 “<strong>and</strong>”。<strong>分段名是全局的文件路径</strong>，格式类似于 <a href="http://manpages.ubuntu.com/manpages/intrepid/man5/gitignore.5.html#contenttoc2">gitignore</a>。斜杠 (<code>/</code>) 作为路径分隔符，<code>#</code>或者<code>;</code> 作为注释。注释应该单独占一行。<code>EditorConfig</code> 文件使用 <code>UTF-8</code> 格式、<code>CRLF</code> 或 <code>LF</code> 作为换行符。</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><table><thead><tr><th align="left">通配符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配除<code>/</code>之外的任意字符串</td></tr><tr><td align="left">**</td><td align="left">匹配任意字符串</td></tr><tr><td align="left">?</td><td align="left">匹配任意单个字符</td></tr><tr><td align="left">[name]</td><td align="left">匹配 name 字符</td></tr><tr><td align="left">[!name]</td><td align="left">匹配非 name 字符</td></tr><tr><td align="left">{s1,s3,s3}</td><td align="left">匹配任意给定的字符串（0.11.0 起支持）</td></tr></tbody></table><p>特殊字符可以用<code>\</code>转义，以使其不被认为是通配符。</p><h3 id="支持的属性"><a href="#支持的属性" class="headerlink" title="支持的属性"></a>支持的属性</h3><p>_注意：_不是每种插件都支持所有的属性，具体可见 <a href="https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties">Wiki</a>。</p><ul><li><code>indent_style</code>：<strong>缩进风格</strong> ，<code>tab</code> 为 hard-tabs，<code>space</code> 为 soft-tabs。</li><li><code>indent_size</code>：设置整数表示规定每级缩进的列数和 soft-tabs 的宽度（<em>译注：空格数</em>）。如果设定为 <code>tab</code>，则会使用 <code>tab_width</code> 的值（如果已指定）。</li><li><code>tab_width</code>：设置整数用于指定替代 tab 的列数。默认值就是 <code>indent_size</code> 的值，一般无需指定。</li><li><code>end_of_line</code>：定义<strong>换行符</strong>，支持 <code>lf</code>（换行符）、<code>cr</code>（回车符）或 <code>crlf</code>（回车符+换行符）</li><li><code>charset</code>：编码格式，支持 <code>latin1</code>、<code>utf-8</code>、<code>utf-8-bom</code>、<code>utf-16be</code> 和 <code>utf-16le</code>，不建议使用 <code>uft-8-bom</code>。</li><li><code>trim_trailing_whitespace</code>：设为 <code>true</code> 表示会<strong>除去换行行首（尾？）的任意空白字符</strong>，<code>false</code> 反之。</li><li><code>insert_final_newline</code>：设为 <code>true</code> <strong>表明使文件以一个空白行结尾</strong>，<code>false</code> 反之。</li><li><code>root</code>：表明是<strong>最顶层的配置文件</strong>，发现设为 <code>true</code> 时，才会停止查找<code>.editorconfig</code> 文件。</li><li><code>max_line_length</code>：设置每行的最大字符数。可选值为整数。</li></ul><p>目前所有的属性名和属性值都是大小写不敏感的。编译时都会将其转为小写。通常，如果没有明确指定某个属性，则会使用编辑器的配置，而 <code>EditorConfig</code> 不会处理。</p><p>推荐不要指定某些 <code>EditorConfig</code> 属性。比如，<code>tab_width</code> 不需要特别指定，除非它与 <code>indent_size</code> 不同。同样的，当 <code>indent_style</code> 设为 <code>tab</code> 时，不需要配置 <code>indent_size</code>，这样才方便阅读者使用他们习惯的缩进格式。另外，如果某些属性并没有规范化（比如 <code>end_of_line</code>），就最好不要设置它。</p><p>示例1：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EditorConfig is awesome: http://EditorConfig.org</span></span><br><span class="line"><span class="comment"># top-most EditorConfig file</span></span><br><span class="line"><span class="attr">root</span> = <span class="string">true</span></span><br><span class="line"><span class="comment"># Unix-style newlines with a newline ending every file</span></span><br><span class="line"><span class="attr">[*]</span></span><br><span class="line"><span class="attr">end_of_line</span> = <span class="string">lf</span></span><br><span class="line"><span class="attr">insert_final_newline</span> = <span class="string">true</span></span><br><span class="line"><span class="comment"># Matches multiple files with brace expansion notation</span></span><br><span class="line"><span class="comment"># Set default charset</span></span><br><span class="line"><span class="attr">[*.&#123;js,py&#125;]</span></span><br><span class="line"><span class="attr">charset</span> = <span class="string">utf-8</span></span><br><span class="line"><span class="comment"># 4 space indentation</span></span><br><span class="line"><span class="attr">[*.py]</span></span><br><span class="line"><span class="attr">indent_style</span> = <span class="string">space</span></span><br><span class="line"><span class="attr">indent_size</span> = <span class="string">4</span></span><br><span class="line"><span class="comment"># Tab indentation (no size specified)</span></span><br><span class="line"><span class="attr">[*.js]</span></span><br><span class="line"><span class="attr">indent_style</span> = <span class="string">tab</span></span><br><span class="line"><span class="comment"># Indentation override for all JS under lib directory</span></span><br><span class="line"><span class="attr">[lib/**.js]</span></span><br><span class="line"><span class="attr">indent_style</span> = <span class="string">space</span></span><br><span class="line"><span class="attr">indent_size</span> = <span class="string">2</span></span><br><span class="line"><span class="comment"># Matches the exact files either package.json or .travis.yml</span></span><br><span class="line"><span class="attr">[&#123;package.json,.travis.yml&#125;]</span></span><br><span class="line"><span class="attr">indent_style</span> = <span class="string">space</span></span><br><span class="line"><span class="attr">indent_size</span> = <span class="string">2</span></span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Editor configuration, see http://editorconfig.org</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 表示是最顶层的 EditorConfig 配置文件</span></span><br><span class="line"><span class="attr">root</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[*]</span> <span class="string"># 表示所有文件适用</span></span><br><span class="line"><span class="attr">charset</span> = <span class="string">utf-8 # 设置文件字符集为 utf-8</span></span><br><span class="line"><span class="attr">indent_style</span> = <span class="string">space # 缩进风格（tab | space）</span></span><br><span class="line"><span class="attr">indent_size</span> = <span class="string">2 # 缩进大小</span></span><br><span class="line"><span class="attr">end_of_line</span> = <span class="string">lf # 控制换行类型(lf | cr | crlf)</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="string">true # 去除行首的任意空白字符</span></span><br><span class="line"><span class="attr">insert_final_newline</span> = <span class="string">true # 始终在文件末尾插入一个新行</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[*.md]</span> <span class="string"># 表示仅 md 文件适用以下规则</span></span><br><span class="line"><span class="attr">max_line_length</span> = <span class="string">off</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="string">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;是什么&lt;/p&gt;
&lt;p&gt;EditorConfig 有助于为跨各种编辑器和 IDE 处理同一项目的多个开发人员维护一致的编码风格。&lt;/p&gt;
&lt;p&gt;EditorConfig 项目&lt;strong&gt;由用于【定义编码样式的文件格式规范】和一组【文本编辑器插件】组成&lt;/
      
    
    </summary>
    
    
    
      <category term="工程化" scheme="https://ms-yip.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="代码编辑器配置" scheme="https://ms-yip.github.io/tags/%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>工程化</title>
    <link href="https://ms-yip.github.io/2024/02/07/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    <id>https://ms-yip.github.io/2024/02/07/%E5%B7%A5%E7%A8%8B%E5%8C%96/</id>
    <published>2024-02-07T05:32:31.378Z</published>
    <updated>2024-03-14T12:39:23.423Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240207133250755.png" alt="image-20240207133250755"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/ib7zzAv0ZhicOeurD8y2bM9c0KZC9kyVmqyQCS01OY47eFYVpL66tHxotRl1NfugXDjYSal9jjMicSrziclPiasSaCQ/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/ib7zzAv0ZhicOeurD8y2bM9c0KZC9kyVmqZib8QiaobGteMe4oZFRiamPOdFKiaBh0TdDZqgleQxHKTVDVaKnVIcAV5A/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240207133250755.png&quot; alt=&quot;image-20240207133250755&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hexo 搭建自己博客心得</title>
    <link href="https://ms-yip.github.io/2023/12/08/hexo-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E5%BF%83%E5%BE%97/"/>
    <id>https://ms-yip.github.io/2023/12/08/hexo-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E5%BF%83%E5%BE%97/</id>
    <published>2023-12-08T02:35:20.000Z</published>
    <updated>2024-03-14T12:00:26.346Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hyf.js.org/2022/10/2022-10-hexo-with-hexon-editor/">https://hyf.js.org/2022/10/2022-10-hexo-with-hexon-editor/</a></p><p>后台管理页面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://hyf.js.org/2022/10/2022-10-hexo-with-hexon-editor/&quot;&gt;https://hyf.js.org/2022/10/2022-10-hexo-with-hexon-editor/&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vite+vue3</title>
    <link href="https://ms-yip.github.io/2023/12/05/vite-vue3/"/>
    <id>https://ms-yip.github.io/2023/12/05/vite-vue3/</id>
    <published>2023-12-05T08:52:58.000Z</published>
    <updated>2024-03-14T12:00:26.383Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>安装vite </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install vite</span><br></pre></td></tr></table></figure></li><li><p>创建项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm create vite projectName</span><br></pre></td></tr></table></figure></li><li><p>添加限制安装工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;preinstall&quot;: &quot;npx only-allow yarn&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// tsconfig.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    // ...</span><br><span class="line">    &quot;types&quot;: [&quot;element-plus/global&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>安装 element-plus @element-plus/icons-vue, 按需自动导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pnpm install element-plus @element-plus/icons-vue</span><br><span class="line">pnpm install -D unplugin-vue-components unplugin-auto-import</span><br></pre></td></tr></table></figure></li><li><p><strong>vite.config.ts</strong> 设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">// 以下三项引入是为配置Element-plus自动按需导入</span><br><span class="line">import AutoImport from &#x27;unplugin-auto-import/vite&#x27;</span><br><span class="line">import Components from &#x27;unplugin-vue-components/vite&#x27;</span><br><span class="line">import &#123; ElementPlusResolver &#125; from &#x27;unplugin-vue-components/resolvers&#x27;</span><br><span class="line"></span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  // ...</span><br><span class="line">  plugins: [</span><br><span class="line">    // 以下两项是为配置Element-plus自动按需导入</span><br><span class="line">    AutoImport(&#123;</span><br><span class="line">      resolvers: [ElementPlusResolver()],</span><br><span class="line">    &#125;),</span><br><span class="line">    Components(&#123;</span><br><span class="line">      resolvers: [ElementPlusResolver()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>配置路径别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// vite.config.ts</span><br><span class="line">resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">    &#x27;@&#x27;: path.resolve(__dirname, &#x27;src&#x27;),</span><br><span class="line">    &#x27;@core&#x27;: path.resolve(__dirname, &#x27;packages/core&#x27;),</span><br><span class="line">    &#x27;@utils&#x27;: path.resolve(__dirname, &#x27;packages/utils&#x27;),</span><br><span class="line">    &#x27;@com&#x27;: path.resolve(__dirname, &#x27;packages/components&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// tsconfig.json </span><br><span class="line">/** 路径别名 */</span><br><span class="line"> &quot;baseUrl&quot;: &quot;./&quot;,</span><br><span class="line"> &quot;paths&quot;: &#123;</span><br><span class="line">      &quot;@&quot;: [&quot;src&quot;],</span><br><span class="line">      &quot;@/*&quot;: [&quot;src/*&quot;],</span><br><span class="line">      &quot;@utils&quot;: [&quot;packages/utils&quot;],</span><br><span class="line">      &quot;@utils/*&quot;: [&quot;packages/utils/*&quot;],</span><br><span class="line">      &quot;@core&quot;:[&quot;packages/core&quot;],</span><br><span class="line">      &quot;@core/*&quot;:[&quot;packages/core/*&quot;]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li><li><p>配置Element-Plus主题色</p><p><a href="https://blog.csdn.net/qq_61402485/article/details/132244435">https://blog.csdn.net/qq_61402485/article/details/132244435</a></p></li><li><p>中英文切换</p></li><li><p>配置husky、stylelint、commitlint，配置git提交代码校验</p><p><a href="https://blog.csdn.net/qq_61402485/article/details/131612959">https://blog.csdn.net/qq_61402485/article/details/131612959</a></p></li><li><p>要引入组件，还需要引入基础样式和组件样式，这个需要的<code>element-plus</code>组件变多的话，非常麻烦。</p><p>我们需要使用<code>unplugin-element-plus</code>帮助我们自动引入样式</p><p>安装<code>unplugin-element-plus</code> 到组件库的包下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">复制代码pnpm add unplugin-element-plus -D --filter components</span><br></pre></td></tr></table></figure><p>在<code>vite</code>配置文件里添加下面配置</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typescript</span><br><span class="line">复制代码<span class="comment">// /packages/components/vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-element-plus/vite&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="title class_">ElementPlus</span>(&#123;</span><br><span class="line">        <span class="comment">// 导入scss而不是css</span></span><br><span class="line">        <span class="attr">useSource</span>: <span class="literal">true</span></span><br><span class="line">      &#125;),</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>配置好后，编写组件时只用向下面这样就行</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装vite &lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue2源码学习</title>
    <link href="https://ms-yip.github.io/2023/12/04/vue2%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://ms-yip.github.io/2023/12/04/vue2%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-12-04T03:26:46.000Z</published>
    <updated>2024-03-14T12:02:55.067Z</updated>
    
    <content type="html"><![CDATA[<p><img src="image.png" alt="Alt text"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span> (options) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class="line">    !(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Vue</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">_init</span>(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initMixin</span> (<span class="title class_">Vue</span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_init</span> = <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="variable language_">this</span></span><br><span class="line">    vm.<span class="property">$options</span> = <span class="title function_">mergeOptions</span>(</span><br><span class="line">        <span class="title function_">resolveConstructorOptions</span>(vm.<span class="property">constructor</span>),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">    )</span><br><span class="line">    vm.<span class="property">_self</span> = vm</span><br><span class="line">    <span class="title function_">initLifecycle</span>(vm)    <span class="comment">// 初始化生命周期</span></span><br><span class="line">    <span class="title function_">initEvents</span>(vm)       <span class="comment">// 初始化事件</span></span><br><span class="line">    <span class="title function_">initRender</span>(vm)       <span class="comment">// 初始化渲染</span></span><br><span class="line">    <span class="title function_">callHook</span>(vm, <span class="string">&#x27;beforeCreate&#x27;</span>)     <span class="comment">// 调用生命周期钩子函数</span></span><br><span class="line">    <span class="title function_">initInjections</span>(vm) <span class="comment">// resolve injections before data/props //初始化injections</span></span><br><span class="line">    <span class="title function_">initState</span>(vm)                    <span class="comment">// 初始化props,methods,data,computed,watch</span></span><br><span class="line">    <span class="title function_">initProvide</span>(vm) <span class="comment">// resolve provide after data/props // 初始化 provide</span></span><br><span class="line">    <span class="title function_">callHook</span>(vm, <span class="string">&#x27;created&#x27;</span>)          <span class="comment">// 调用生命周期钩子函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vm.<span class="property">$options</span>.<span class="property">el</span>) &#123;</span><br><span class="line">      vm.$mount(vm.<span class="property">$options</span>.<span class="property">el</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/7092068900589797413">说说 vue2 和 vue3 核心diff算法</a></p><p>双端diff算法</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a174499e4ef64a9a80a2c2e94d5a71fb~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2140&h=1470&s=254957&e=png&b=ffffff" alt="vue2-updateChildren"></p><p>快速diff算法</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4786e15c72d7437c836e6b0649b68dd1~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2560&h=1530&s=337019&e=png&b=ffffff" alt="vue3 快速diff算法"></p><p><a href="https://xachary.github.io/vue3-diff-study/">一个动态的展示工具</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;image.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue3源码学习</title>
    <link href="https://ms-yip.github.io/2023/12/04/vue3%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://ms-yip.github.io/2023/12/04/vue3%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-12-04T03:25:13.000Z</published>
    <updated>2023-12-04T03:25:13.041Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>jquery源码学习</title>
    <link href="https://ms-yip.github.io/2023/12/04/jquery%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://ms-yip.github.io/2023/12/04/jquery%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-12-04T03:18:26.000Z</published>
    <updated>2024-03-14T12:27:52.812Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>常用链接指引</title>
    <link href="https://ms-yip.github.io/2023/11/21/%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5%E6%8C%87%E5%BC%95/"/>
    <id>https://ms-yip.github.io/2023/11/21/%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5%E6%8C%87%E5%BC%95/</id>
    <published>2023-11-21T01:52:09.000Z</published>
    <updated>2024-03-14T12:25:29.821Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5949e86fd909a7bc18ad7cdff9284ae2cd69816ed47dc1ae13df2988e9523dfb">b410b99949ff4438808f4554340fb1ace0aeaf6df94b82e9c68bdc5ec1838db0563aba1341ddea2b74ab155d2df4befd4839a44608f77f75cfa7e512fdcbcb9c2e45330ae9d04dbc7fffcb5a6c5bfb00fe7ae59ef4527067922bb202cd6b6bb976b489a4ade42d64a6b994e0699253171a89539329e39d80c325e082c86fe094670bc6d3a0e93d71b9fe33d1f69350b748383a35abc03ff7cef1fb7fbe433f2af77f1a7a032d92d7acc790a14dfd4c26af5dc7f5a444c7a0c1ae67d3c0cace61169ac5e36def782c14e2043eb1c45f4d81f25daf70c3a87c8f3295c1f526e3e1c523327702c90202341bee1c58b7b437</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pnpm 使用</title>
    <link href="https://ms-yip.github.io/2023/11/17/pnpm-%E4%BD%BF%E7%94%A8/"/>
    <id>https://ms-yip.github.io/2023/11/17/pnpm-%E4%BD%BF%E7%94%A8/</id>
    <published>2023-11-17T03:06:34.000Z</published>
    <updated>2024-03-14T12:31:07.239Z</updated>
    
    <content type="html"><![CDATA[<p>pnpm结合<strong>软硬链接</strong>与新的依赖组织方式，大大提升了包管理的效率，同时解决了幽灵依赖问题。</p><p><a href="https://juejin.cn/post/7158631927992287263">pnpm原理</a></p><p><a href="https://juejin.cn/post/6916101419703468045">pnpm原理</a></p><ul><li>幽灵依赖</li></ul><p>即某个包没有被安装在package.json里，但是用户却能够引用到这个包，原因是在npmv3版本以后，一个库只要被其他库依赖，哪怕没有显式声明在package.json中，会被安装在node_modules的一级目录里</p><ul><li><p>通过 <code>npm</code> 安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码$ npm install -g pnpm</span><br></pre></td></tr></table></figure></li><li><p>安装完成后，配置镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码<span class="comment"># 获取当前配置的镜像地址</span></span><br><span class="line">$ pnpm get registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置新的镜像地址</span></span><br><span class="line">$ pnpm <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>(可选)修改默认安装包的仓库位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码$ pnpm config <span class="built_in">set</span> store-dir E:/xxx</span><br></pre></td></tr></table></figure></li><li><p>升级版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh</span><br><span class="line">复制代码$ pnpm add -g pnpm to update</span><br></pre></td></tr></table></figure></li></ul><h3 id="pnpm-CLI"><a href="#pnpm-CLI" class="headerlink" title="pnpm CLI"></a>pnpm CLI</h3><table><thead><tr><th>npm 命令</th><th>pnpm 等效</th><th>备注</th></tr></thead><tbody><tr><td>npm install</td><td>pnpm install</td><td>用于安装项目所有依赖.<br />在 workspace内, pnpm install 下载项目所有依赖. <br />如果想禁用这个行为, 将 recursive-install 设置为 false</td></tr><tr><td><code>npm i &lt;pkg&gt;</code></td><td><code>[pnpm add &lt;pkg&gt;]</code></td><td>安装指定包</td></tr><tr><td><code>npm run &lt;cmd&gt;</code></td><td><code>[pnpm &lt;cmd&gt;]</code></td><td>脚本运行</td></tr><tr><td>npm uninstall <pkg></td><td>pnpm remove <pkg></td><td>移除指定包</td></tr><tr><td></td><td>pnpm -v</td><td></td></tr><tr><td></td><td>pnpm update <pkg> <br />pnpm up <pkg></td><td></td></tr></tbody></table><h3 id="pnpm-add"><a href="#pnpm-add" class="headerlink" title="pnpm add "></a>pnpm add <pkg></h3><p>安装软件包及其依赖的任何软件包。 默认情况下，任何新软件包都安装为生产依赖项。</p><table><thead><tr><th>Command</th><th>含义</th><th></th></tr></thead><tbody><tr><td>pnpm add sax</td><td>保存到 dependencies</td><td></td></tr><tr><td>pnpm add -D sax</td><td>保存到 devDependencies</td><td></td></tr><tr><td>pnpm add -O sax</td><td>保存到 optionalDependencies</td><td></td></tr><tr><td>pnpm add sax@next</td><td>安装 next tag</td><td></td></tr><tr><td>pnpm add <a href="mailto:sax@3.0.0">sax@3.0.0</a></td><td>安装指定版本 3.0.0</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="pnpm-update"><a href="#pnpm-update" class="headerlink" title="pnpm update"></a>pnpm update</h3><p>别名: up</p><p>pnpm update 根据指定的范围更新软件包的最新版本。</p><p>在不带参数的情况下使用时，将更新所有依赖关系。 您可以使用一些模式来更新特定的依赖项    </p><table><thead><tr><th>Command</th><th>Meaning</th></tr></thead><tbody><tr><td>pnpm up</td><td>遵循 package.json 指定的范围更新所有的依赖项</td></tr><tr><td>pnpm up –latest</td><td>更新所有依赖项，此操作会忽略 package.json 指定的范围</td></tr><tr><td>pnpm up foo@2</td><td>将 foo 更新到 v2 上的最新版本</td></tr><tr><td>pnpm up “@babel/*”</td><td>更新 @babel 范围内的所有依赖项</td></tr></tbody></table><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p> –filter 或者 -F <package_name> 可以在指定目录 </p><p>如： 执行任务 在根目录中向 example 目录安装 sass</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm  add sass   -F example</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pnpm结合&lt;strong&gt;软硬链接&lt;/strong&gt;与新的依赖组织方式，大大提升了包管理的效率，同时解决了幽灵依赖问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7158631927992287263&quot;&gt;pnpm原理&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>tailwind css 使用</title>
    <link href="https://ms-yip.github.io/2023/11/13/tailwind-css-%E4%BD%BF%E7%94%A8/"/>
    <id>https://ms-yip.github.io/2023/11/13/tailwind-css-%E4%BD%BF%E7%94%A8/</id>
    <published>2023-11-13T10:48:49.000Z</published>
    <updated>2024-03-14T12:27:52.813Z</updated>
    
    <content type="html"><![CDATA[<p>Tailwind CLI</p><ol><li><p>安装pnpm install tailwindcss@latest</p></li><li><p>新建css</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@tailwind base;</span><br><span class="line">@tailwind components;</span><br><span class="line">@tailwind utilities;</span><br></pre></td></tr></table></figure></li><li><p><strong>tailwind.confing.js 配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tailwind init</span><br></pre></td></tr></table></figure></li><li><p>配置您的模板路径：tailwind.confing.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  content: [&quot;./src/**/*.&#123;html,js&#125;&quot;],</span><br><span class="line">  theme: &#123;</span><br><span class="line">    extend: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="将-Tailwind-指令添加到您的-CSS-中-添加src-input-css"><a href="#将-Tailwind-指令添加到您的-CSS-中-添加src-input-css" class="headerlink" title="将 Tailwind 指令添加到您的 CSS 中 添加src/input.css"></a>将 Tailwind 指令添加到您的 CSS 中 添加src/input.css</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@tailwind base;</span><br><span class="line">@tailwind components;</span><br><span class="line">@tailwind utilities;</span><br></pre></td></tr></table></figure></li><li><h4 id="启动-Tailwind-CLI-构建过程-运行-CLI-工具来扫描模板文件中的类并构建-CSS"><a href="#启动-Tailwind-CLI-构建过程-运行-CLI-工具来扫描模板文件中的类并构建-CSS" class="headerlink" title="启动 Tailwind CLI 构建过程:运行 CLI 工具来扫描模板文件中的类并构建 CSS"></a>启动 Tailwind CLI 构建过程:运行 CLI 工具来扫描模板文件中的类并构建 CSS</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tailwindcss -i ./src/input.css -o ./dist/output.css --watch</span><br></pre></td></tr></table></figure></li><li><h4 id="开始在-HTML-中使用-Tailwind"><a href="#开始在-HTML-中使用-Tailwind" class="headerlink" title="开始在 HTML 中使用 Tailwind"></a>开始在 HTML 中使用 Tailwind</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;/dist/output.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-3xl font-bold underline&quot;</span>&gt;</span></span><br><span class="line">    Hello world!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>安装 初始化 生成tailwind.config.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -D tailwindcss postcss autoprefixer</span><br><span class="line">npx tailwindcss init</span><br></pre></td></tr></table></figure><ol start="2"><li>将 Tailwind 添加到您的 PostCSS 配置中 tailwindcss<code>将和添加</code>autoprefixer<code>到您的文件中，或项目中配置 PostCSS 的任何位置。</code>postcss.config.js</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    tailwindcss: &#123;&#125;,</span><br><span class="line">    autoprefixer: &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>配置您的模板路径:在文件中添加所有模板文件的路径<code>tailwind.config.js</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/** @type &#123;import(&#x27;tailwindcss&#x27;).Config&#125; */</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  content: [&quot;./src/**/*.&#123;html,js&#125;&quot;],</span><br><span class="line">  theme: &#123;</span><br><span class="line">    extend: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="将-Tailwind-指令添加到您的-CSS-中"><a href="#将-Tailwind-指令添加到您的-CSS-中" class="headerlink" title="将 Tailwind 指令添加到您的 CSS 中"></a>将 Tailwind 指令添加到您的 CSS 中</h4><p><code>@tailwind</code>将Tailwind 每个层的指令添加到您的主 CSS 文件中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@tailwind base;</span><br><span class="line">@tailwind components;</span><br><span class="line">@tailwind utilities;</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>编辑器支持：</p><p>安装<a href="https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss">Tailwind CSS IntelliSense</a>插件，提示等，<a href="https://github.com/tailwindlabs/prettier-plugin-tailwindcss">Prettier 插件</a>：<a href="https://github.com/tailwindlabs/prettier-plugin-tailwindcss">按照我们</a><a href="https://www.tailwindcss.cn/blog/automatic-class-sorting-with-prettier#how-classes-are-sorted">推荐的类顺序</a>自动对您的类进行排序。</p><p>Tailwind 与 Sass、Less 和 Stylus 等常见 CSS 预处理器结合使用</p><p>导入：</p><p>npm install -D postcss-import</p><p>// postcss.config.js </p><p>module.exports = {  plugins: {    ‘postcss-import’: {},    tailwindcss: {},    autoprefixer: {},  } }</p><p>使用：</p><p><code>postcss-import</code>是，它严格遵守 CSS 规范，并且不允许<code>@import</code>在文件最顶部以外的任何地方使用语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/* components.css */</span><br><span class="line">@import &quot;./components/buttons.css&quot;;</span><br><span class="line">@import &quot;./components/card.css&quot;;</span><br></pre></td></tr></table></figure><p>嵌套：</p><p>为了添加对嵌套声明的支持，我们推荐我们的捆绑<code>tailwindcss/nesting</code>插件，它是一个 PostCSS 插件，它包装<a href="https://github.com/postcss/postcss-nested">postcss-nested</a>或<a href="https://github.com/jonathantneal/postcss-nesting">postcss-nesting</a>并充当兼容层，（npm install -D postcss-nesting postcss-nested直接包含在<code>tailwindcss</code>包本身中，因此要使用它，您所需要做的就是将其添加到您的 PostCSS 配置中，位于 Tailwind 之前的某个位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// postcss.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    &#x27;postcss-import&#x27;: &#123;&#125;,</span><br><span class="line">    &#x27;tailwindcss/nesting&#x27;: &#x27;postcss-nesting&#x27;,</span><br><span class="line">    tailwindcss: &#123;&#125;,</span><br><span class="line">    autoprefixer: &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a><a href="https://www.tailwindcss.cn/docs/using-with-preprocessors#variables">变量</a></h3><p>如今，CSS 变量（正式称为自定义属性）具有非常好的[浏览器支持](<a href="https://caniuse.com/#search=css">https://caniuse.com/#search=css</a> custom properties)，因此您根本不需要预处理器即可使用变量。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--theme-color</span>: <span class="number">#52b3d0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--theme-color);</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">theme()`访问文件中的所有设计标记：`tailwind.config.js</span><br><span class="line">.btn &#123;</span><br><span class="line">  background-color: theme(&#x27;colors.blue.500&#x27;);</span><br><span class="line">  padding: theme(&#x27;spacing.2&#x27;) theme(&#x27;spacing.4&#x27;);</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="供应商前缀"><a href="#供应商前缀" class="headerlink" title="供应商前缀"></a><a href="https://www.tailwindcss.cn/docs/using-with-preprocessors#vendor-prefixes">供应商前缀</a></h3><p>要自动管理 CSS 中的供应商前缀，您应该使用<a href="https://github.com/postcss/autoprefixer">Autoprefixer</a>。</p><p>要使用它，请通过 npm 安装它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D autoprefixer</span><br></pre></td></tr></table></figure><p>然后将其添加到 PostCSS 配置中插件列表的最后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="attr">tailwindcss</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">autoprefixer</span>: &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Tailwind CLI&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装pnpm install tailwindcss@latest&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新建css&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue3从官网开始</title>
    <link href="https://ms-yip.github.io/2023/11/09/vue3%E4%BB%8E%E5%AE%98%E7%BD%91%E5%BC%80%E5%A7%8B/"/>
    <id>https://ms-yip.github.io/2023/11/09/vue3%E4%BB%8E%E5%AE%98%E7%BD%91%E5%BC%80%E5%A7%8B/</id>
    <published>2023-11-09T01:43:52.000Z</published>
    <updated>2024-03-14T12:27:53.018Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Vue 的两个核心功能：</p><p><strong>声明式渲染</strong>:模板语法</p><p><strong>响应性</strong>:Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM</p></li><li><p>响应式基础</p><p>深层深层响应性 ref()</p><ul><li><p>当嵌套在一个深层响应式对象内时，才会发生 ref 解包。当其作为<a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive">浅层响应式对象</a>的属性被访问时不会解包。</p></li><li><p>当 ref 作为响应式数组或原生集合类型(如 <code>Map</code>) 中的元素被访问时，它<strong>不会</strong>被解包</p></li><li><p>在模板渲染上下文中，只有顶级的 ref 属性才会被解包。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref&lt;any&gt;(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  count</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">count</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"> state.<span class="property">count</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// console.log(count.value) // 1</span></span><br><span class="line"><span class="keyword">const</span> otherCount = <span class="title function_">ref</span>(<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(otherCount.<span class="property">value</span>)  <span class="comment">// 2</span></span><br><span class="line">state.<span class="property">count</span> = otherCount</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">count</span>) <span class="comment">// 2 // 这里进行了解包</span></span><br><span class="line"><span class="comment">// 原始 ref 现在已经和 state.count 失去联系</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> books = <span class="title function_">reactive</span>([<span class="title function_">ref</span>(<span class="string">&#x27;Vue 3 Guide&#x27;</span>)])</span><br><span class="line"><span class="comment">// 这里需要 .value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(books[<span class="number">0</span>].<span class="property">value</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="title function_">reactive</span>(<span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;count&#x27;</span>, <span class="title function_">ref</span>(<span class="number">0</span>)]]))</span><br><span class="line"><span class="comment">// 这里需要 .value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;count&#x27;</span>).<span class="property">value</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> object = &#123; <span class="attr">id</span>: <span class="title function_">ref</span>(<span class="number">1</span>) &#125;</span><br><span class="line"><span class="comment">// &#123;&#123; object.id + 1 &#125;&#125;  // [object Object]1</span></span><br></pre></td></tr></table></figure></li></ol><pre><code>[shallow ref](https://cn.vuejs.org/api/reactivity-advanced.html#shallowref)  放弃深层响应性：</code></pre><p>   非原始值将通过 <a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#reactive"><code>reactive()</code></a> 转换为响应式代理，使对象本身具有响应性：</p><h3 id="reactive-的局限性"><a href="#reactive-的局限性" class="headerlink" title="reactive() 的局限性"></a><code>reactive()</code> 的局限性<a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#limitations-of-reactive"></a></h3><p>   同一个原始对象调用 <code>reactive()</code> 会总是返回同样的代理对象；</p><p>   而对一个已存在的代理对象调用 <code>reactive()</code> 会返回其本身。</p><p>   <code>reactive()</code> API 有一些局限性：</p><ol><li><p><strong>有限的值类型</strong>：它只能用于对象类型 (对象、数组和如 <code>Map</code>、<code>Set</code> 这样的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#keyed_collections">集合类型</a>)。它不能持有如 <code>string</code>、<code>number</code> 或 <code>boolean</code> 这样的<a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive">原始类型</a>。</p></li><li><p><strong>不能替换整个对象</strong>：由于 Vue 的响应式跟踪是通过属性访问实现的，因此我们必须始终保持对响应式对象的相同引用。这意味着我们不能轻易地“替换”响应式对象，因为这样的话与第一个引用的响应性连接将丢失：</p><p>js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let state = reactive(&#123; count: 0 &#125;)</span><br><span class="line"></span><br><span class="line">// 上面的 (&#123; count: 0 &#125;) 引用将不再被追踪</span><br><span class="line">// (响应性连接已丢失！)</span><br><span class="line">state = reactive(&#123; count: 1 &#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>对解构操作不友好</strong>：当我们将响应式对象的原始类型属性解构为本地变量时，或者将该属性传递给函数时，我们将丢失响应性连接：</p></li></ol><p>watch</p><ul><li><p>第一个参数：可以是一个 ref (包括计算属性)、一个响应式对象、一个 getter 函数、或多个数据源组成的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个 ref</span></span><br><span class="line"><span class="title function_">watch</span>(x, <span class="function">(<span class="params">newX</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`x is <span class="subst">$&#123;newX&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter 函数</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> x.<span class="property">value</span> + y.<span class="property">value</span>,</span><br><span class="line">  <span class="function">(<span class="params">sum</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`sum of x + y is: <span class="subst">$&#123;sum&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个来源组成的数组</span></span><br><span class="line"><span class="title function_">watch</span>([x, <span class="function">() =&gt;</span> y.<span class="property">value</span>], <span class="function">(<span class="params">[newX, newY]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`x is <span class="subst">$&#123;newX&#125;</span> and y is <span class="subst">$&#123;newY&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能直接侦听响应式对象的属性值</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"><span class="comment">// 提供一个 getter 函数</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> obj.<span class="property">count</span>,</span><br><span class="line">  <span class="function">(<span class="params">count</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count is: <span class="subst">$&#123;count&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>watchEffect()</code> 允许我们自动跟踪回调的响应式依赖</p><h3 id="watch-vs-watchEffect"><a href="#watch-vs-watchEffect" class="headerlink" title="watch vs. watchEffect"></a><code>watch</code> vs. <code>watchEffect</code><a href="https://cn.vuejs.org/guide/essentials/watchers.html#watch-vs-watcheffect"></a></h3><p><code>watch</code> 和 <code>watchEffect</code> 都能响应式地执行有副作用的回调。它们之间的主要区别是追踪响应式依赖的方式：</p><ul><li><code>watch</code> 只追踪明确侦听的数据源。它不会追踪任何在回调中访问到的东西。另外，仅在数据源确实改变时才会触发回调。<code>watch</code> 会避免在发生副作用时追踪依赖，因此，我们能更加精确地控制回调函数的触发时机。</li><li><code>watchEffect</code>，则会在副作用发生期间追踪依赖。它会在同步执行过程中，自动追踪所有能访问到的响应式属性。这更方便，而且代码往往更简洁，但有时其响应性依赖关系会不那么明确。</li></ul><h2 id="回调的触发时机"><a href="#回调的触发时机" class="headerlink" title="回调的触发时机"></a>回调的触发时机<a href="https://cn.vuejs.org/guide/essentials/watchers.html#callback-flush-timing"></a></h2><p>当你更改了响应式状态，它可能会同时触发 Vue 组件更新和侦听器回调。</p><p>默认情况下，用户创建的侦听器回调，都会在 Vue 组件更新<strong>之前</strong>被调用。这意味着你在侦听器回调中访问的 DOM 将是被 Vue 更新之前的状态。</p><p>如果想在侦听器回调中能访问被 Vue 更新<strong>之后</strong>的 DOM，你需要指明 <code>flush: &#39;post&#39;</code> 选项：</p><p>js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch(source, callback, &#123;</span><br><span class="line">  flush: &#x27;post&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">watchEffect(callback, &#123;</span><br><span class="line">  flush: &#x27;post&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后置刷新的 <code>watchEffect()</code> 有个更方便的别名 <code>watchPostEffect()</code>：</p><p>js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; watchPostEffect &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">watchPostEffect(() =&gt; &#123;</span><br><span class="line">  /* 在 Vue 更新后执行 */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>同步语句创建的侦听器，会自动绑定到宿主组件实例上，并且会在宿主组件卸载时自动停止。</p><p>异步回调创建一个侦听器，那么它不会绑定到当前组件上，你必须手动停止它，以防内存泄漏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const unwatch = watchEffect(() =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">// ...当该侦听器不再需要时</span><br><span class="line">unwatch()</span><br></pre></td></tr></table></figure><h1 id="模板引用-ref-attribute"><a href="#模板引用-ref-attribute" class="headerlink" title="模板引用 ref attribute"></a>模板引用 <code>ref</code> attribute</h1><p>允许我们在一个特定的 DOM 元素或子组件实例被挂载后，获得对它的直接引用。</p><p>组件</p><h3 id="元素位置限制"><a href="#元素位置限制" class="headerlink" title="元素位置限制"></a>元素位置限制<a href="https://cn.vuejs.org/guide/essentials/component-basics.html#element-placement-restrictions"></a></h3><p>某些 HTML 元素对于放在其中的元素类型有限制，例如 <code>&lt;ul&gt;</code>，<code>&lt;ol&gt;</code>，<code>&lt;table&gt;</code> 和 <code>&lt;select&gt;</code>，相应的，某些元素仅在放置于特定元素中时才会显示，例如 <code>&lt;li&gt;</code>，<code>&lt;tr&gt;</code> 和 <code>&lt;option&gt;</code>。</p><p>这将导致在使用带有此类限制元素的组件时出现问题。例如：</p><p>template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;blog-post-row&gt;&lt;/blog-post-row&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>自定义的组件 <code>&lt;blog-post-row&gt;</code> 将作为无效的内容被忽略，因而在最终呈现的输出中造成错误。我们可以使用特殊的 <a href="https://cn.vuejs.org/api/built-in-special-attributes.html#is"><code>is</code> attribute</a> 作为一种解决方案：</p><p>template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr is=&quot;vue:blog-post-row&quot;&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><h2 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流<a href="https://cn.vuejs.org/guide/components/props.html#one-way-data-flow"></a></h2><p>所有的 props 都遵循着<strong>单向绑定</strong>原则，props 因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。</p><h3 id="更改对象-数组类型的-props"><a href="#更改对象-数组类型的-props" class="headerlink" title="更改对象 / 数组类型的 props"></a>更改对象 / 数组类型的 props<a href="https://cn.vuejs.org/guide/components/props.html#mutating-object-array-props"></a></h3><p>当对象或数组作为 props 被传入时，虽然子组件无法更改 props 绑定，但仍然<strong>可以</strong>更改对象或数组内部的值。这是因为 JavaScript 的对象和数组是按引用传递，而对 Vue 来说，禁止这样的改动，虽然可能生效，但有很大的性能损耗，比较得不偿失。</p><p>这种更改的主要缺陷是它允许了子组件以某种不明显的方式影响父组件的状态，可能会使数据流在将来变得更难以理解。在最佳实践中，你应该尽可能避免这样的更改，除非父子组件在设计上本来就需要紧密耦合。在大多数场景下，子组件应该<a href="https://cn.vuejs.org/guide/components/events.html">抛出一个事件</a>来通知父组件做出改变。</p><h2 id="将事件作为-prop"><a href="#将事件作为-prop" class="headerlink" title="将事件作为 prop"></a>将事件作为 prop</h2><p>父组件：</p><p>vue</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComponent :onCustomEvent=&quot;handleCustomEvent&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ChildComponent,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleCustomEvent(payload) &#123;</span><br><span class="line">      console.log(&#x27;Received custom event:&#x27;, payload);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件（ChildComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;handleClick&quot;&gt;Click me&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    onCustomEvent: &#123;</span><br><span class="line">      type: Function,</span><br><span class="line">      required: true,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      const payload = &#x27;Custom event payload&#x27;;</span><br><span class="line">      this.onCustomEvent(payload);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件-v-model"><a href="#组件-v-model" class="headerlink" title="组件 v-model"></a>组件 v-model</h3><p>v-model 表单输入绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input :value=&quot;text&quot; @input=&quot;event =&gt; text = event.target.value&quot;&gt;</span><br><span class="line">&lt;input v-model=&quot;text&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="多个-v-model-绑定"><a href="#多个-v-model-绑定" class="headerlink" title="多个 v-model 绑定"></a>多个 <code>v-model</code> 绑定<a href="https://cn.vuejs.org/guide/components/v-model.html#multiple-v-model-bindings"></a></h2><p>利用刚才在 <a href="https://cn.vuejs.org/guide/components/v-model.html#v-model-arguments"><code>v-model</code> 参数</a>小节中学到的指定参数与事件名的技巧，我们可以在单个组件实例上创建多个 <code>v-model</code> 双向绑定。</p><p>组件上的每一个 <code>v-model</code> 都会同步不同的 prop，而无需额外的选项：</p><p>template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;UserName</span><br><span class="line">  v-model:first-name=&quot;first&quot;</span><br><span class="line">  v-model:last-name=&quot;last&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  firstName: String,</span><br><span class="line">  lastName: String</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">defineEmits([&#x27;update:firstName&#x27;, &#x27;update:lastName&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input</span><br><span class="line">    type=&quot;text&quot;</span><br><span class="line">    :value=&quot;firstName&quot;</span><br><span class="line">    @input=&quot;$emit(&#x27;update:firstName&#x27;, $event.target.value)&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;input</span><br><span class="line">    type=&quot;text&quot;</span><br><span class="line">    :value=&quot;lastName&quot;</span><br><span class="line">    @input=&quot;$emit(&#x27;update:lastName&#x27;, $event.target.value)&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="处理-v-model-修饰符"><a href="#处理-v-model-修饰符" class="headerlink" title="处理 v-model 修饰符"></a>处理 <code>v-model</code> 修饰符</h2><p> <code>v-model</code> 有一些<a href="https://cn.vuejs.org/guide/essentials/forms.html#modifiers">内置的修饰符</a>，例如 <code>.trim</code>，<code>.number</code> 和 <code>.lazy</code>。在某些场景下，你可能想要一个自定义组件的 <code>v-model</code> 支持自定义的修饰符。</p><h2 id="处理-v-model-修饰符-1"><a href="#处理-v-model-修饰符-1" class="headerlink" title="处理 v-model 修饰符"></a>处理 <code>v-model</code> 修饰符<a href="https://cn.vuejs.org/guide/components/v-model.html#handling-v-model-modifiers"></a></h2><p>在学习输入绑定时，我们知道了 <code>v-model</code> 有一些<a href="https://cn.vuejs.org/guide/essentials/forms.html#modifiers">内置的修饰符</a>，例如 <code>.trim</code>，<code>.number</code> 和 <code>.lazy</code>。在某些场景下，你可能想要一个自定义组件的 <code>v-model</code> 支持自定义的修饰符。</p><p>我们来创建一个自定义的修饰符 <code>capitalize</code>，它会自动将 <code>v-model</code> 绑定输入的字符串值第一个字母转为大写：</p><p>template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent v-model.capitalize=&quot;myText&quot; /&gt;</span><br></pre></td></tr></table></figure><p>组件的 <code>v-model</code> 上所添加的修饰符，可以通过 <code>modelModifiers</code> prop 在组件内访问到。在下面的组件中，我们声明了 <code>modelModifiers</code> 这个 prop，它的默认值是一个空对象：</p><p>vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  modelValue: String,</span><br><span class="line">  modelModifiers: &#123; default: () =&gt; (&#123;&#125;) &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">defineEmits([&#x27;update:modelValue&#x27;])</span><br><span class="line"></span><br><span class="line">console.log(props.modelModifiers) // &#123; capitalize: true &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input</span><br><span class="line">    type=&quot;text&quot;</span><br><span class="line">    :value=&quot;modelValue&quot;</span><br><span class="line">    @input=&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>注意这里组件的 <code>modelModifiers</code> prop 包含了 <code>capitalize</code> 且其值为 <code>true</code>，因为它在模板中的 <code>v-model</code> 绑定 <code>v-model.capitalize=&quot;myText&quot;</code> 上被使用了。</p><p>有了这个 prop，我们就可以检查 <code>modelModifiers</code> 对象的键，并编写一个处理函数来改变抛出的值。在下面的代码里，我们就是在每次 <code>&lt;input /&gt;</code> 元素触发 <code>input</code> 事件时将值的首字母大写：</p><p>vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  modelValue: String,</span><br><span class="line">  modelModifiers: &#123; default: () =&gt; (&#123;&#125;) &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const emit = defineEmits([&#x27;update:modelValue&#x27;])</span><br><span class="line"></span><br><span class="line">function emitValue(e) &#123;</span><br><span class="line">  let value = e.target.value</span><br><span class="line">  if (props.modelModifiers.capitalize) &#123;</span><br><span class="line">    value = value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class="line">  &#125;</span><br><span class="line">  emit(&#x27;update:modelValue&#x27;, value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; :value=&quot;modelValue&quot; @input=&quot;emitValue&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="带参数的-v-model-修饰符"><a href="#带参数的-v-model-修饰符" class="headerlink" title="带参数的 v-model 修饰符"></a>带参数的 <code>v-model</code> 修饰符<a href="https://cn.vuejs.org/guide/components/v-model.html#modifiers-for-v-model-with-arguments"></a></h3><p>对于又有参数又有修饰符的 <code>v-model</code> 绑定，生成的 prop 名将是 <code>arg + &quot;Modifiers&quot;</code>。举例来说：</p><p>template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent v-model:title.capitalize=&quot;myText&quot;&gt;</span><br></pre></td></tr></table></figure><p>相应的声明应该是：</p><p>js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const props = defineProps([&#x27;title&#x27;, &#x27;titleModifiers&#x27;])</span><br><span class="line">defineEmits([&#x27;update:title&#x27;])</span><br><span class="line"></span><br><span class="line">console.log(props.titleModifiers) // &#123; capitalize: true &#125;</span><br></pre></td></tr></table></figure><p>这里是另一个例子，展示了如何在使用多个不同参数的 <code>v-model</code> 时使用修饰符：</p><p>template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;UserName</span><br><span class="line">  v-model:first-name.capitalize=&quot;first&quot;</span><br><span class="line">  v-model:last-name.uppercase=&quot;last&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  firstName: String,</span><br><span class="line">  lastName: String,</span><br><span class="line">  firstNameModifiers: &#123; default: () =&gt; (&#123;&#125;) &#125;,</span><br><span class="line">  lastNameModifiers: &#123; default: () =&gt; (&#123;&#125;) &#125;</span><br><span class="line">&#125;)</span><br><span class="line">defineEmits([&#x27;update:firstName&#x27;, &#x27;update:lastName&#x27;])</span><br><span class="line"></span><br><span class="line">console.log(props.firstNameModifiers) // &#123; capitalize: true &#125;</span><br><span class="line">console.log(props.lastNameModifiers) // &#123; uppercase: true&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>插槽</p><p>要为具名插槽传入内容，我们需要使用一个含 <code>v-slot</code> 指令的 <code>&lt;template&gt;</code> 元素，并将目标插槽的名字传给该指令：</p><p>template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;BaseLayout&gt;</span><br><span class="line">  &lt;template v-slot:header&gt;</span><br><span class="line">    &lt;!-- header 插槽的内容放这里 --&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/BaseLayout&gt;</span><br></pre></td></tr></table></figure><p><code>v-slot</code> 有对应的简写 <code>#</code>，因此 <code>&lt;template v-slot:header&gt;</code> 可以简写为 <code>&lt;template #header&gt;</code>。其意思就是“将这部分模板片段传入子组件的 header 插槽中”。</p><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &lt;MyComponent&gt; 的模板 --&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;slot :text=&quot;greetingMessage&quot; :count=&quot;1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>当需要接收插槽 props 时，默认插槽和具名插槽的使用方式有一些小区别。下面我们将先展示默认插槽如何接受 props，通过子组件标签上的 <code>v-slot</code> 指令，直接接收到了一个插槽 props 对象：</p><p>template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent v-slot=&quot;slotProps&quot;&gt;</span><br><span class="line">  &#123;&#123; slotProps.text &#125;&#125; &#123;&#123; slotProps.count &#125;&#125;</span><br><span class="line">&lt;/MyComponent&gt;</span><br></pre></td></tr></table></figure><h3 id="具名作用域插槽"><a href="#具名作用域插槽" class="headerlink" title="具名作用域插槽"></a>具名作用域插槽<a href="https://cn.vuejs.org/guide/components/slots.html#named-scoped-slots"></a></h3><p>具名作用域插槽的工作方式也是类似的，插槽 props 可以作为 <code>v-slot</code> 指令的值被访问到：<code>v-slot:name=&quot;slotProps&quot;</code>。当使用缩写时是这样：</p><p>template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent&gt;</span><br><span class="line">  &lt;template #header=&quot;headerProps&quot;&gt;</span><br><span class="line">    &#123;&#123; headerProps &#125;&#125;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template #default=&quot;defaultProps&quot;&gt;</span><br><span class="line">    &#123;&#123; defaultProps &#125;&#125;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template #footer=&quot;footerProps&quot;&gt;</span><br><span class="line">    &#123;&#123; footerProps &#125;&#125;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/MyComponent&gt;</span><br></pre></td></tr></table></figure><p>异步组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const AdminPage = defineAsyncComponent(() =&gt;</span><br><span class="line">  import(&#x27;./components/AdminPageComponent.vue&#x27;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const AsyncComp = defineAsyncComponent(&#123;</span><br><span class="line">  // 加载函数</span><br><span class="line">  loader: () =&gt; import(&#x27;./Foo.vue&#x27;),</span><br><span class="line"></span><br><span class="line">  // 加载异步组件时使用的组件</span><br><span class="line">  loadingComponent: LoadingComponent,</span><br><span class="line">  // 展示加载组件前的延迟时间，默认为 200ms</span><br><span class="line">  delay: 200,</span><br><span class="line"></span><br><span class="line">  // 加载失败后展示的组件</span><br><span class="line">  errorComponent: ErrorComponent,</span><br><span class="line">  // 如果提供了一个 timeout 时间限制，并超时了</span><br><span class="line">  // 也会显示这里配置的报错组件，默认值是：Infinity</span><br><span class="line">  timeout: 3000</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Vue 的两个核心功能：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;声明式渲染&lt;/strong&gt;:模板语法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应性&lt;/strong&gt;:Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM&lt;/p&gt;
&lt;/li&gt;

      
    
    </summary>
    
    
    
      <category term="vue" scheme="https://ms-yip.github.io/tags/vue/"/>
    
      <category term="vue3" scheme="https://ms-yip.github.io/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>JS高级技巧</title>
    <link href="https://ms-yip.github.io/2023/11/03/JS%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/"/>
    <id>https://ms-yip.github.io/2023/11/03/JS%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/</id>
    <published>2023-11-03T00:39:44.000Z</published>
    <updated>2024-03-14T12:27:52.901Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/dandan666dandan/article/details/99623052?spm=1001.2014.3001.5502">https://blog.csdn.net/dandan666dandan/article/details/99623052?spm=1001.2014.3001.5502</a></p><h4 id="安全的类型检测"><a href="#安全的类型检测" class="headerlink" title="安全的类型检测"></a>安全的类型检测</h4><p>用于区分原生和非原生<strong>JavaScript</strong>对象，通过<code>Object.prototype.toString()</code>。</p><p><strong>在任何值上调用 Object 原生的 toString()方法，都会返回一个[object NativeConstructorName]格式的字符串</strong>。 </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isArray</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value) == <span class="string">&quot;[object Array]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isFunction</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value) == <span class="string">&quot;[object Function]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isRegExp</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value) == <span class="string">&quot;[object RegExp]&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="作用域安全的构造函数"><a href="#作用域安全的构造函数" class="headerlink" title="作用域安全的构造函数"></a>作用域安全的构造函数</h4><p>防止构造函数内<code>this</code>指针的指向被改变（指向<code>window</code>）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name, age, job) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Person</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(name, age, job);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>惰性载入函数<br>惰性载入表示函数执行的分支仅会发生一次。</p><p>实现惰性载入的两种方式：<br>1）在函数被调用时再处理函数。<br>在第一次调用的过程中，该函数会被覆盖为另外一个按合适方式执行的函数，这样任何对原函数的调用都不用再经过执行的分支。<br>2）在声明函数时就指定适当的函数。<br>第一次调用函数时就不会损失性能，而在代码首次加载时会损失一点性能。</p><p>惰性载入函数的优点：只在执行分支代码时牺牲一点儿性能。两种方式都能避免执行不必要的代码，哪个更合适根据具体需求而定函数绑定要创建一个函数，可以在特定的 this 环境中以指定参数调用另一个函数。<br>该技巧常常和回调函数与事件处理程序一起使用，以便在将函数作为变量传递的同时保留代码执行环境。</p><h5 id="函数绑定"><a href="#函数绑定" class="headerlink" title="函数绑定"></a>函数绑定</h5><p>一个简单的 bind() 函数接受一个函数和一个环境，并返回一个在给定环境中调用给定函数的函数，并且将所有参数原封不动传递过去。<br>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function bind(fn, context)&#123;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        return fn.apply(context, arguments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ECMAScript 5 为所有函数定义了一个原生的 bind() 方法，进一步简单了操作，不用再自己定义 bind() 函数。<br>使用方法：fn.bind(context) // 传入作为this值的对象<br>支持原生 bind() 方法的浏览器：IE9+、Firefox 4+ 和 Chrome。</p><p>适用场景：要将某个函数指针以值的形式进行传递，同时该函数必须在特定环境中执行。<br>主要用于：事件处理程序以及 setTimeout() 和 setInterval()。<br>注意：被绑定函数与普通函数相比有更多的开销，它们需要更多内存，同时也因为多重函数调用稍微慢一点，所以最好只在必要时使用。</p><h5 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h5><p>与函数绑定紧密相关的主题是函数柯里化(function currying)，它用于创建已经设置好了一个或多个参数的函数。<br>函数柯里化的基本方法和函数绑定是一样的：使用一个闭包返回一个函数。两者的区别在于，当函数被调用时，返回的函数还需要设置一些传入的参数。</p><p>柯里化函数通常由以下步骤动态创建：调用另一个函数并为它传入要柯里化的函数和必要参数。<br>创建柯里化函数的通用方式：</p><p>// 这个curry()函数的主要工作就是将被返回函数的参数进行排序<br>function curry(fn){<br>    var args = Array.prototype.slice.call(arguments, 1);<br>    return function(){<br>        var innerArgs = Array.prototype.slice.call(arguments);<br>        var finalArgs = args.concat(innerArgs);<br>        return fn.apply(null, finalArgs);<br>    };<br>}<br>// curry()的第一个参数是要进行柯里化的函数，其他参数是要传入的值。<br>// 这个函数并没有考虑到执行环境，所以调用apply()时第一个参数是null。</p><p>调用：</p><p>function add(num1, num2){<br>    return num1 + num2;<br>}<br>// 创建了第一个参数绑定为5的add()的柯里化版本<br>var curriedAdd = curry(add, 5);<br>alert(curriedAdd(3));   //8<br>// 柯里化的add()函数两个参数都提供了<br>var curriedAdd = curry(add, 5, 12);<br>alert(curriedAdd());   //17</p><p>函数柯里化还常常作为函数绑定的一部分包含在其中，构造出更为复杂的 bind()函数。</p><p>function bind(fn, context){<br>    var args = Array.prototype.slice.call(arguments, 2);<br>    return function(){<br>        var innerArgs = Array.prototype.slice.call(arguments);<br>        var finalArgs = args.concat(innerArgs);<br>        return fn.apply(context, finalArgs);<br>    };<br>}<br>ECMAScript 5 的 bind() 方法也实现函数柯里化，只要在 this 的值之后再传入另一个参数即可。<br>fn.bind(context, arg));</p><p>JavaScript 中的柯里化函数和绑定函数提供了强大的动态函数创建功能。<br>使用 bind() 还是 curry() 要根据是否需要 object 对象响应来决定。<br>它们都能用于创建复杂的算法和功能，当然两者都不应滥用，因为每个函数都会带来额外的开销。</p><h4 id="二、防篡改对象"><a href="#二、防篡改对象" class="headerlink" title="二、防篡改对象"></a>二、防篡改对象</h4><ol><li><p>不可扩展对象<br>默认情况下，所有对象都是可以扩展的。也就是说，任何时候都可以向对象中添加属性和方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.preventExtensions()// ：不能再给对象添加属性和方法。</span><br></pre></td></tr></table></figure><p>在非严格模式下，给不可扩展的对象添加新成员会导致静默失败。在严格模式下，给不可扩展的对象添加新成员会导致抛出错误。<br>虽然不能给对象添加新成员，但已有的成员则丝毫不受影响。仍然可以修改和删除已有的成员。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.istExtensible() // ：确定对象是否可以扩展。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123; name: &quot;Nicholas&quot; &#125;;</span><br><span class="line">alert(Object.isExtensible(person)); //true</span><br><span class="line">Object.preventExtensions(person);</span><br><span class="line">alert(Object.isExtensible(person)); //false</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-密封的对象"><a href="#2-密封的对象" class="headerlink" title="2. 密封的对象"></a>2. 密封的对象</h5><p>Object.seal()：密封对象。<br>非严格模式下，添加或删除会被忽略；在严格模式下，尝试添加或删除对象成员都会导致抛出错误。<br>Object.isSealed()：确定对象是否被密封。<br>因为被密封的对象不可扩展，所以用 Object.isExtensible() 检测密封的对象也会返回 false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123; name: &quot;Nicholas&quot; &#125;;</span><br><span class="line">alert(Object.isExtensible(person)); //true</span><br><span class="line">alert(Object.isSealed(person));     //false</span><br><span class="line">Object.seal(person);</span><br><span class="line">alert(Object.isExtensible(person)); //false</span><br><span class="line">alert(Object.isSealed(person));     //true</span><br></pre></td></tr></table></figure><h5 id="3-冻结的对象"><a href="#3-冻结的对象" class="headerlink" title="3. 冻结的对象"></a>3. 冻结的对象</h5><p>Object.freeze()：冻结对象。<br>对冻结的对象执行非法操作在非严格模式下会被忽略，在严格模式下会抛出错误。<br>Object.isFrozen()：检测冻结对象。<br>因为冻结对象既是密封的又是不可扩展的，所以用 Object.isExtensible() 和 Object.isSealed() 检测冻结对象将分别返回 false 和 true。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123; name: &quot;Nicholas&quot; &#125;;</span><br><span class="line">alert(Object.isExtensible(person)); //true</span><br><span class="line">alert(Object.isSealed(person)); //false</span><br><span class="line">alert(Object.isFrozen(person)); //false</span><br><span class="line">Object.freeze(person);</span><br><span class="line">alert(Object.isExtensible(person)); //false</span><br><span class="line">alert(Object.isSealed(person)); //true</span><br><span class="line">alert(Object.isFrozen(person)); //true</span><br></pre></td></tr></table></figure></li><li><h3 id="离线检测"><a href="#离线检测" class="headerlink" title="离线检测"></a>离线检测</h3><p><code>navigator.onLine</code>属性可以判断设备否能访问网络。</p><p>HTML5定义两个事件：<code>online</code>和<code>offline</code>，当网络状态变化时，分别触发这两个事件：</p></li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">EventUtil</span>.<span class="title function_">addHandler</span>(<span class="variable language_">window</span>, <span class="string">&#x27;online&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;online&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">EventUtil</span>.<span class="title function_">addHandler</span>(<span class="variable language_">window</span>, <span class="string">&#x27;offline&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;offline&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><h4 id="Web存储机制"><a href="#Web存储机制" class="headerlink" title="Web存储机制"></a>Web存储机制</h4><p>  Web Storage规范包含两种对象的定义：<code>sessionStorage</code>和<code>globalStorage</code>。这两个对象在支持的浏览器中都是以<code>windows</code>对象属性的形式存在。</p><h5 id="Storage类型"><a href="#Storage类型" class="headerlink" title="Storage类型"></a><code>Storage</code>类型</h5><p>  <code>Storage</code>类型提供最大的存储空间来存储名值对。</p><ul><li><p><code>clear()</code>：删除所有值</p></li><li><p><code>getItem(name)</code>：根据指定的名字<code>name</code>获取对应的值</p></li><li><p><code>key(index)</code>：获得<code>index</code>位置处的值的名字</p></li><li><p><code>removeItem(name)</code>：删除由<code>name</code>指定的名值对</p></li><li><p><code>setItem(name, value)</code>：为指定的<code>name</code>设置一个对应的值</p><h5 id="sessionStorage对象"><a href="#sessionStorage对象" class="headerlink" title="sessionStorage对象"></a><code>sessionStorage</code>对象</h5><p><code>sessionStorage</code>对象存储特定于某个会话的数据，也就是该数据只保持到浏览器关闭。存储在<code>sessionStorage</code>中的数据可以跨越页面刷新而存在。</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//使用方法存储数据</span><br><span class="line">sessionStorage.setItem(&quot;name&quot;, &quot;Nicholas&quot;);</span><br><span class="line">//使用属性存储数据</span><br><span class="line">sessionStorage.book = &quot;Professional JavaScript&quot;;</span><br><span class="line"></span><br><span class="line">//使用方法读取数据</span><br><span class="line">var name = sessionStorage.getItem(&quot;name&quot;);</span><br><span class="line">//使用属性读取数据</span><br><span class="line">var book = sessionStorage.book;</span><br><span class="line"></span><br><span class="line">//使用delete 删除一个值——在WebKit 中无效</span><br><span class="line">delete sessionStorage.name;</span><br><span class="line">//使用方法删除一个值</span><br><span class="line">sessionStorage.removeItem(&quot;book&quot;);</span><br></pre></td></tr></table></figure><p>可以通过结合<code>length</code>属性和<code>key()</code>方法来迭代<code>sessionStorage</code>中的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0, len = sessionStorage.length; i &lt; len; i++) &#123;</span><br><span class="line">    var key = sessionStorage.key(i);</span><br><span class="line">    var value = sessionStorage.getItem(key);</span><br><span class="line">    console.log(key + &#x27; = &#x27; + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以使用<code>for-in</code>循环来迭代<code>sessionStorage</code>中的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (var key in sessionStorage) &#123;</span><br><span class="line">    var value = sessionStorage.getItem(key);</span><br><span class="line">    console.log(key + &#x27; = &#x27; + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="globalStorage对象"><a href="#globalStorage对象" class="headerlink" title="globalStorage对象"></a><code>globalStorage</code>对象</h5><p>这个对象的目的是跨越会话存储数据，，但有特定的访问限制。要使用<code>globalStorage</code>，首先要指定哪些域可以访问该数据。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line">globalStorage[<span class="string">&#x27;wrox.com&#x27;</span>].name = <span class="string">&#x27;Yeaseon&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line"><span class="keyword">var</span> name = globalStorage[<span class="string">&#x27;wrox.com&#x27;</span>].name;</span><br></pre></td></tr></table></figure><p>上例，访问的是针对域名<code>wrox.com</code>的存储空间。<code>globalStorage</code>对象不是<code>Storage</code>的实例，<br> 而具体的<code>globalStorage[&#39;wrox.com&#39;]</code>才是。这个存储空间对于<code>wrox.com</code>及其所有子域都是可以访问的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">globalStorage[<span class="string">&quot;www.wrox.com&quot;</span>].name = <span class="string">&quot;Yeaseon&quot;</span>;</span><br><span class="line">globalStorage[<span class="string">&quot;www.wrox.com&quot;</span>].book = <span class="string">&quot;Professional JavaScript&quot;</span>;</span><br><span class="line">globalStorage[<span class="string">&quot;www.wrox.com&quot;</span>].removeItem(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> book = globalStorage[<span class="string">&quot;www.wrox.com&quot;</span>].getItem(<span class="string">&quot;book&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="localStorage对象"><a href="#localStorage对象" class="headerlink" title="localStorage对象"></a><code>localStorage</code>对象</h5><p><code>localStorage</code>对象是HTML5规范中作为持久保存客户端数据的方案，并且取代<code>globalStorage</code>。要访问同一个<code>localStorage</code>对象，页面必须来自同一个域名（子域名无效），必须同源。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用方法存储数据</span></span><br><span class="line">localStorage.setItem(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Nicholas&quot;</span>);</span><br><span class="line"><span class="comment">//使用属性存储数据</span></span><br><span class="line">localStorage.book = <span class="string">&quot;Professional JavaScript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法读取数据</span></span><br><span class="line"><span class="keyword">var</span> name = localStorage.getItem(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//使用属性读取数据</span></span><br><span class="line"><span class="keyword">var</span> book = localStorage.book;</span><br></pre></td></tr></table></figure><h5 id="storage事件"><a href="#storage事件" class="headerlink" title="storage事件"></a><code>storage</code>事件</h5><p>对<code>Storage</code>对象进行任何修改，都会在文档上触发<code>storage</code>事件。这个事件的<code>event</code>对象有以下属性。</p><ul><li><code>domain</code>：发生变化的存储空间的域名</li><li><code>key</code>：设置或删除的键名</li><li><code>newValue</code>：如果是设置值，则是新值；如果是删除键，则是<code>null</code></li><li><code>oldValue</code>：键被更改之前的值</li></ul><p>在这四个属性中，IE8 和Firefox 只实现了<code>domain</code> 属性。在撰写本书的时候，WebKit 尚不支持<br> <code>storage</code> 事件</p><h4 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h4><p>Indexed Database API，简称<strong>IndexedDB</strong>，是在浏览器中保存结构化数据的一种数据库。<strong>IndexedDB</strong>设计的操作完全是异步进行。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> indexedDB = <span class="built_in">window</span>.indexedDB || <span class="built_in">window</span>.msIndexedDB || <span class="built_in">window</span>.mozIndexedDB || <span class="built_in">window</span>.webkitIndexedDB;</span><br></pre></td></tr></table></figure><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><p><strong>IndexedDB</strong>就是一个数据库，它最大的特色就是使用对象保存数据，而不是使用表来保存数据。</p><p><code>indexDB.open()</code>，传入一个数据库参数。如果该数据库存在就会发送一个打开它的请求；如果该数据库不存在，就会发送一个创建并打开它的请求。请求会返回一个<code>IDBRequest</code>对象，这个对象上可以添加<code>onerror</code>和<code>onsuccess</code>事件处理程序。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request, database;</span><br><span class="line"></span><br><span class="line">request = indexedDB.<span class="title function_">open</span>(<span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line">request.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">errorCode</span>);</span><br><span class="line">&#125;;</span><br><span class="line">request.<span class="property">onsuccess</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    database = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>event.target</code>都指向<code>request</code>对象，因此他们可以互换使用。<br> 发生错误了，<code>event.target.errorCode</code>中将会保存一个错误码：</p><ul><li><code>IDBDatebaseException.UNKNOWN_ERR(1)</code>：意外错误</li><li><code>IDBDatebaseException.NON_TRANSIENT_ERR(2)</code>：操作不合法</li><li><code>IDBDatebaseException.NOT_FOUND_ERR(3)</code>：未发现要操作的数据库</li><li><code>IDBDatebaseException.CONSTRAINT_ERR(4)</code>：违反了数据库约束</li><li><code>IDBDatebaseException.DATA_ERR(5)</code>：提供给事务的数据不能满足要求</li><li><code>IDBDatebaseException.NOT_ALLOWED_ERR(6)</code>：操作不合法</li><li><code>IDBDatebaseException.TRANSACTION_INACTIVE_ERR(7)</code>：试图重用已完成的事务</li><li><code>IDBDatebaseException.ABORT_ERR(8)</code>：请求中断</li><li><code>IDBDatebaseException.READ_ONLY_ERR(9)</code>：试图在只读模式下写入或修改数据</li><li><code>IDBDatebaseException.TIMEOUT_ERR(10)</code>：在有效时间内未完成操作</li><li><code>IDBDatebaseException.QUOTA_ERR(11)</code>：磁盘空间不足</li></ul><p>指定数据库版本号，通过<code>setVersion()</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (database.version != &#x27;1.0&#x27;) &#123;</span><br><span class="line">    request = database.setVersion(&#x27;1.0&#x27;)；</span><br><span class="line">    request.onerror = function (event) &#123;</span><br><span class="line">        console.log(event.target.errorCode);</span><br><span class="line">    &#125;;</span><br><span class="line">    request.onsuccess = function (event) &#123;</span><br><span class="line">        console.log(&#x27;&#x27;Database name: &#x27; + database.name + &#x27;, Version: &#x27; + database.version);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    console.log(&#x27;&#x27;Database name: &#x27; + database.name + &#x27;, Version: &#x27; + database.version);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="对象存储空间"><a href="#对象存储空间" class="headerlink" title="对象存储空间"></a>对象存储空间</h5><p>假设要保存的用户记录由用户名、密码等组成，那么保存一条记录的对象应该类似：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    username: <span class="string">&#x27;007&#x27;</span>,</span><br><span class="line">    firstname: <span class="string">&#x27;James&#x27;</span>,</span><br><span class="line">    lastname: <span class="string">&#x27;Bond&#x27;</span>,</span><br><span class="line">    password: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用<code>username</code>属性作为这个对象存储空间的键，这个<code>username</code>必须全局唯一，而且大部分时候都要通过这个键来访问数据。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> store = db.createObjectStore(<span class="string">&#x27;users&#x27;</span>, &#123; keyPath: <span class="string">&#x27;username&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><p>其中第二个参数中的<code>keyPath</code>属性，就是空间中将要保存的对象的一个属性，而这个属性将作为存储空间的键来使用。</p><p>通过<code>add()</code>或<code>put()</code>方法来向存储空间添加数据。着两个方法都接收一个参数，就是要保存的对象。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//users 中保存着一批用户对象</span></span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>,</span><br><span class="line">    request,</span><br><span class="line">    requests = [],</span><br><span class="line">    len = users.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; len)&#123;</span><br><span class="line">    request = store.<span class="title function_">add</span>(users[i++]);</span><br><span class="line">    request.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//处理错误</span></span><br><span class="line">    &#125;;</span><br><span class="line">    request.<span class="property">onsuccess</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//处理成功</span></span><br><span class="line">    &#125;;</span><br><span class="line">    requests.<span class="title function_">push</span>(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h5><p>在数据库对象上调用<code>transaction()</code>可以创建事务，任何时候，只要想读取或修改数据，都要通过事务来组织所有操作。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建事务</span></span><br><span class="line"><span class="keyword">var</span> transaction = db.transaction();</span><br></pre></td></tr></table></figure><p>可以传入要访问的一或多个对象存储空间。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> transaction = db.transaction(<span class="string">&#x27;users&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> transaction = db.transaction([<span class="string">&#x27;users&#x27;</span>, <span class="string">&#x27;anotherStore&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>前面这些事务都是以<strong>只读</strong>方式访问数据。要修改访问方式，必须在创建事务时传入第二个参数，这个参数表示访问模式：</p><ul><li><code>IDBTransaction.READ_ONLY(0)</code>：只读</li><li><code>IDBTransaction.READ_WRITE(1)</code>：读写</li><li><code>IDBTransaction.VERSION_CHANGE(2)</code>：改变</li></ul><p>在Chrome中叫做<code>webkitIDBTransaction</code>，可以使用一下代码兼容：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> IDBTransaction = <span class="built_in">window</span>.IDBTransaction || <span class="built_in">window</span>.webkitIDBTransaction;</span><br></pre></td></tr></table></figure><p>这样就能方便的指定<code>transaction()</code>第二个参数:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> transaction = db.transaction(<span class="string">&#x27;users&#x27;</span>, IDBTransaction.READ_WRITE);</span><br></pre></td></tr></table></figure><p>取得事务的索引后，使用<code>objectStore()</code>方法并传入存储空间的名称，就可以访问指定的存储空间。然后通过如下方法操作对象：</p><ul><li><code>add()</code></li><li><code>put()</code></li><li><code>get()</code></li><li><code>delete()</code></li><li><code>clear()</code></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = db.<span class="title function_">transaction</span>(<span class="string">&#x27;users&#x27;</span>).<span class="title function_">objectStore</span>(<span class="string">&#x27;users&#x27;</span>).<span class="title function_">get</span>(<span class="string">&#x27;007&#x27;</span>);</span><br><span class="line">request.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Did not get the object!&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">request.<span class="property">onsuccess</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">firstName</span>);  <span class="comment">// &#x27;James&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>也可以针对事务对象本身进行事件处理，存在两个事件<code>onerror</code>，<code>oncomplete</code>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">transaction.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 整个事务都被取消了</span></span><br><span class="line">&#125;</span><br><span class="line">transaction.<span class="property">oncomplete</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 整个事务都成功完成了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：在<code>oncomplete</code>事件的事件对象中访问不到<code>get()</code>请求返回的数据，必须在<code>onsuccess</code>事件中处理。</p><h5 id="键范围"><a href="#键范围" class="headerlink" title="键范围"></a>键范围</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> IDBKeyRange = <span class="built_in">window</span>.IDBKeyRange || <span class="built_in">window</span>.webkitIDBKeyRange;</span><br></pre></td></tr></table></figure><p>有四种定义键范围的方法：</p><ul><li><code>only()</code>：取得指定对象的键</li><li><code>lowerBound()</code>：指定结果集的下界</li><li><code>upperBound()</code>：指定结果集的上界</li><li><code>bound()</code>：同时指定上、下界</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var onlyRange = <span class="title class_">IDBKeyRange</span>.only(<span class="string">&quot;007&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>从键为<span class="string">&quot;007&quot;</span>的对象开始，然后可以移动到最后</span><br><span class="line">var lowerRange = <span class="title class_">IDBKeyRange</span>.lowerBound(<span class="string">&quot;007&quot;</span>);</span><br><span class="line"><span class="regexp">//</span>从键为<span class="string">&quot;007&quot;</span>的对象的下一个对象开始，然后可以移动到最后</span><br><span class="line">var lowerRange = <span class="title class_">IDBKeyRange</span>.lowerBound(<span class="string">&quot;007&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>从头开始，到键为<span class="string">&quot;ace&quot;</span>的对象为止</span><br><span class="line">var upperRange = <span class="title class_">IDBKeyRange</span>.upperBound(<span class="string">&quot;ace&quot;</span>);</span><br><span class="line"><span class="regexp">//</span>从头开始，到键为<span class="string">&quot;ace&quot;</span>的对象的上一个对象为止</span><br><span class="line">var upperRange = <span class="title class_">IDBKeyRange</span>.upperBound(<span class="string">&quot;ace&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>从键为<span class="string">&quot;007&quot;</span>的对象开始，到键为<span class="string">&quot;ace&quot;</span>的对象为止</span><br><span class="line">var boundRange = <span class="title class_">IDBKeyRange</span>.bound(<span class="string">&quot;007&quot;</span>, <span class="string">&quot;ace&quot;</span>);</span><br><span class="line"><span class="regexp">//</span>从键为<span class="string">&quot;007&quot;</span>的对象的下一个对象开始，到键为<span class="string">&quot;ace&quot;</span>的对象为止</span><br><span class="line">var boundRange = <span class="title class_">IDBKeyRange</span>.bound(<span class="string">&quot;007&quot;</span>, <span class="string">&quot;ace&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="regexp">//</span>从键为<span class="string">&quot;007&quot;</span>的对象的下一个对象开始，到键为<span class="string">&quot;ace&quot;</span>的对象的上一个对象为止</span><br><span class="line">var boundRange = <span class="title class_">IDBKeyRange</span>.bound(<span class="string">&quot;007&quot;</span>, <span class="string">&quot;ace&quot;</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="regexp">//</span>从键为<span class="string">&quot;007&quot;</span>的对象开始，到键为<span class="string">&quot;ace&quot;</span>的对象的上一个对象为止</span><br><span class="line">var boundRange = <span class="title class_">IDBKeyRange</span>.bound(<span class="string">&quot;007&quot;</span>, <span class="string">&quot;ace&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="新型的API"><a href="#新型的API" class="headerlink" title="新型的API"></a>新型的API</h2><h3 id="Page-Visibility-API"><a href="#Page-Visibility-API" class="headerlink" title="Page Visibility API"></a>Page Visibility API</h3><p>Page Visibility API 是为了让开发人员知道页面是否对用户可见推出的。</p><ul><li><p><code>document.hidden</code>：表示页面是否隐藏的布尔值。</p></li><li><pre><code>document.visibilityState<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 页面在后台标签页中或浏览器最小化</span><br><span class="line">  - 页面在前台标签页中</span><br><span class="line">  - 实际的页面已经隐藏，但用户可以看到页面的预览</span><br><span class="line">  - 页面在屏幕外执行预渲染处理</span><br><span class="line"></span><br><span class="line">- `visibilitychange`事件：当文档可见性发生改变时，触发该事件。</span><br><span class="line"></span><br><span class="line">### Geolocation API</span><br><span class="line"></span><br><span class="line">Geolocation API 在浏览器中的实现是`navigator.geolocation`对象。</span><br><span class="line"></span><br><span class="line">- `getCurrentPosition()`</span><br><span class="line"></span><br><span class="line">调用这个方法就会触发请求用户共享地理定位信息的对话框。这个方法接收三个参数：成功回调，可选的失败回调和可选的选项对象。</span><br><span class="line"></span><br><span class="line">`成功回调`会接收到一个`Position`对象参数，该对象有两个属性:`coords`和`timestamp`。</span><br><span class="line"></span><br><span class="line">`coords`对象中包含于位置相关的信息：</span><br><span class="line"></span><br><span class="line">- `latitude`：十进制度数表示的纬度</span><br><span class="line">- `longitude`：十进制度数表示的经度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- `accuracy`：经纬度坐标的精度，以米为单位</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```jsx</span><br><span class="line">navigator.geolocation.getCurrentPosition(function (position) &#123;</span><br><span class="line">    drawMapCenteredAt(position.coords.latitude, position.coords.longitude);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></code></pre></li></ul><p><code>失败回调</code>在被调用的时候也会接受到一个参数，这个参数是一个对象，包含连个属性：<code>message</code>和<code>code</code>。<code>code</code>保存着一个数值，表示错误的类型：用户拒绝共享（1）、位置无效（2）或者超时（3）。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">navigator.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(<span class="keyword">function</span> (<span class="params">position</span>) &#123;</span><br><span class="line">    <span class="title function_">drawMapCenteredAt</span>(position.<span class="property">coords</span>.<span class="property">latitude</span>, position.<span class="property">coords</span>.<span class="property">longitude</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error code:&#x27;</span> + error.<span class="property">code</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error message:&#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第三个参数是一个<code>可选对象</code>，用于设定信息的类型。可以设置的选项有三个：</p><ul><li><code>enableHightAccuracy</code>：布尔值，表示必须尽可能使用最准确定的位置信息</li><li><code>timeout</code>：以毫秒数表示的等待位置信息的最长时间</li><li><code>maximumAge</code>：表示上一次取得的坐标信息的有效时间，以毫秒表示，如果时间到则重新取得新坐标信息</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">navigator.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(<span class="keyword">function</span> (<span class="params">position</span>) &#123;</span><br><span class="line">    <span class="title function_">drawMapCenteredAt</span>(position.<span class="property">coords</span>.<span class="property">latitude</span>, position.<span class="property">coords</span>.<span class="property">longitude</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error code:&#x27;</span> + error.<span class="property">code</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error message:&#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">enableHighAccuracy</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="attr">maximumAge</span>: <span class="number">25000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="File-API"><a href="#File-API" class="headerlink" title="File API"></a>File API</h3><p>File API 在表单中的文件输入字段的基础上，又添加了一些直接访问文件信息的接口。HTML5在DOM中为文件输入元素添加了一个<code>files</code>集合。每个<strong>File</strong>对象都有下列只读属性。</p><ul><li><code>name</code>：本地文件系统的文件名</li><li><code>size</code>：文件的字节大小</li><li><code>type</code>：字符串，文件的MIME类型</li><li><code>lastModifiedDate</code>：字符串，文件上一次修改的时间</li></ul><h4 id="FileReader-类型"><a href="#FileReader-类型" class="headerlink" title="FileReader 类型"></a>FileReader 类型</h4><p>FileReader 类型实现的是一种异步文件读取机制。可以把<code>FileReader</code>想象成<code>XMLHttpRequest</code>。</p><ul><li><code>readAsText(file, encoding)</code>：以纯文本形式读取文件，将读取到的文本保存在<code>result</code>属性中，第二个参数用于指定编码类型（可选）</li><li><code>readAsDataURL(file)</code>：读取文件并将文件以数据URI形式保存在<code>result</code>属性中</li><li><code>readAsBinaryString(file)</code>：读取文件并将一个字符串保存在<code>result</code>属性中，字符串中的每个字符表示一字节</li><li><code>readAsArrayBuffer(file)</code>：读取文件并将一个包含文件内容的<code>ArrayBuffer</code>保存在<code>result</code>属性中</li></ul><p>由于读取过程是异步的，所以<code>FileReader</code>提供了三个事件：</p><ul><li><code>progress</code></li><li><code>error</code></li><li><code>load</code></li></ul><p><code>progress</code>事件，每50ms就会触发一次，通过事件对象可以获得与<code>XHR</code>的<code>progress</code>事件相同的信息：</p><ul><li><code>lengthComputable</code></li><li><code>loaded</code></li><li><code>total</code></li></ul><p>由于种种原因无法读取文件，都会触发<code>error</code>事件，相关信息都会保存到<code>FileReader</code>的<code>error</code>属性中。<code>error.code</code>即错误码：</p><ul><li><code>1</code>：为找到文件</li><li><code>2</code>：安全性错误</li><li><code>3</code>：读取中断</li><li><code>4</code>：文件不可读</li><li><code>5</code>：编码错误</li></ul><p>文件加载成功后会触发<code>load</code>事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">var filesList = document.getElementById(&#x27;files-list&#x27;);</span><br><span class="line">EventUtil.addHandler(filesList, &#x27;change&#x27;, function (event) &#123;</span><br><span class="line">    var info = &#x27;&#x27;,</span><br><span class="line">        output = document.getElementById(&#x27;output&#x27;),</span><br><span class="line">        progress = document.getElementById(&#x27;progress&#x27;),</span><br><span class="line">        files = EventUtil.getTarget(event).files,</span><br><span class="line">        type = &#x27;default&#x27;,</span><br><span class="line">        reader = new FileReader();</span><br><span class="line"></span><br><span class="line">    if (/image/.test(files[0].type)) &#123;</span><br><span class="line">        reader.readAsDateURL(files[0]);</span><br><span class="line">        type = &#x27;image&#x27;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        reader.readAsText(files[0]);</span><br><span class="line">        type = &#x27;text&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reader.onerror = function () &#123;</span><br><span class="line">        output.innerHTML = &#x27;Could not read file, error code is &#x27; + reader.error.code;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    reader.onprogress = function () &#123;</span><br><span class="line">        if (event.lengthComputable) &#123;</span><br><span class="line">            progress.innerHTML = event.loaded + &#x27;/&#x27; + event.total;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    reader.onload = function () &#123;</span><br><span class="line">        var html = &#x27;&#x27;;</span><br><span class="line">        switch (type) &#123;</span><br><span class="line">            case &#x27;image&#x27;:</span><br><span class="line">                html = &#x27;&lt;img src=\&quot;&#x27; + reader.result + &#x27;\&quot;&gt;&#x27;;</span><br><span class="line">                break;</span><br><span class="line">            case &#x27;text&#x27;:</span><br><span class="line">                html = reader.result;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        output.innerHTML = html;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="读取拖放的文件"><a href="#读取拖放的文件" class="headerlink" title="读取拖放的文件"></a>读取拖放的文件</h4><p>从桌面上把文件拖放到浏览器中会触发<code>drop</code> 事件。而且可以在<code>event.dataTransfer. files</code>中读取到被放置的文件，当然此时它是一个<code>File</code> 对象，与通过文件输入字段取得的<code>File</code> 对象一样。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> droptarget = document.getElementById(<span class="string">&#x27;droptarget&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">handleEvent</span>(<span class="params"><span class="keyword">event</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> info = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        output = document.getElementById(<span class="string">&#x27;output&#x27;</span>);</span><br><span class="line">        files, i, len;</span><br><span class="line">    EventUtil.preventDefault(<span class="keyword">event</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">event</span>.type == <span class="string">&#x27;drop&#x27;</span>) &#123;</span><br><span class="line">        files = <span class="keyword">event</span>.dataTransfer.files;  <span class="comment">//转换成File对象</span></span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        len = files.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">            info += files[i].name + <span class="string">&#x27; (&#x27;</span> + files[i].type + <span class="string">&#x27;, &#x27;</span> + files[i].size + <span class="string">&#x27; bytes)&lt;br&gt;&#x27;</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        output.innerHTML = info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 阻止默认事件，只有 drop 事件会被处理</span></span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">&quot;dragenter&quot;</span>, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">&quot;dragover&quot;</span>, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, <span class="string">&quot;drop&quot;</span>, handleEvent);</span><br></pre></td></tr></table></figure><h4 id="使用XHR上传文件"><a href="#使用XHR上传文件" class="headerlink" title="使用XHR上传文件"></a>使用XHR上传文件</h4><p>创建一个<code>FormDate</code>对象，通过它调用<code>append()</code>方法并传入相应的<code>File</code>对象作为参数，再把<code>FormData</code>对象传递给<code>XHR</code>的<code>send()</code>方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var droptarget = document.getElementById(&#x27;droptarget&#x27;);</span><br><span class="line"></span><br><span class="line">function handleEvent(event) &#123;</span><br><span class="line">    var info = &#x27;&#x27;,</span><br><span class="line">        output = document.getElementById(&#x27;output&#x27;),</span><br><span class="line">        data, xhr,</span><br><span class="line">        files, i, len;</span><br><span class="line"></span><br><span class="line">    EventUtil.preventDefault(event);</span><br><span class="line"></span><br><span class="line">    if (event.type == &#x27;drop&#x27;) &#123;</span><br><span class="line">        data = new FormData();</span><br><span class="line">        files = event.dataTransfer.files;</span><br><span class="line">        i = 0;</span><br><span class="line">        len = files.length;</span><br><span class="line"></span><br><span class="line">        while (i &lt; len) &#123;</span><br><span class="line">            data.append(&#x27;file&#x27; + i, files[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        xhr = new XMLHttpRequest();</span><br><span class="line">        xhr.open(&#x27;post&#x27;, &#x27;FileAPIExapleUpload.php&#x27;, true);</span><br><span class="line">        xhr.onreadystatechange = function () &#123;</span><br><span class="line">            if (xhr.readyState == 4) &#123;</span><br><span class="line">                console.log(xhr.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EventUtil.addHandler(droptarget, &quot;dragenter&quot;, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, &quot;dragover&quot;, handleEvent);</span><br><span class="line">EventUtil.addHandler(droptarget, &quot;drop&quot;, handleEvent);</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/bc5a9772e006">参考</a></p><p><a href="https://blog.csdn.net/dandan666dandan/article/details/99698694">JavaScript高级程序设计-最佳实践1可维护性</a></p><p><a href="https://blog.csdn.net/dandan666dandan/article/details/99707857">JavaScript高级程序设计-最佳实践2性能&amp;部署</a></p><p><a href="https://blog.csdn.net/dandan666dandan/article/details/99709778">JavaScript高级程序设计-新兴的API</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/dandan666dandan/article/details/99623052?spm=1001.2014.3001.5502&quot;&gt;https://blog.csdn.net/dandan666dandan/ar
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>turbo</title>
    <link href="https://ms-yip.github.io/2023/09/13/turbo/"/>
    <id>https://ms-yip.github.io/2023/09/13/turbo/</id>
    <published>2023-09-13T01:31:36.000Z</published>
    <updated>2023-10-07T11:39:49.372Z</updated>
    
    <content type="html"><![CDATA[<p>支持多个任务的并行运行：<code>Turbo</code>它能够有效地安排任务类似于瀑布可以同时异步执行多个任务，而<code>lerna</code>一次只能执行一项任务 所以<code>Turbo</code>的 性能不言而喻。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a6b62020709479f800e6ee07b160a30~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p><p>Eg:</p><p>turbo daemon clean</p><p>turbo run dev –no-daemon</p><p>turbo run lint</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;支持多个任务的并行运行：&lt;code&gt;Turbo&lt;/code&gt;它能够有效地安排任务类似于瀑布可以同时异步执行多个任务，而&lt;code&gt;lerna&lt;/code&gt;一次只能执行一项任务 所以&lt;code&gt;Turbo&lt;/code&gt;的 性能不言而喻。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;ht
      
    
    </summary>
    
    
    
      <category term="turbo" scheme="https://ms-yip.github.io/tags/turbo/"/>
    
      <category term="Monorepo" scheme="https://ms-yip.github.io/tags/Monorepo/"/>
    
  </entry>
  
  <entry>
    <title>Monorepo</title>
    <link href="https://ms-yip.github.io/2023/09/08/Monorepo/"/>
    <id>https://ms-yip.github.io/2023/09/08/Monorepo/</id>
    <published>2023-09-08T02:50:22.000Z</published>
    <updated>2024-03-14T11:38:52.791Z</updated>
    
    <content type="html"><![CDATA[<p>Monorepo 是一种<strong>项目代码管理方式</strong>，指<strong>单个仓库</strong>中管理<strong>多个项目</strong>，有助于简化代码<strong>共享</strong>、版本控制、构建和部署等方面的复杂性，并提供更好的可重用性和协作性。</p><p>发展过程：</p><ul><li>Monolith（单体仓库应用程序）</li><li>MultiRepo（多仓库多模块应用）</li><li>MonoRepo（单仓库多模块应用）</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14ba61eb924c4411bc4ff102f8f3f530~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// package.json中增加如下配置</span><br><span class="line">&#123;</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;workspaces&quot;: [&quot;app1&quot;, &quot;app2&quot;]</span><br><span class="line">  // 具名Workspace,名字任意，但需跟子项目中package.json中name属性值一致</span><br><span class="line">&#125;</span><br><span class="line">// 当Workspace很多时，也可以采用全目录引用的方式</span><br><span class="line">// 假设项目代码在projects目录下</span><br><span class="line">&#123;</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;workspaces&quot;: [&quot;projects/*&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>建议使用pnpm 安装依赖，可以避免幽灵依赖。</li></ul><ol start="3"><li></li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ol><li><p>使用yarn </p><p>见github里面有详细步骤<a href="https://github.com/ms-yip/monorepo-by-yarn/"><a href="https://github.com/ms-yip/monorepo-by-yarn">monorepo-by-yarn</a></a></p></li><li><p>使用pnpm</p><p>npm install -g pnpm 安装pnpm</p><p>新建packages和 example文件夹，再新建 pnpm-workspace.yaml </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">packages:</span><br><span class="line">  # 存放组件库和其他工具库</span><br><span class="line">  - &#x27;packages/*&#x27;</span><br><span class="line">  # 存放组件测试的代码</span><br><span class="line">  - &#x27;example&#x27;</span><br></pre></td></tr></table></figure><p>在根目录中向 example 目录安装 sass</p><p>–filter 或者 -F <package_name> 可以在指定目录 package 执行任务 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm -F example add sass</span><br></pre></td></tr></table></figure><p>实践： <a href="https://github.com/ms-yip/monorepo-by-pnpm">github demo</a></p><p><a href="https://juejin.cn/post/7210310775276716092">参考教程</a></p></li><li><p>使用npm （npm version &gt; 7）</p></li><li><p>pnpm + turbo </p><p>Specify your packages in pnpm-workspace.yaml.</p><p>pnpm-workspace.yaml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">packages:</span><br><span class="line">  - &quot;packages/*&quot;</span><br><span class="line">  - &quot;apps/*&quot;</span><br></pre></td></tr></table></figure></li></ol><ol><li>pnpm install turbo –save-dev </li><li>pnpm turbo build lint (可以运行多个)</li><li>pnpm turbo dev</li></ol><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="pnpm搭建monorepo项目"><a href="#pnpm搭建monorepo项目" class="headerlink" title="pnpm搭建monorepo项目"></a>pnpm搭建monorepo项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line">import &#123; resolve &#125; from &#x27;path&#x27;</span><br><span class="line">import VueSetupExtend from &#x27;vite-plugin-vue-setup-extend&#x27;</span><br><span class="line"></span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue(),VueSetupExtend()],</span><br><span class="line">  base: &#x27;./&#x27;,</span><br><span class="line">  build: &#123;</span><br><span class="line">    target: &#x27;modules&#x27;,</span><br><span class="line">    //打包文件目录</span><br><span class="line">    outDir: &#x27;es&#x27;,</span><br><span class="line">    //压缩</span><br><span class="line">    minify: true,</span><br><span class="line">    //css分离</span><br><span class="line">    //cssCodeSplit: true,</span><br><span class="line">    rollupOptions: &#123;</span><br><span class="line">      //忽略打包vue、element-plus @element-plus/icons-vue是element-plus图标相关的依赖 ,排除掉 scss是因为我们要在组件中引入element-plus的样式，但是这个样式也要从外部项目的element-plus依赖中获取</span><br><span class="line">    external: [&#x27;vue&#x27;, &#x27;element-plus&#x27;, &#x27;@element-plus/icons-vue&#x27;, /\.scss/],</span><br><span class="line">      input: [&#x27;index.js&#x27;],</span><br><span class="line">      output: [</span><br><span class="line">        &#123;</span><br><span class="line">          format: &#x27;es&#x27;,</span><br><span class="line">          //不用打包成.es.js,这里我们想把它打包成.js</span><br><span class="line">          entryFileNames: &#x27;[name].js&#x27;,</span><br><span class="line">          //让打包目录和我们目录对应</span><br><span class="line">          preserveModules: true,</span><br><span class="line">          exports: &#x27;named&#x27;,</span><br><span class="line">          //配置打包根目录</span><br><span class="line">          dir: resolve(__dirname, &#x27;./ui/es&#x27;),</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          format: &#x27;cjs&#x27;,</span><br><span class="line">          entryFileNames: &#x27;[name].js&#x27;,</span><br><span class="line">          //让打包目录和我们目录对应</span><br><span class="line">          preserveModules: true,</span><br><span class="line">          exports: &#x27;named&#x27;,</span><br><span class="line">          //配置打包根目录</span><br><span class="line">          dir: resolve(__dirname, &#x27;./ui/lib&#x27;),</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    lib: &#123;</span><br><span class="line">      entry: &#x27;./index.js&#x27;,</span><br><span class="line">      name: &#x27;shuge&#x27;,</span><br><span class="line">      formats: [&#x27;es&#x27;, &#x27;cjs&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;@vmkt/shuge-ui&quot;,</span><br><span class="line">  // 代表我们这个组件库需要对外发布</span><br><span class="line">  &quot;private&quot;: false,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class="line">  // 使用 require(&#x27;xxx&#x27;) 方式引入时</span><br><span class="line">  &quot;main&quot;: &quot;./ui/lib/index.js&quot;,</span><br><span class="line">  // 使用 import x from &#x27;xxx&#x27; 方式引入组件时</span><br><span class="line">  &quot;module&quot;: &quot;./ui/es/index.js&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;module&quot;,</span><br><span class="line">  // 配置打包上传文件到npm的文件夹内容</span><br><span class="line">  &quot;files&quot;: [</span><br><span class="line">    &quot;ui&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;vite&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;vite build&quot;,</span><br><span class="line">    &quot;preview&quot;: &quot;vite preview&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;element-plus&quot;: &quot;^2.3.0&quot;,</span><br><span class="line">    &quot;vue&quot;: &quot;^3.2.47&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@vitejs/plugin-vue&quot;: &quot;^4.1.0&quot;,</span><br><span class="line">    &quot;sass&quot;: &quot;^1.59.3&quot;,</span><br><span class="line">    &quot;vite&quot;: &quot;^4.2.0&quot;,</span><br><span class="line">    &quot;vite-plugin-vue-setup-extend&quot;: &quot;^0.4.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要引入组件，还需要引入基础样式和组件样式，这个需要的<code>element-plus</code>组件变多的话，非常麻烦。</p><p>我们需要使用<code>unplugin-element-plus</code>帮助我们自动引入样式</p><p>安装<code>unplugin-element-plus</code> 到组件库的包下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">复制代码pnpm add unplugin-element-plus -D --filter components</span><br></pre></td></tr></table></figure><p>在<code>vite</code>配置文件里添加下面配置</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typescript</span><br><span class="line">复制代码<span class="comment">// /packages/components/vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-element-plus/vite&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="title class_">ElementPlus</span>(&#123;</span><br><span class="line">        <span class="comment">// 导入scss而不是css</span></span><br><span class="line">        <span class="attr">useSource</span>: <span class="literal">true</span></span><br><span class="line">      &#125;),</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>配置好后，编写组件时只用向下面这样就行</p><p>参考：</p><p><a href="https://juejin.cn/post/7212538330829996092">5分钟学会 pnpm monorepo+vue3+vite 搭建组件库</a></p><p><a href="https://developer.aliyun.com/article/1067018">Monorepo，大型前端项目管理模式实践</a></p><p><a href="https://juejin.cn/post/7215886869199896637">带你了解更全面的 Monorepo - 优劣、踩坑、选型</a></p><p><a href="https://blog.csdn.net/xgangzai/article/details/131733574?ydreferer=aHR0cHM6Ly93d3cuYmluZy5jb20v">了解并实践monorepo和pnpm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Monorepo 是一种&lt;strong&gt;项目代码管理方式&lt;/strong&gt;，指&lt;strong&gt;单个仓库&lt;/strong&gt;中管理&lt;strong&gt;多个项目&lt;/strong&gt;，有助于简化代码&lt;strong&gt;共享&lt;/strong&gt;、版本控制、构建和部署等方面的复杂性，并提供更好的可
      
    
    </summary>
    
    
      <category term="monorepo" scheme="https://ms-yip.github.io/categories/monorepo/"/>
    
    
      <category term="代码管理方式" scheme="https://ms-yip.github.io/tags/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/"/>
    
      <category term="monorepo" scheme="https://ms-yip.github.io/tags/monorepo/"/>
    
  </entry>
  
  <entry>
    <title>workspace 应用</title>
    <link href="https://ms-yip.github.io/2023/09/08/workspace-%E5%BA%94%E7%94%A8/"/>
    <id>https://ms-yip.github.io/2023/09/08/workspace-%E5%BA%94%E7%94%A8/</id>
    <published>2023-09-08T02:22:29.000Z</published>
    <updated>2024-03-14T12:27:52.812Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>form /page 设计器</title>
    <link href="https://ms-yip.github.io/2023/09/01/form-page-%E8%AE%BE%E8%AE%A1%E5%99%A8/"/>
    <id>https://ms-yip.github.io/2023/09/01/form-page-%E8%AE%BE%E8%AE%A1%E5%99%A8/</id>
    <published>2023-09-01T03:02:37.000Z</published>
    <updated>2024-03-14T12:27:52.813Z</updated>
    
    <content type="html"><![CDATA[<ol><li>vite 新建项目</li><li>components.d.ts 声明： ant-design-vue 使用的组件</li></ol><p>要点：</p><p>样式添加动画 transition </p><p>生成sfc 组件代码 参考 E:\variant-form\src\utils\sfc-generator.js</p><p>E:\variant-form\src\utils\vue3js-generator.js</p><ol><li>asyncLoader loading 组件要点：animation效果 @keyframes animationShape1 位置变换动画 百分比 transform: translate</li></ol><p>builder:</p><p>数据说明：</p><p>usePageManager: 实例和方法 调用</p><p>pageSchema：{</p><p>​    schemas：[], // 节点业务架构</p><p>​    script:”” // 自定义逻辑</p><p>}</p><p>node.vue</p><table><thead><tr><th>props:</th><th></th><th>componentInstance</th></tr></thead><tbody><tr><td>record: NodeItem,</td><td></td><td>formItemRef</td></tr><tr><td>modelValue?: any,</td><td></td><td>componentInstance</td></tr><tr><td>ruleField?: string[],</td><td></td><td>componentProps</td></tr><tr><td>resetFormData?: Boolean,</td><td></td><td>dataSource</td></tr><tr><td>name?: string</td><td></td><td>show</td></tr><tr><td></td><td></td><td>getFormItemProps</td></tr><tr><td></td><td></td><td>getComponentConfing</td></tr><tr><td>inject</td><td></td><td></td></tr><tr><td>let formData = inject(‘formData’, {}) as FormDataModel</td><td></td><td></td></tr><tr><td>const slots = inject(‘slots’, {}) as Slots</td><td></td><td></td></tr><tr><td>const pageManager = inject(‘pageManager’, {}) as PageManager</td><td></td><td></td></tr><tr><td>const disabled = inject<Boolean>(‘disabled’, false)</td><td></td><td></td></tr><tr><td>const ruleFieldPrefix = inject&lt;any[] | null&gt;(‘ruleFieldPrefix’, null)</td><td></td><td></td></tr><tr><td>const resetFormDataInject = inject<Boolean>(‘resetFormData’, false)</td><td></td><td>attrs</td></tr></tbody></table><p>designer -&gt; header: inject designer.setCheckedNode()  deepCompareAndModify</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;vite 新建项目&lt;/li&gt;
&lt;li&gt;components.d.ts 声明： ant-design-vue 使用的组件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要点：&lt;/p&gt;
&lt;p&gt;样式添加动画 transition &lt;/p&gt;
&lt;p&gt;生成sfc 组件代码 参考 E:&#92;var
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS基础</title>
    <link href="https://ms-yip.github.io/2023/08/17/JS%E5%9F%BA%E7%A1%80/"/>
    <id>https://ms-yip.github.io/2023/08/17/JS%E5%9F%BA%E7%A1%80/</id>
    <published>2023-08-17T05:46:24.000Z</published>
    <updated>2024-03-14T12:27:52.812Z</updated>
    
    <content type="html"><![CDATA[<p>数据类型</p><table><thead><tr><th>基数数据类型（简单数据类型）</th><th></th></tr></thead><tbody><tr><td>undefined</td><td></td></tr><tr><td>null</td><td>空对象指针</td></tr><tr><td>string</td><td></td></tr><tr><td>boolean</td><td></td></tr><tr><td>number</td><td>数值类型 包含整数、浮点数</td></tr><tr><td>symbol</td><td>唯一标识符</td></tr><tr><td>bigint</td><td>只需在整数的末尾追加n<br />BigInt(“9007199254740995”)</td></tr><tr><td>引用数据类型 复杂数据类型</td><td></td></tr><tr><td>Object</td><td></td></tr></tbody></table><p>Array</p><p>Function</p><p>RegExp</p><p>Date</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据类型&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基数数据类型（简单数据类型）&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nu
      
    
    </summary>
    
    
    
      <category term="红宝书" scheme="https://ms-yip.github.io/tags/%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>nodejs解压缩文件</title>
    <link href="https://ms-yip.github.io/2023/08/11/nodejs%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/"/>
    <id>https://ms-yip.github.io/2023/08/11/nodejs%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/</id>
    <published>2023-08-11T01:08:36.000Z</published>
    <updated>2024-03-14T12:30:58.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-解压缩文件处理"><a href="#node-解压缩文件处理" class="headerlink" title="node 解压缩文件处理"></a>node 解压缩文件处理</h1><h3 id="使用-adm-zip"><a href="#使用-adm-zip" class="headerlink" title="使用 adm-zip"></a>使用 adm-zip</h3><pre><code>&gt;constructor(filePath)&gt;getEntries(): Array&gt;getEntry(name): ZipObject&gt;readFile(entry): Buffer&gt;readFileAsync(entry, callback)&gt;readAsText(entry, encoding = &apos;utf8&apos;)&gt;readAsTextAsync(entry, callback, encoding = &apos;utf8&apos;)&gt;deleteFile(entry)&gt;addZipComment(comment)&gt;getZipComment(): String&gt;addZipEntryComment(entry, comment)&gt;getZipEntryComment(entry): String&gt;updateFile(entry, content)&gt;addLocalFile(localPath, zipPath)&gt;addLocalFolder(localPath, zipPath)&gt;addFile(entryName, content, comment, attr)&gt;extractEntryTo(entry, targetPath, maintainEntryPath, &gt;overwrite = false, outFileName)&gt;extractAllTo(targetPath, overwrite = false)&gt;writeZip(targetFileName)&gt;toBuffer(onSuccess, onFail, onItemStart, onItemEnd): &gt;Buffer</code></pre><ol><li><p>构造函数 AdmZip(zipFile[, options])<br> zipFile：要操作的 Zip 文件的路径。<br> options：可选参数对象。<br> zlib：用于压缩和解压缩的 zlib 实例。<br> forceLocalTime：强制使用本地时间（默认为 false）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zip = <span class="keyword">new</span> <span class="title class_">AdmZip</span>(<span class="string">&quot;dist.zip&quot;</span>); <span class="comment">// 创建一个Zip对象，并且加载数据</span></span><br><span class="line">  <span class="keyword">const</span> zip = <span class="keyword">new</span> <span class="title class_">AdmZip</span>(); <span class="comment">// 创建一个空的 Zip 对象</span></span><br></pre></td></tr></table></figure></li><li><p>addLocalFile(localPath[, zipPath])：向 Zip 文件中添加一个本地文件。<br> localPath：要添加的本地文件的路径。<br> zipPath（可选）：在 Zip 文件中的路径和文件名。不传则在目标目录根目录中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip.<span class="title function_">addLocalFile</span>(<span class="string">&#x27;scripts/download.js&#x27;</span>, <span class="string">&#x27;dist/js&#x27;</span>) </span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>addFile(entryName, content[, comment])：向 Zip 文件中添加一个新文件。<br> entryName：要添加的文件的名称和路径。<br> content：文件的内容。<br> comment（可选）：文件的注释。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip.<span class="title function_">addFile</span>(<span class="string">&quot;dist/js/file.txt&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;, <span class="literal">null</span>, <span class="number">2</span>), <span class="string">&quot;This is a file&quot;</span>);</span><br><span class="line">zip.<span class="title function_">addFile</span>(<span class="string">&quot;file.txt&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;, <span class="literal">null</span>, <span class="number">2</span>), <span class="string">&quot;This is a file&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>addLocalFolder(folder, zipFolder[, filter])：向 Zip 文件中添加一个本地文件夹及其内容。<br> folder：要添加的本地文件夹的路径。<br> zipFolder：在 Zip 文件中的路径和文件夹名。<br> filter（可选）：一个函数，用于过滤要添加的文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip.<span class="title function_">addLocalFolder</span>(<span class="string">&#x27;scripts&#x27;</span>,<span class="string">&#x27;dist/new/scripts&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>extractAllTo(targetPath[, overwrite])：将 Zip 文件中的所有内容解压到指定的目标路径。<br> targetPath：解压的目标路径。<br> overwrite（可选）：指示是否覆盖现有文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip.<span class="title function_">extractAllTo</span>(<span class="string">&quot;dist-unzip&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p>extractEntryTo(entry, targetPath[, maintainEntryPath, overwrite])：将指定的条目解压到目标路径。<br> entry：条目对象。<br> targetPath：解压的目标路径。<br> maintainEntryPath（可选）：是否保留条目的原始路径结构。<br> overwrite（可选）：指示是否覆盖现有文件。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip.<span class="title function_">extractEntryTo</span>(<span class="string">&quot;dist/index.html&quot;</span>, <span class="string">&quot;dist-unzip/js&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>getEntries()：获取 Zip 文件中的所有条目（文件和文件夹）的列表。</p></li><li><p>getEntry(entryName)：获取指定名称的条目（文件或文件夹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip.<span class="title function_">getEntry</span>(<span class="string">&#x27;dist/&#x27;</span>)</span><br><span class="line">zip.<span class="title function_">getEntry</span>(<span class="string">&#x27;dist/index.html&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>updateFile(entry, content)：更新 Zip 文件中的指定条目的内容。<br> entry：条目对象。<br> content：新的内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip.<span class="title function_">updateFile</span>(<span class="string">&#x27;dist/index.html&#x27;</span>, <span class="string">&#x27;new content&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>deleteFile(entry)：从 Zip 文件中删除指定的条目。<br>entry：条目对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip.<span class="title function_">deleteFile</span>(<span class="string">&#x27;dist/index.html&#x27;</span>)</span><br><span class="line">zip.<span class="title function_">deleteFile</span>(<span class="string">&#x27;dist/&#x27;</span>) <span class="comment">// 文件加需要加/</span></span><br></pre></td></tr></table></figure></li></ol><p>练习:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AdmZip</span> = <span class="built_in">require</span>(<span class="string">&quot;adm-zip&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取本地dist.zip文件</span></span><br><span class="line"><span class="keyword">const</span> zip = <span class="keyword">new</span> <span class="title class_">AdmZip</span>(<span class="string">&quot;dist.zip&quot;</span>);</span><br><span class="line"><span class="comment">// console.log(zip.getEntries().forEach(i =&gt; &#123; </span></span><br><span class="line"><span class="comment">//   console.log(i.entryName);</span></span><br><span class="line"><span class="comment">// &#125;));</span></span><br><span class="line"><span class="comment">// console.log(zip.getEntry(&#x27;dist/index.html&#x27;));</span></span><br><span class="line"><span class="comment">// zip.addLocalFile(&#x27;scripts/download.js&#x27;, &#x27;dist/js&#x27;) // 直接加固定文件</span></span><br><span class="line"><span class="comment">// zip.addFile(&quot;dist/js/file.txt&quot;, JSON.stringify(&#123; a: 1, b: 2 &#125;, null, 2), &quot;This is a file&quot;); // 加灵活的内容</span></span><br><span class="line"><span class="comment">// zip.addFile(&quot;file.txt&quot;, JSON.stringify(&#123; a: 1, b: 2 &#125;, null, 2), &quot;This is a file&quot;); // 加灵活的内容</span></span><br><span class="line"><span class="comment">// zip.addLocalFolder(&#x27;scripts&#x27;,&#x27;dist/new/scripts&#x27;)</span></span><br><span class="line"><span class="comment">// zip.updateFile(&#x27;dist/index.html&#x27;, &#x27;new content&#x27;)</span></span><br><span class="line"><span class="comment">// zip.extractEntryTo(&quot;dist/index.html&quot;, &quot;dist-unzip/js&quot;, false, true);</span></span><br><span class="line">zip.<span class="title function_">deleteFile</span>(<span class="string">&#x27;dist/&#x27;</span>)</span><br><span class="line"><span class="comment">// 解压zip文件</span></span><br><span class="line">zip.<span class="title function_">extractAllTo</span>(<span class="string">&quot;dist-unzip&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个JSON文件</span></span><br><span class="line"><span class="comment">// const jsonContent = JSON.stringify(&#123; name: &quot;John&quot;, age: 30 &#125;);</span></span><br><span class="line"><span class="comment">// const jsonFilePath = &quot;newFile.json&quot;;</span></span><br><span class="line"><span class="comment">// fs.writeFileSync(jsonFilePath, jsonContent);</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;JSON文件已添加到解压后的文件夹中。&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;node-解压缩文件处理&quot;&gt;&lt;a href=&quot;#node-解压缩文件处理&quot; class=&quot;headerlink&quot; title=&quot;node 解压缩文件处理&quot;&gt;&lt;/a&gt;node 解压缩文件处理&lt;/h1&gt;&lt;h3 id=&quot;使用-adm-zip&quot;&gt;&lt;a href=&quot;#使用-
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https://ms-yip.github.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="https://ms-yip.github.io/tags/nodejs/"/>
    
      <category term="解压缩" scheme="https://ms-yip.github.io/tags/%E8%A7%A3%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
</feed>
