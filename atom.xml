<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>珊珊的小本子</title>
  <icon>https://www.gravatar.com/avatar/b5c247f59c4ff39dce2796b57d2cf6f1</icon>
  <subtitle>一个记满小鱼干的小本本</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ms-yip.github.io/"/>
  <updated>2023-02-01T14:41:27.857Z</updated>
  <id>https://ms-yip.github.io/</id>
  
  <author>
    <name>ms.y</name>
    <email>yeminshan@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用链接备份</title>
    <link href="https://ms-yip.github.io/2023/02/01/%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5%E5%A4%87%E4%BB%BD/"/>
    <id>https://ms-yip.github.io/2023/02/01/%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5%E5%A4%87%E4%BB%BD/</id>
    <published>2023-02-01T13:08:21.000Z</published>
    <updated>2023-02-01T14:41:27.857Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ms-yip.github.io/vuepress-doc-tpl/">vuepress 文档demo预览地址</a><br><a href="https://www.npmjs.com/package/vuepress-menu">vuepress demo项目自动生成nav导航菜单和sidebar侧边栏快捷定位菜单 npm包</a><br><a href="https://www.npmjs.com/package/vpsdoc-cli">快速生成vuepress 文档项目脚手架 npm包</a><br><a href="https://github.com/ms-yip/swg-doc-mocker">swg-doc-mocker-用于自动拉取swagger文档数据转换成nodemock数据接口</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://ms-yip.github.io/vuepress-doc-tpl/&quot;&gt;vuepress 文档demo预览地址&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.npmjs.com/package/vuepress-menu&quot;&gt;vue
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端安全</title>
    <link href="https://ms-yip.github.io/2023/01/29/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-1/"/>
    <id>https://ms-yip.github.io/2023/01/29/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-1/</id>
    <published>2023-01-29T07:05:46.000Z</published>
    <updated>2023-01-29T07:05:46.216Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>javascript</title>
    <link href="https://ms-yip.github.io/2022/12/29/javascript/"/>
    <id>https://ms-yip.github.io/2022/12/29/javascript/</id>
    <published>2022-12-29T09:09:04.000Z</published>
    <updated>2022-12-29T11:31:40.858Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>闭包</p><p>闭包就是能够读取其他函数内部变量的函数</p><p>子函数在外被调用，子函数所在的父函数的作用域不会被释放</p></li></ol><p>   一个函数可以访问其相同作用域的外部变量</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = 1</span><br><span class="line">function m1 () &#123;</span><br><span class="line">console.log(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时</p><p><img src="/images/javascript/image-20221229173157295.png" alt="image-20221229173157295"></p><p>例子<img src="/images/javascript/image-20221229191050666.png" alt="image-20221229191050666"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var name = &quot;The Window&quot;;</span><br><span class="line"></span><br><span class="line">　　var object = &#123;</span><br><span class="line">　　　　name : &quot;My Object&quot;,</span><br><span class="line"></span><br><span class="line">　　　　getNameFunc : function()&#123;</span><br><span class="line">　　　　　　return function()&#123;</span><br><span class="line">　　　　　　　　return this.name;</span><br><span class="line">　　　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br><span class="line"></span><br><span class="line">　　alert(object.getNameFunc()());</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">　　var name = &quot;The Window&quot;;</span><br><span class="line"></span><br><span class="line">　　var object = &#123;</span><br><span class="line">　　　　name : &quot;My Object&quot;,</span><br><span class="line"></span><br><span class="line">　　　　getNameFunc : function()&#123;</span><br><span class="line">　　　　　　var that = this;</span><br><span class="line">　　　　　　return function()&#123;</span><br><span class="line">　　　　　　　　return that.name;</span><br><span class="line">　　　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br><span class="line"></span><br><span class="line">　　alert(object.getNameFunc()());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;闭包&lt;/p&gt;
&lt;p&gt;闭包就是能够读取其他函数内部变量的函数&lt;/p&gt;
&lt;p&gt;子函数在外被调用，子函数所在的父函数的作用域不会被释放&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;   一个函数可以访问其相同作用域的外部变量&lt;/p&gt;
   &lt;figure class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue源码系列</title>
    <link href="https://ms-yip.github.io/2022/12/27/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/"/>
    <id>https://ms-yip.github.io/2022/12/27/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/</id>
    <published>2022-12-27T05:18:14.000Z</published>
    <updated>2023-01-08T11:31:58.329Z</updated>
    
    <content type="html"><![CDATA[<p>基础：</p><ol><li>vue插件开发</li><li></li></ol><p>vue全家桶插件学习</p><p>vue-router</p><ol><li><p>全局注册router-link </p><p>原理：</p><p>实现点击页面变换url 实现页面内容切换标识</p><p>接收to参数，实现a标签href动态变换</p><p>组件接收默认插槽自定义显示</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&quot;router-link&quot;, &#123;</span><br><span class="line">   // template: &#x27;&lt;a&gt;router-link&lt;/a&gt;&#x27;</span><br><span class="line">   props: &#123;</span><br><span class="line">     to: &#123;</span><br><span class="line">       type: String,</span><br><span class="line">       required: true,</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;,</span><br><span class="line">   render(h) &#123;</span><br><span class="line">     // h就是createElement()</span><br><span class="line">     // 作用：返回一个虚拟dom</span><br><span class="line">     // &lt;router-link to=&quot;/about&quot;&gt;abc&lt;/router-link&gt;</span><br><span class="line">     // return &lt;a href=&#123;&quot;#&quot; + this.to&#125;&gt;&#123;this.$slots.default&#125;&lt;/a&gt;;</span><br><span class="line">     // 获取插槽内容：this.$slots.default</span><br><span class="line">     return h(</span><br><span class="line">       &quot;a&quot;,</span><br><span class="line">       &#123;</span><br><span class="line">         attrs: &#123;</span><br><span class="line">           href: &quot;#&quot; + this.to,</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">       this.$slots.default</span><br><span class="line">     );</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>全局注册router-view </p><p>原理：</p><p>监听获取当前的url的变化</p><p>按照路由规则表映射关系，对应渲染相应的组件</p><p>此时：需要两个全局能访问的变量来驱动组件的渲染，分别是路由映射表，当前路由url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&quot;router-view&quot;, &#123;</span><br><span class="line">    render(h) &#123;</span><br><span class="line">      let component = null;</span><br><span class="line">      // 1.获取当前url的hash部分</span><br><span class="line">      // 2.根据hash部分从路由表中获取对应的组件</span><br><span class="line">      const route = this.$router.$options.routes.find(</span><br><span class="line">        (route) =&gt; route.path === this.$router.current</span><br><span class="line">      );</span><br><span class="line">      console.log(this.$router.current, this.$router.$options);</span><br><span class="line">      if (route) &#123;</span><br><span class="line">        component = route.component;</span><br><span class="line">      &#125;</span><br><span class="line">      return h(component);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>暴露VueRouter 类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class VueRouter &#123;</span><br><span class="line">  constructor(options) &#123;</span><br><span class="line">    // 1.保存路由选项</span><br><span class="line">    this.$options = options;</span><br><span class="line"></span><br><span class="line">    // current一个初始值</span><br><span class="line">    // 如何是current成为一个响应式数据</span><br><span class="line">    // 此方法可以给一个对象指定一个响应式属性</span><br><span class="line">    Vue.util.defineReactive(</span><br><span class="line">      this,</span><br><span class="line">      &quot;current&quot;,</span><br><span class="line">      window.location.hash.slice(1) || &quot;/&quot;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">      // 2.监控hash变化</span><br><span class="line">      window.addEventListener(&quot;hashchange&quot;, () =&gt; &#123;</span><br><span class="line">        // hash: #/about</span><br><span class="line">        this.current = window.location.hash.slice(1);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>vue实例化时，将路由表赋值到全局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 1.注册$router,让所有组件实例都可以访问它</span><br><span class="line">// 混入：Vue.mixin(&#123;&#125;)</span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    // 延迟执行：延迟到router实例和vue实例都创建完毕</span><br><span class="line">    if (this.$options.router) &#123;</span><br><span class="line">      // 如果存在说明是根实例</span><br><span class="line">      Vue.prototype.$router = this.$options.router;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>vuex</p><p>原理：</p><ol><li>暴露install 方法和store 类</li><li>$store 全局挂载实例对象</li><li>保证store 数据既能响应式 但单一渠道进行修改（仅commit进行修改， action 调用commit）</li><li>以$$ 或者_ 开头的变量 只响应 不代理 ？？？？</li><li>store 类实现dispatch commit 方法， 并且绑定上下文</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">// 我们自己的vuex实现</span><br><span class="line">let Vue;</span><br><span class="line"></span><br><span class="line">class Store &#123;</span><br><span class="line">  constructor(options) &#123;</span><br><span class="line">    // 1.保存选项</span><br><span class="line">    this._mutations = options.mutations;</span><br><span class="line">    this._actions = options.actions;</span><br><span class="line"></span><br><span class="line">    // 2.暴露state属性, 并对传入state选项做响应式处理</span><br><span class="line">    // Vue.util.defineReactive(this, &quot;state&quot;, this.$options.state);</span><br><span class="line">    // _vm希望用户明白，不要访问它</span><br><span class="line">    this._vm = new Vue(&#123;</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          // 加上$$避免Vue对该属性做代理</span><br><span class="line">          // this._vm.counter这样是不行的</span><br><span class="line">          $$state: options.state</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 绑定上下文，确保是store实例</span><br><span class="line">    // 由于 在定义actions 或者 mutations 时 有各种异步操作，导致this早就丢失了</span><br><span class="line">    this.commit = this.commit.bind(this)</span><br><span class="line">    this.dispatch = this.dispatch.bind(this)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get state() &#123;</span><br><span class="line">    return this._vm._data.$$state</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set state(v) &#123;</span><br><span class="line">    console.error(&#x27;please use replaceState to reset state&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // $store.commit(type, payload)</span><br><span class="line">  commit(type, payload) &#123;</span><br><span class="line">    const entry = this._mutations[type]</span><br><span class="line">    if (!entry) &#123;</span><br><span class="line">      console.error(&#x27;unknown mutation!&#x27;);</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    entry(this.state, payload)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dispatch(type, payload) &#123;</span><br><span class="line">    const entry = this._actions[type]</span><br><span class="line">    if (!entry) &#123;</span><br><span class="line">      console.error(&#x27;unknown action!&#x27;);</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    entry(this, payload)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function install(_Vue) &#123;</span><br><span class="line">  Vue = _Vue;</span><br><span class="line"></span><br><span class="line">  // 注册$store</span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    beforeCreate() &#123;</span><br><span class="line">      if (this.$options.store) &#123;</span><br><span class="line">        Vue.prototype.$store = this.$options.store;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 导出对象就是Vuex</span><br><span class="line">export default &#123; Store, install &#125;;</span><br></pre></td></tr></table></figure><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230094907676.png" alt="image-20221230094907676"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230095642148.png" alt="image-20221230095642148"></p><p>Dom 原生方法</p><p>正则 分组</p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230131238303.png" alt="image-20221230131238303"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230151610093.png" alt="image-20221230151610093"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230151741571.png" alt="image-20221230151741571"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230152022268.png" alt="image-20221230152022268"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230152301477.png" alt="image-20221230152301477"></p><p>Npm run dev (多了map文件)</p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230152701269.png" alt="image-20221230152701269"></p><p>加 common nodejs的打包输出  cjs 格式 服务端使用 </p><p>ssr  服务端渲染</p><p>esm 格式</p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230154629027.png" alt="image-20221230154629027"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230155450667.png" alt="image-20221230155450667"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230155807412.png" alt="image-20221230155807412"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230161928808.png" alt="image-20221230161928808"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230163519322.png" alt="image-20221230163519322"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230201446118.png" alt="image-20221230201446118"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221231124136125.png" alt="image-20221231124136125"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221231124152279.png" alt="image-20221231124152279"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221231135430738.png" alt="image-20221231135430738"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230102130400975.png" alt="image-20230102130400975"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230107135935361.png" alt="image-20230107135935361"></p><p>end。返回上一层上下文</p><p>chain webpack 链式调用 </p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230107140859949.png" alt="image-20230107140859949"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230107140925873.png" alt="image-20230107140925873"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230107150141051.png" alt="image-20230107150141051"></p><p>.env 通用配置</p><p>里面配置变量</p><p>可以在process.env 里面获取</p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230107151809915.png" alt="image-20230107151809915"></p><p>覆盖env 名字不是默认值的情况</p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230107152339375.png" alt="image-20230107152339375"></p><p>permission.js request.js</p><p>mock</p><p> easy-mock 能结合swagger</p><p>线上使用 安装docker</p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230107154622851.png" alt="image-20230107154622851"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108130247930.png" alt="image-20230108130247930"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108130605881.png" alt="image-20230108130605881"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108130623921.png" alt="image-20230108130623921"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108131930390.png" alt="image-20230108131930390"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108132024798.png" alt="image-20230108132024798"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108132234096.png" alt="image-20230108132234096"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108132835416.png" alt="image-20230108132835416"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108133218998.png" alt="image-20230108133218998"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108192518565.png" alt="image-20230108192518565"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108193139215.png" alt="image-20230108193139215"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108193153758.png" alt="image-20230108193153758"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基础：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;vue插件开发&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;vue全家桶插件学习&lt;/p&gt;
&lt;p&gt;vue-router&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;全局注册router-link &lt;/p&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;p&gt;实现点击页面变换
      
    
    </summary>
    
    
    
      <category term="vue" scheme="https://ms-yip.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>tsconfig.json</title>
    <link href="https://ms-yip.github.io/2022/10/27/tsconfig-json/"/>
    <id>https://ms-yip.github.io/2022/10/27/tsconfig-json/</id>
    <published>2022-10-27T12:29:51.000Z</published>
    <updated>2022-12-29T10:47:13.661Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* Visit https://aka.ms/tsconfig.json to read more about this file */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Projects */</span></span><br><span class="line">    <span class="comment">// &quot;incremental&quot;: true,                              /* Enable incremental compilation */</span></span><br><span class="line">    <span class="comment">// &quot;composite&quot;: true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */</span></span><br><span class="line">    <span class="comment">// &quot;tsBuildInfoFile&quot;: &quot;./&quot;,                          /* Specify the folder for .tsbuildinfo incremental compilation files. */</span></span><br><span class="line">    <span class="comment">// &quot;disableSourceOfProjectReferenceRedirect&quot;: true,  /* Disable preferring source files instead of declaration files when referencing composite projects */</span></span><br><span class="line">    <span class="comment">// &quot;disableSolutionSearching&quot;: true,                 /* Opt a project out of multi-project reference checking when editing. */</span></span><br><span class="line">    <span class="comment">// &quot;disableReferencedProjectLoad&quot;: true,             /* Reduce the number of projects loaded automatically by TypeScript. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Language and Environment */</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es2016&quot;</span><span class="punctuation">,</span>                                  <span class="comment">/* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */</span></span><br><span class="line">    <span class="comment">// &quot;lib&quot;: [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */</span></span><br><span class="line">    <span class="comment">// &quot;jsx&quot;: &quot;preserve&quot;,                                /* Specify what JSX code is generated. */</span></span><br><span class="line">    <span class="comment">// &quot;experimentalDecorators&quot;: true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */</span></span><br><span class="line">    <span class="comment">// &quot;emitDecoratorMetadata&quot;: true,                    /* Emit design-type metadata for decorated declarations in source files. */</span></span><br><span class="line">    <span class="comment">// &quot;jsxFactory&quot;: &quot;&quot;,                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. &#x27;React.createElement&#x27; or &#x27;h&#x27; */</span></span><br><span class="line">    <span class="comment">// &quot;jsxFragmentFactory&quot;: &quot;&quot;,                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. &#x27;React.Fragment&#x27; or &#x27;Fragment&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;jsxImportSource&quot;: &quot;&quot;,                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */</span></span><br><span class="line">    <span class="comment">// &quot;reactNamespace&quot;: &quot;&quot;,                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */</span></span><br><span class="line">    <span class="comment">// &quot;noLib&quot;: true,                                    /* Disable including any library files, including the default lib.d.ts. */</span></span><br><span class="line">    <span class="comment">// &quot;useDefineForClassFields&quot;: true,                  /* Emit ECMAScript-standard-compliant class fields. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Modules */</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>                                <span class="comment">/* Specify what module code is generated. */</span></span><br><span class="line">    <span class="comment">// &quot;rootDir&quot;: &quot;./&quot;,                                  /* Specify the root folder within your source files. */</span></span><br><span class="line">    <span class="comment">// &quot;moduleResolution&quot;: &quot;node&quot;,                       /* Specify how TypeScript looks up a file from a given module specifier. */</span></span><br><span class="line">    <span class="comment">// &quot;baseUrl&quot;: &quot;./&quot;,                                  /* Specify the base directory to resolve non-relative module names. */</span></span><br><span class="line">    <span class="comment">// &quot;paths&quot;: &#123;&#125;,                                      /* Specify a set of entries that re-map imports to additional lookup locations. */</span></span><br><span class="line">    <span class="comment">// &quot;rootDirs&quot;: [],                                   /* Allow multiple folders to be treated as one when resolving modules. */</span></span><br><span class="line">    <span class="comment">// &quot;typeRoots&quot;: [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */</span></span><br><span class="line">    <span class="comment">// &quot;types&quot;: [],                                      /* Specify type package names to be included without being referenced in a source file. */</span></span><br><span class="line">    <span class="comment">// &quot;allowUmdGlobalAccess&quot;: true,                     /* Allow accessing UMD globals from modules. */</span></span><br><span class="line">    <span class="comment">// &quot;resolveJsonModule&quot;: true,                        /* Enable importing .json files */</span></span><br><span class="line">    <span class="comment">// &quot;noResolve&quot;: true,                                /* Disallow `import`s, `require`s or `&lt;reference&gt;`s from expanding the number of files TypeScript should add to a project. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JavaScript Support */</span></span><br><span class="line">    <span class="comment">// &quot;allowJs&quot;: true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */</span></span><br><span class="line">    <span class="comment">// &quot;checkJs&quot;: true,                                  /* Enable error reporting in type-checked JavaScript files. */</span></span><br><span class="line">    <span class="comment">// &quot;maxNodeModuleJsDepth&quot;: 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Emit */</span></span><br><span class="line">    <span class="comment">// &quot;declaration&quot;: true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */</span></span><br><span class="line">    <span class="comment">// &quot;declarationMap&quot;: true,                           /* Create sourcemaps for d.ts files. */</span></span><br><span class="line">    <span class="comment">// &quot;emitDeclarationOnly&quot;: true,                      /* Only output d.ts files and not JavaScript files. */</span></span><br><span class="line">    <span class="comment">// &quot;sourceMap&quot;: true,                                /* Create source map files for emitted JavaScript files. */</span></span><br><span class="line">    <span class="comment">// &quot;outFile&quot;: &quot;./&quot;,                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */</span></span><br><span class="line">    <span class="comment">// &quot;outDir&quot;: &quot;./&quot;,                                   /* Specify an output folder for all emitted files. */</span></span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                           <span class="comment">/* Disable emitting comments. */</span></span><br><span class="line">    <span class="comment">// &quot;noEmit&quot;: true,                                   /* Disable emitting files from a compilation. */</span></span><br><span class="line">    <span class="comment">// &quot;importHelpers&quot;: true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */</span></span><br><span class="line">    <span class="comment">// &quot;importsNotUsedAsValues&quot;: &quot;remove&quot;,               /* Specify emit/checking behavior for imports that are only used for types */</span></span><br><span class="line">    <span class="comment">// &quot;downlevelIteration&quot;: true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */</span></span><br><span class="line">    <span class="comment">// &quot;sourceRoot&quot;: &quot;&quot;,                                 /* Specify the root path for debuggers to find the reference source code. */</span></span><br><span class="line">    <span class="comment">// &quot;mapRoot&quot;: &quot;&quot;,                                    /* Specify the location where debugger should locate map files instead of generated locations. */</span></span><br><span class="line">    <span class="comment">// &quot;inlineSourceMap&quot;: true,                          /* Include sourcemap files inside the emitted JavaScript. */</span></span><br><span class="line">    <span class="comment">// &quot;inlineSources&quot;: true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */</span></span><br><span class="line">    <span class="comment">// &quot;emitBOM&quot;: true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */</span></span><br><span class="line">    <span class="comment">// &quot;newLine&quot;: &quot;crlf&quot;,                                /* Set the newline character for emitting files. */</span></span><br><span class="line">    <span class="comment">// &quot;stripInternal&quot;: true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */</span></span><br><span class="line">    <span class="comment">// &quot;noEmitHelpers&quot;: true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */</span></span><br><span class="line">    <span class="comment">// &quot;noEmitOnError&quot;: true,                            /* Disable emitting files if any type checking errors are reported. */</span></span><br><span class="line">    <span class="comment">// &quot;preserveConstEnums&quot;: true,                       /* Disable erasing `const enum` declarations in generated code. */</span></span><br><span class="line">    <span class="comment">// &quot;declarationDir&quot;: &quot;./&quot;,                           /* Specify the output directory for generated declaration files. */</span></span><br><span class="line">    <span class="comment">// &quot;preserveValueImports&quot;: true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Interop Constraints */</span></span><br><span class="line">    <span class="comment">// &quot;isolatedModules&quot;: true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */</span></span><br><span class="line">    <span class="comment">// &quot;allowSyntheticDefaultImports&quot;: true,             /* Allow &#x27;import x from y&#x27; when a module doesn&#x27;t have a default export. */</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                             <span class="comment">/* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */</span></span><br><span class="line">    <span class="comment">// &quot;preserveSymlinks&quot;: true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>            <span class="comment">/* Ensure that casing is correct in imports. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Type Checking */</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                                      <span class="comment">/* Enable all strict type-checking options. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitAny&quot;: true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */</span></span><br><span class="line">    <span class="comment">// &quot;strictNullChecks&quot;: true,                         /* When type checking, take into account `null` and `undefined`. */</span></span><br><span class="line">    <span class="comment">// &quot;strictFunctionTypes&quot;: true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */</span></span><br><span class="line">    <span class="comment">// &quot;strictBindCallApply&quot;: true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */</span></span><br><span class="line">    <span class="comment">// &quot;strictPropertyInitialization&quot;: true,             /* Check for class properties that are declared but not set in the constructor. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitThis&quot;: true,                           /* Enable error reporting when `this` is given the type `any`. */</span></span><br><span class="line">    <span class="comment">// &quot;useUnknownInCatchVariables&quot;: true,               /* Type catch clause variables as &#x27;unknown&#x27; instead of &#x27;any&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;alwaysStrict&quot;: true,                             /* Ensure &#x27;use strict&#x27; is always emitted. */</span></span><br><span class="line">    <span class="comment">// &quot;noUnusedLocals&quot;: true,                           /* Enable error reporting when a local variables aren&#x27;t read. */</span></span><br><span class="line">    <span class="comment">// &quot;noUnusedParameters&quot;: true,                       /* Raise an error when a function parameter isn&#x27;t read */</span></span><br><span class="line">    <span class="comment">// &quot;exactOptionalPropertyTypes&quot;: true,               /* Interpret optional property types as written, rather than adding &#x27;undefined&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitReturns&quot;: true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */</span></span><br><span class="line">    <span class="comment">// &quot;noFallthroughCasesInSwitch&quot;: true,               /* Enable error reporting for fallthrough cases in switch statements. */</span></span><br><span class="line">    <span class="comment">// &quot;noUncheckedIndexedAccess&quot;: true,                 /* Include &#x27;undefined&#x27; in index signature results */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitOverride&quot;: true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */</span></span><br><span class="line">    <span class="comment">// &quot;noPropertyAccessFromIndexSignature&quot;: true,       /* Enforces using indexed accessors for keys declared using an indexed type */</span></span><br><span class="line">    <span class="comment">// &quot;allowUnusedLabels&quot;: true,                        /* Disable error reporting for unused labels. */</span></span><br><span class="line">    <span class="comment">// &quot;allowUnreachableCode&quot;: true,                     /* Disable error reporting for unreachable code. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Completeness */</span></span><br><span class="line">    <span class="comment">// &quot;skipDefaultLibCheck&quot;: true,                      /* Skip type checking .d.ts files that are included with TypeScript. */</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>                                 <span class="comment">/* Skip type checking all .d.ts files. */</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>jenkins自动化部署vue项目</title>
    <link href="https://ms-yip.github.io/2022/10/25/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/"/>
    <id>https://ms-yip.github.io/2022/10/25/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-10-25T12:04:53.000Z</published>
    <updated>2022-12-29T10:47:13.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码管理设置"><a href="#源码管理设置" class="headerlink" title="源码管理设置"></a>源码管理设置</h1><p>正常设置仓库地址和链接信息即可</p><p>x系统管理</p><p>添加ssh</p><p>安装插件</p><p>构建魂惊选择系统配置中的node版本</p><p><img src="/images/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/image-20221025164332249.png" alt="image-20221025164332249"></p><p><img src="/images/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/image-20221026102058986.png" alt="image-20221026102058986"></p><p><img src="/images/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/image-20221025165553136.png" alt="image-20221025165553136"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;源码管理设置&quot;&gt;&lt;a href=&quot;#源码管理设置&quot; class=&quot;headerlink&quot; title=&quot;源码管理设置&quot;&gt;&lt;/a&gt;源码管理设置&lt;/h1&gt;&lt;p&gt;正常设置仓库地址和链接信息即可&lt;/p&gt;
&lt;p&gt;x系统管理&lt;/p&gt;
&lt;p&gt;添加ssh&lt;/p&gt;
&lt;p&gt;安装插件&lt;
      
    
    </summary>
    
    
    
      <category term="jenkins" scheme="https://ms-yip.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Avue</title>
    <link href="https://ms-yip.github.io/2022/05/26/Avue/"/>
    <id>https://ms-yip.github.io/2022/05/26/Avue/</id>
    <published>2022-05-26T12:37:27.000Z</published>
    <updated>2022-12-29T10:47:13.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>安装&amp;引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#安装</span><br><span class="line">npm i @smallwei/avue -S</span><br><span class="line">yarn add @smallwei/avue -S</span><br><span class="line"></span><br><span class="line"># 引入</span><br><span class="line">import Avue from &#x27;@smallwei/avue&#x27;;</span><br><span class="line">import &#x27;@smallwei/avue/lib/index.css&#x27;;</span><br><span class="line">Vue.use(Avue);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&amp;amp;引入&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue3</title>
    <link href="https://ms-yip.github.io/2022/05/26/Vue3/"/>
    <id>https://ms-yip.github.io/2022/05/26/Vue3/</id>
    <published>2022-05-26T12:37:27.000Z</published>
    <updated>2022-12-29T10:47:13.658Z</updated>
    
    <content type="html"><![CDATA[<p>开始学习：</p><ol><li><p>创建<strong>vue应用实例</strong>，应用实例暴露的大多数方法都会返回该同一实例，<strong>允许链式</strong>。</p><p>每个组件将有自己的组件实例 ；应用中所有组件实例共享一个应用实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">createApp(App)</span><br><span class="line">.component(&#x27;SearchInput&#x27;, SearchInputComponent)</span><br><span class="line">.directive(&#x27;focus&#x27;, FocusDirective)</span><br><span class="line">.use(store)</span><br><span class="line">.use(router)</span><br><span class="line">.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">4</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(vm.<span class="property">$data</span>.<span class="property">count</span>) <span class="comment">// =&gt; 4</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(vm.<span class="property">count</span>)       <span class="comment">// =&gt; 4</span></span><br></pre></td></tr></table></figure></li><li><p>尝试区分使用v-once指令有什么区别</p></li><li><p>$attrs属性使用频率太低了</p></li><li><p>自定义指令</p></li></ol><p>动态参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>区别：</p><p>组件可以有多个根元素</p><p>在内联语句处理器中访问原始的 DOM 事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;</span>&gt;</span></span><br><span class="line">  Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多事件处理器"><a href="#多事件处理器" class="headerlink" title="多事件处理器"></a>多事件处理器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;one($event), two($event)&quot;</span>&gt;</span></span><br><span class="line">  Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  one(event) &#123;</span><br><span class="line">    // 第一个事件处理器逻辑...</span><br><span class="line">  &#125;,</span><br><span class="line">  two(event) &#123;</span><br><span class="line">   // 第二个事件处理器逻辑...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault()` 或 `event.stopPropagation()</span><br></pre></td></tr></table></figure><p><strong>不</strong>希望组件的根元素继承 attribute，inheritAttrs<code>选项设置为</code>false</p><p>与单个根节点组件不同，具有多个根节点的组件不具有自动 attribute <a href="https://en.wiktionary.org/wiki/fall-through#English">fallthrough (隐式贯穿)</a> 行为。如果未显式绑定 <code>$attrs</code>，将发出运行时警告。</p><p>组件 多个 <code>v-model</code> 绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user-name</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model:first-name</span>=<span class="string">&quot;firstName&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model:last-name</span>=<span class="string">&quot;lastName&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">user-name</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;user-name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;update:firstName&#x27;</span>, <span class="string">&#x27;update:lastName&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input </span></span><br><span class="line"><span class="string">      type=&quot;text&quot;</span></span><br><span class="line"><span class="string">      :value=&quot;firstName&quot;</span></span><br><span class="line"><span class="string">      @input=&quot;$emit(&#x27;update:firstName&#x27;, $event.target.value)&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      type=&quot;text&quot;</span></span><br><span class="line"><span class="string">      :value=&quot;lastName&quot;</span></span><br><span class="line"><span class="string">      @input=&quot;$emit(&#x27;update:lastName&#x27;, $event.target.value)&quot;&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>插槽</p><p><strong>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</strong></p><p><strong><code>v-slot</code> 只能添加在 <code>&lt;template&gt;</code> 上</strong> (<a href="https://v3.cn.vuejs.org/guide/component-slots.html#独占默认插槽的缩写语法">只有一种例外情况</a>) 即 当被提供的内容<em>只有</em>默认插槽时，组件的标签才可以被当作插槽的模板来使用 ；只要出现多个插槽，请始终为<em>所有的</em>插槽使用完整的基于 <code>&lt;template&gt;</code></p><p>绑定在 <code>&lt;slot&gt;</code> 元素上的 attribute 被称为<strong>插槽 prop</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;( item, index ) in items&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:another-attribute</span>=<span class="string">&quot;anotherAttribute&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>动态插槽名和缩写和默认值有效么？</p><p>#[name]=”{item = “template”}”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">todos</span>: [<span class="string">&#x27;Feed a cat&#x27;</span>, <span class="string">&#x27;Buy tickets&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">provide</span>: &#123;</span><br><span class="line">    <span class="attr">todoLength</span>: <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="property">length</span> <span class="comment">// 将会导致错误 `Cannot read property &#x27;length&#x27; of undefined` 此处 provide不能访问 一些组件的实例 property</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">todos</span>: [<span class="string">&#x27;Feed a cat&#x27;</span>, <span class="string">&#x27;Buy tickets&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">todoLength</span>: <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="property">length</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在上面的例子中，如果我们更改了 <code>todos</code> 的列表，这个变化并不会反映在 inject 的 <code>todoLength</code> property 中。这是因为默认情况下，<code>provide/inject</code> 绑定<em>并不是</em>响应式的。我们可以通过传递一个 <code>ref</code> property 或 <code>reactive</code> 对象给 <code>provide</code> 来改变这种行为。在我们的例子中，如果我们想对祖先组件中的更改做出响应，我们需要为 provide 的 <code>todoLength</code> 分配一个组合式 API <code>computed</code> property：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">todoLength</span>: <span class="title class_">Vue</span>.<span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="property">length</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;todo-list-statistics&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;todoLength&#x27;</span>],</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Injected property: <span class="subst">$&#123;<span class="variable language_">this</span>.todoLength.value&#125;</span>`</span>) <span class="comment">// &gt; 注入的 property: 5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>setup</p><p>参数 props  是响应式数据，<strong>不能使用 ES6 直接解构</strong>，它会消除 prop 的响应性。</p><p>context</p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220408140614333.png" alt="image-20220408140614333"></p><p>执行 <code>setup</code> 时，你只能访问以下 property：</p><ul><li><code>props</code></li><li><code>attrs</code></li><li><code>slots</code></li><li><code>emit</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开始学习：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建&lt;strong&gt;vue应用实例&lt;/strong&gt;，应用实例暴露的大多数方法都会返回该同一实例，&lt;strong&gt;允许链式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;每个组件将有自己的组件实例 ；应用中所有组件实例共享一个应用实例&lt;/p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>composition-API</title>
    <link href="https://ms-yip.github.io/2022/05/26/composition-API/"/>
    <id>https://ms-yip.github.io/2022/05/26/composition-API/</id>
    <published>2022-05-26T12:37:27.000Z</published>
    <updated>2022-12-29T10:47:13.658Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>setup(props, context)</p><p>Composition API 的入口，从 vue2 生命周期钩子的视角来看，它会在 <code>beforeCreate</code> 钩子之后，<code>created</code> 之前被调用+，<code>setup</code> 也可以返回一个函数，函数中也能使用当前 <code>setup</code> 函数作用域中的响应式数据</p><p>props是响应式（不要结构出来否则失去响应式特性），context<code>(上下文对象，从原来 2.x 中 this 选择性地暴露了一些</code>property</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">      attrs,</span><br><span class="line">      emit,</span><br><span class="line">      isServer,</span><br><span class="line">      listeners,</span><br><span class="line">      parent,</span><br><span class="line">      refs,</span><br><span class="line">      root,</span><br><span class="line">      slots,</span><br><span class="line">      ssrContext,</span><br><span class="line">    &#125; = context</span><br></pre></td></tr></table></figure></li><li><p>ref &amp; reactive创建响应式数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>) <span class="comment">// &#123; value: 0 &#125;</span></span><br><span class="line"><span class="keyword">let</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">number</span>: <span class="number">0</span> &#125;)</span><br></pre></td></tr></table></figure><p>区别：// @TODO</p></li><li><p>toRef 和 toRefs</p><p>reactive 是将引入类型的数据变成响应式数据；而ref是将基本类型的数据转化为响应式数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let countRef = toRef(state, &#x27;count&#x27;)</span><br><span class="line">let stateAsRefs = toRefs(state2)</span><br></pre></td></tr></table></figure></li><li><p>computed</p><p>有两种使用方法：</p><ol><li><p>接受一个getter函数，返回一个不变的响应式对象</p></li><li><p>使用具有 get 和 set 函数的对象</p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211227143526277.png" alt="image-20211227143526277"></p></li></ol></li><li><p>watch</p><p> <img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211227143659669.png" alt="image-20211227143659669"></p></li><li><p>watchEffect</p><p>watchEffect的作用和watch一致，只不过在语法上有点不一样，watchEffect接收一个函数，在函数内的响应式对象有变化时，这个函数就会被执行一次。watchEffect返回暂停函数，当这个函数被调用后，watchEffect就不起作用了。</p></li></ol><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220124095254388.png" alt="image-20220124095254388"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;setup(props, context)&lt;/p&gt;
&lt;p&gt;Composition API 的入口，从 vue2 生命周期钩子的视角来看，它会在 &lt;code&gt;beforeCreate&lt;/code&gt; 钩子之后，&lt;code&gt;created&lt;/code&gt; 之前被调
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>eslint</title>
    <link href="https://ms-yip.github.io/2022/05/26/eslint/"/>
    <id>https://ms-yip.github.io/2022/05/26/eslint/</id>
    <published>2022-05-26T12:37:27.000Z</published>
    <updated>2022-12-29T10:47:13.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h1><p>使用</p><ol><li><p>安装</p><p>局部安装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install eslint --save-dev</span><br></pre></td></tr></table></figure><p>全局安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g eslint</span><br></pre></td></tr></table></figure></li><li><p>初始化 <strong>eslint –init</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/eslint --init</span><br></pre></td></tr></table></figure></li></ol><p>配置说明：</p><p><strong>env</strong> 指定脚本的运行环境。</p><p><strong>parser</strong> 指定解析器，默认：Espress</p><p><strong>parserOptions</strong> 指定要支持的 JavaScript 语言选项</p><p><strong>globals</strong> 定义全局变量，允许未声明使用。[writable”,”readonly”, “off”]</p><p><strong>extends</strong> 可以被基础配置中的已启用的规则继承。 如：’extends’: ‘eslint:recommended’,</p><p><strong>rules</strong> 规则</p><p><strong>plugins</strong> 使用第三方插件</p><p><strong>processor</strong> 插件可以提供处理器。配合plugins使用。处理器可以从另一种文件中提取 JavaScript 代码，然后让 ESLint 检测 JavaScript 代码。或者处理器可以在预处理中转换 JavaScript 代码。</p><p><strong>overrides</strong> 为特定类型的文件指定处理器。<code>overrides</code> 键和 <code>processor</code> 键的组合</p><p>.eslintignore 文件配置要忽略的文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;eslint&quot;&gt;&lt;a href=&quot;#eslint&quot; class=&quot;headerlink&quot; title=&quot;eslint&quot;&gt;&lt;/a&gt;eslint&lt;/h1&gt;&lt;p&gt;使用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;p&gt;局部安装：&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>gulp使用</title>
    <link href="https://ms-yip.github.io/2022/05/26/gulp%E4%BD%BF%E7%94%A8/"/>
    <id>https://ms-yip.github.io/2022/05/26/gulp%E4%BD%BF%E7%94%A8/</id>
    <published>2022-05-26T12:37:27.000Z</published>
    <updated>2022-12-29T10:47:13.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h1><p>gulp 是基于 node 实现 Web 前端自动化开发的工具，利用它能够极大的提高开发效率。</p><ol start="0"><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure><p>成功后查看版本 gulp -v</p></li><li><p>运行</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp [task-name]</span><br></pre></td></tr></table></figure><h4 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h4><ol><li><p>Did you forget to signal async completion?</p><p>原因：</p><p>gulp4中需要指定task结束<br> gulp4中，必须告诉gulp我们的task任务已经完成了。gulp3中，我们不必要这么做，因为如果没有发出异步完成信号，那么当任务返回时，gulp会认为它已经完成了，gulp4中必须明确指出任务完成了。</p></li></ol><p>方法一：告诉gulp任务完成的另一个常见方法是 返回(return) 一个流或者** Promise**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify:js&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;client/**/*.js&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">minify</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;build&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>方法二：使用回调函数作为您的任务的第一个参数，只需在完成时调用该函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;clean&#x27;</span>, <span class="keyword">function</span>(<span class="params">done</span>) &#123;</span><br><span class="line">  <span class="title function_">del</span>([<span class="string">&#x27;build]);</span></span><br><span class="line"><span class="string">    done();</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;gulp&quot;&gt;&lt;a href=&quot;#gulp&quot; class=&quot;headerlink&quot; title=&quot;gulp&quot;&gt;&lt;/a&gt;gulp&lt;/h1&gt;&lt;p&gt;gulp 是基于 node 实现 Web 前端自动化开发的工具，利用它能够极大的提高开发效率。&lt;/p&gt;
&lt;ol start=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://ms-yip.github.io/2022/05/26/git/"/>
    <id>https://ms-yip.github.io/2022/05/26/git/</id>
    <published>2022-05-26T12:37:27.000Z</published>
    <updated>2022-12-29T10:47:13.658Z</updated>
    
    <content type="html"><![CDATA[<p>#简介：分布式版本控制系统</p><p>#原理：git 用来跟踪管理版本库的</p><p>在 GIt 中，你的文件可能会处于三种状态之一：</p><ul><li><strong>已修改（modified）</strong> - 已修改表示修改了文件，但还没保存到数据库中。</li><li><strong>已暂存（staged）</strong> - 已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li><li><strong>已提交（committed）</strong> - 已提交表示数据已经安全的保存在本地数据库中。</li></ul><p>不同状态的文件在 Git 中处于不同的工作区域。</p><p><strong>工作区（working）</strong> - 当你 <code>git clone</code> 一个项目到本地，相当于在本地克隆了项目的一个副本。工作区是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p><p><strong>暂存区（staging）</strong> - 暂存区是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’’，不过一般说法还是叫暂存区。</p><p><strong>本地仓库（local）</strong> - 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 本地仓库。</p><p><strong>远程仓库（remote）</strong> - 以上几个工作区都是在本地。为了让别人可以看到你的修改，你需要将你的更新推送到远程仓库。同理，如果你想同步别人的修改，你需要从远程仓库拉取更新。</p><p><img src="https://pic2.zhimg.com/80/v2-3bc9d5f2c49a713c776e69676d7d56c5_1440w.jpg" alt="image"></p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220524140506078.png" alt="image-20220524140506078"></p><p>#git 命令</p><ol><li><p>重新设置账号密码 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system --unset credential.helper</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;XX&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;XX&quot;</span><br></pre></td></tr></table></figure></li><li><p>新建仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>添加修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git add [file1] [file2] [file3] ... // add file </span><br><span class="line"></span><br><span class="line">git ads [dir] // add files in catalogue</span><br><span class="line"></span><br><span class="line">git add . // all file</span><br><span class="line"></span><br><span class="line">git add -A // 把所有修改添加到暂存区</span><br></pre></td></tr></table></figure></li><li><p>储藏 —— 将本地的修改内容作为草稿储藏起来</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git stash // 将修改作为当前分支的草稿保存</span><br><span class="line"></span><br><span class="line">git stash list // 查看草稿列表</span><br><span class="line"></span><br><span class="line">git stash drop stash@&#123;0&#125; //删除草稿</span><br><span class="line"></span><br><span class="line">$ git stash apply stash@&#123;0&#125; //读取草稿</span><br></pre></td></tr></table></figure><ol start="6"><li><p>遴选</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;hashA&gt; &lt;hashB&gt; </span><br><span class="line">// 可以转移从 A 到 B 的所有提交 不包含A</span><br><span class="line">git cherry-pick A..B </span><br><span class="line">// 可以转移从 A 到 B 的所有提交 含提交A</span><br><span class="line">git cherry-pick A^..B </span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>修改最后一次push commit 的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend &lt;message&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>.git 文件夹下的配置文件 config</p><p>[remote “origin”]  ，https:// 之后 增加 用户名:密码@</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#简介：分布式版本控制系统&lt;/p&gt;
&lt;p&gt;#原理：git 用来跟踪管理版本库的&lt;/p&gt;
&lt;p&gt;在 GIt 中，你的文件可能会处于三种状态之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;已修改（modified）&lt;/strong&gt; - 已修改表示修改了文件，但还没保存到数据
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>iconfont使用</title>
    <link href="https://ms-yip.github.io/2022/05/26/iconfont%E4%BD%BF%E7%94%A8/"/>
    <id>https://ms-yip.github.io/2022/05/26/iconfont%E4%BD%BF%E7%94%A8/</id>
    <published>2022-05-26T12:37:27.000Z</published>
    <updated>2022-12-29T10:47:13.659Z</updated>
    
    <content type="html"><![CDATA[<p>前言</p><p>iconfont 支持单色图标和多色图标</p><p>区别</p><p><img src="C:%5CUsers%5Cymshan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211130120001775.png" alt="image-20211130120001775"></p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211130115948867.png" alt="image-20211130115948867"></p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211130120223828.png" alt="image-20211130120223828"></p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211130120140324.png" alt="image-20211130120140324"></p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211130132508424.png" alt="image-20211130132508424"></p><p>![image-20211130132527647](<a href="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211130132527647.png">https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211130132527647.png</a></p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211130134357951.png" alt="image-20211130134357951"></p><p><strong>总结</strong>：使用Unicode 引入需要@font-face 及iconfont类；  font-class引入需要在前者基础上使用对应code的类；Symbol引入 需要js </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 50rpx;&quot;</span>&gt;</span><span class="symbol">&amp;#xe6ce;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-ic__yuyuejilu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 50rpx;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- .icon-ic__yuyuejilu:before &#123;</span></span><br><span class="line"><span class="comment">content: &quot;\e6ce&quot;;</span></span><br><span class="line"><span class="comment">&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-ic__yuyuejilu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="uniapp-使用iconfont"><a href="#uniapp-使用iconfont" class="headerlink" title="uniapp 使用iconfont"></a>uniapp 使用iconfont</h4><ol><li><p>编译成h5 ，正确引入 iconfont 引入的文件路径即可使用；但是不支持svg（iconfont.js会报错）</p></li><li><p><a href="https://blog.csdn.net/qq_42540989/article/details/111356678">uniapp 开发小程序使用iconfont彩色图标</a></p></li></ol><h3 id="封装icon示例"><a href="#封装icon示例" class="headerlink" title="封装icon示例"></a>封装icon示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">    &lt;use :xlink:href=&quot;iconName&quot;&gt;&lt;/use&gt;</span><br><span class="line">  &lt;/svg&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 使用svg需要引入iconfont字体的js文件，并且</span><br><span class="line">*</span><br><span class="line">*/</span><br><span class="line">&lt;script type=&quot;text/jsx&quot;&gt;</span><br><span class="line">import &#x27;../assets/icon/iconfont&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;icon&#x27;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      require: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    iconName() &#123;</span><br><span class="line">      return `#icon-$&#123;this.name&#125;`</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.icon &#123;</span><br><span class="line">  width: 1em;</span><br><span class="line">  height: 1em;</span><br><span class="line">  vertical-align: -0.15em;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>彩色图标 font-weight 大于500 会显示异常 ,因此可以在字体定义的时候设置font-weight</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;iconfont 支持单色图标和多色图标&lt;/p&gt;
&lt;p&gt;区别&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;C:%5CUsers%5Cymshan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-2
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>linux</title>
    <link href="https://ms-yip.github.io/2022/05/26/linux/"/>
    <id>https://ms-yip.github.io/2022/05/26/linux/</id>
    <published>2022-05-26T12:37:27.000Z</published>
    <updated>2022-12-29T10:47:13.659Z</updated>
    
    <content type="html"><![CDATA[<p>文件目录显示</p><ul><li>蓝色 表示文件夹；</li><li>灰色 表示普通文件；</li><li>绿色 表示可执行文件；</li><li>红色 表示压缩文件；</li><li>天蓝色 表示链接文件（快捷方式）；</li></ul><p>常见目录</p><ul><li><strong>bin：</strong> 存放普通用户<strong>可执行的指令</strong>，普通用户也可以执行；</li><li><strong>dev ：</strong> 设备目录，所有的<strong>硬件设备及周边</strong>均放置在这个设备目录中；</li><li><strong>boot ：</strong> <strong>开机引导</strong>目录，包括 Linux 内核文件与开机所需要的文件；</li><li><strong>home：</strong> 这里主要存放你的<strong>个人数据</strong>，具体每个用户的设置文件，用户的桌面文件夹，还有用户的数据都放在这里。每个用户都有自己的用户目录，位置为：<code>/home/用户名</code>。当然，root 用户除外；</li><li><strong>usr：</strong> <strong>应用程序</strong>放置目录；</li><li><strong>lib：</strong> 开机时常用的<strong>动态链接</strong>库，bin 及 sbin 指令也会调用对应的 lib 库；</li><li><strong>tmp：</strong> 临时文件存放目录 ；</li><li><strong>etc：</strong> 各种<strong>配置文件</strong>目录，大部分配置属性均存放在这里；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文件目录显示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蓝色 表示文件夹；&lt;/li&gt;
&lt;li&gt;灰色 表示普通文件；&lt;/li&gt;
&lt;li&gt;绿色 表示可执行文件；&lt;/li&gt;
&lt;li&gt;红色 表示压缩文件；&lt;/li&gt;
&lt;li&gt;天蓝色 表示链接文件（快捷方式）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见目录&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>linux学习</title>
    <link href="https://ms-yip.github.io/2022/05/26/linux%E5%AD%A6%E4%B9%A0/"/>
    <id>https://ms-yip.github.io/2022/05/26/linux%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-05-26T12:37:27.000Z</published>
    <updated>2022-12-29T10:47:13.660Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>node安装使用</title>
    <link href="https://ms-yip.github.io/2022/05/26/node%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://ms-yip.github.io/2022/05/26/node%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</id>
    <published>2022-05-26T12:37:27.000Z</published>
    <updated>2022-12-29T10:47:13.660Z</updated>
    
    <content type="html"><![CDATA[<h4 id="node-安装"><a href="#node-安装" class="headerlink" title="node 安装"></a>node 安装</h4><ol><li><p>双击运行：<img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820113104311.png" alt=""></p></li><li><p>其他基本安装默认设置安装即可，也可以自定义路径安装：</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820113158414.png" alt="image-20210820113158414"></p></li></ol><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820113220463.png" alt="image-20210820113220463"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820113241473.png" alt="image-20210820113241473"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step6.png" alt="install-node-msi-version-on-windows-step6"></p><p>![(<a href="https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step6.png">https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step6.png</a>)</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step7.png" alt="install-node-msi-version-on-windows-step7"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step8.png" alt="install-node-msi-version-on-windows-step8"></p><h4 id="node运行项目"><a href="#node运行项目" class="headerlink" title="node运行项目"></a>node运行项目</h4><p>​    可直接打开文件目录，输入cmd命令行进行后续运行项目操作，详情请见开发及部署文档说明.md。也可以输入start.bat根据提示输入对应选项进行安装：</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820125956366.png" alt="image-20210820125956366"></p><p>特别说明：npm默认源因为访问慢等各种不可抗力因素经常会出现安装出错(整体或部分包)。出现报错情况很正常，请拿出专业和耐心，找出报错信息所指向的包，执行npm install  XXXX 即可。如多次安装也不行，请切换npm registry 或安装cnpm 进行install 操作。</p><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><h1 id="Unexpected-end-of-JSON-input-while-parsing-near-‘…”"><a href="#Unexpected-end-of-JSON-input-while-parsing-near-‘…”" class="headerlink" title="Unexpected end of JSON input while parsing near ‘…”"></a>Unexpected end of JSON input while parsing near ‘…”</h1><p>设置仓库为淘宝的，然后清除缓存，重新下载依赖包</p><p>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a></p><p>npm cache clean –force </p><p>npm install</p><p>或者 安装cnpm </p><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></p><p>cnpm install</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820142455193.png" alt="image-20210820142455193"></p><h1 id="运行npm-run-lint-serve-build-时报错"><a href="#运行npm-run-lint-serve-build-时报错" class="headerlink" title="运行npm run lint/serve/build 时报错"></a>运行npm run lint/serve/build 时报错</h1><p>​    在完成 install操作后，进行标题上命令，多为eslint语法校验和程序代码错误：请根据提示进行代码修复后再运行。</p><p>如下：</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820143211138.png" alt="image-20210820143211138"></p><p>下图为启动本地运行：</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820142936138.png" alt="image-20210820142936138"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;node-安装&quot;&gt;&lt;a href=&quot;#node-安装&quot; class=&quot;headerlink&quot; title=&quot;node 安装&quot;&gt;&lt;/a&gt;node 安装&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;双击运行：&lt;img src=&quot;https://gitee.com/msy-codi
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pinia</title>
    <link href="https://ms-yip.github.io/2022/05/26/pinia/"/>
    <id>https://ms-yip.github.io/2022/05/26/pinia/</id>
    <published>2022-05-26T12:37:27.000Z</published>
    <updated>2022-12-29T10:47:13.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 使用 npm</span><br><span class="line">npm install pinia@next</span><br><span class="line"># 使用 yarn</span><br><span class="line">yarn add pinia@next</span><br></pre></td></tr></table></figure></li><li><p>引入</p><p>创建一个 pinia（根存储）并将其传递给应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createPinia &#125; from <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line">app.use(createPinia());</span><br></pre></td></tr></table></figure></li><li><p>了解State</p><p>defineStore：定义store</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineStore &#125; from &#x27;pinia&#x27;</span><br><span class="line"></span><br><span class="line">export default defineStore(&#123;</span><br><span class="line">  id: &#x27;app&#x27;,</span><br><span class="line">  state () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &#x27;码农小余&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; store.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import useAppStore from &#x27;./store/index&#x27;</span><br><span class="line">const store = useAppStore()</span><br><span class="line">console.log(store)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>this.$patch({})</p><p>可以同时修改多个值</p></li><li><p>$subscribe 用于监听 state 及其 mutation 动作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const store = useAppStore();</span><br><span class="line"></span><br><span class="line">store.$subscribe((mutation, state) =&gt; &#123;</span><br><span class="line">  console.log(mutation);</span><br><span class="line">  console.log(state);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>$onAction 可用于统计actions 的时间或者记录折扣点击总次数的时候</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>npm包调试</title>
    <link href="https://ms-yip.github.io/2022/05/26/npm%E5%8C%85%E8%B0%83%E8%AF%95/"/>
    <id>https://ms-yip.github.io/2022/05/26/npm%E5%8C%85%E8%B0%83%E8%AF%95/</id>
    <published>2022-05-26T12:37:27.000Z</published>
    <updated>2022-12-29T10:47:13.660Z</updated>
    
    <content type="html"><![CDATA[<p>npm 包调试方法</p><ol><li><p>修改 pagekage.json的dependencies</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- &quot;@shengshunyan/utils&quot;: &quot;^1.0.2&quot;</span><br><span class="line">+ &quot;@shengshunyan/utils&quot;:&quot;file:/Users/guoshi/Desktop/shengshunyan-utils&quot;</span><br></pre></td></tr></table></figure><p>注意：修改pagekage.json 之后, 需要重新执行安装指令。并且安装之前，npm包需要先执行build操作。</p></li><li><p>npm link</p><ul><li><p>npm包项目 npm run build 后 执行npm link 操作。 npm ls –global ：查看链接效果 </p></li><li><p>引用项目下执行 npm link [npm 包] 后运行。npm ls ：查看链接效果</p></li></ul></li><li><p>yalc</p><ul><li><strong>npm install -g yalc</strong> 安装yalc 包</li></ul></li></ol><ul><li>npm包项目执行 <strong>yalc publish</strong> 【将组件库发布到本地】<ul><li>引用项目下执行 <strong>yalc link/add  [npm包]</strong>，后运行项目 npm run dev  【使用该组件库的项目中添加本地依赖】</li></ul></li><li><strong>yalc remove –all</strong> 【联调后去掉本地依赖】</li></ul><p>备注：为实现本地调试自动化发布或构建，引用nodemon</p><ul><li><p>package.json文件里添加scripts脚本 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注意这里要用引号 包含执行的命令，否则只能执行一半 */</span></span><br><span class="line"><span class="string">&quot;watch&quot;</span>: <span class="string">&quot;nodemon --ignore node_modules/ --watch src/ --ext vue,ts,js,tsx,scss -x \&quot;npm run build &amp;&amp; yalc push\&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><h6 id="npm-run-watch"><a href="#npm-run-watch" class="headerlink" title="npm run watch"></a>npm run watch</h6></li><li><h3 id="查看仓库信息"><a href="#查看仓库信息" class="headerlink" title="查看仓库信息"></a>查看仓库信息</h3><p>当我们要查看本地仓库里存在的包时</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yalc installations <span class="keyword">show</span></span><br></pre></td></tr></table></figure><p>要清理不需要的包时</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yalc installations clean [<span class="keyword">my</span>-<span class="keyword">package</span>]</span><br></pre></td></tr></table></figure></li></ul><p>备注：nodemon.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;restartable&quot;: &quot;rs&quot;,</span><br><span class="line">  &quot;ignore&quot;: [</span><br><span class="line">     &quot;.git&quot;,</span><br><span class="line">     &quot;node_modules/**/node_modules&quot;</span><br><span class="line">   ],</span><br><span class="line">   &quot;verbose&quot;: true,</span><br><span class="line">   &quot;execMap&quot;: &#123;</span><br><span class="line">     &quot;js&quot;: &quot;node --harmony&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;events&quot;: &#123;</span><br><span class="line">     &quot;restart&quot;: &quot;osascript -e &#x27;display notification \&quot;App restarted due to:\n&#x27;$FILENAME&#x27;\&quot; with title \&quot;nodemon\&quot;&#x27;&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;watch&quot;: [</span><br><span class="line">     &quot;test/fixtures/&quot;,</span><br><span class="line">     &quot;test/samples/&quot;</span><br><span class="line">   ],</span><br><span class="line">   &quot;env&quot;: &#123;</span><br><span class="line">     &quot;NODE_ENV&quot;: &quot;development&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;ext&quot;: &quot;js,json&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>   npm 源管理工具 nrm</p><ol><li>安装 npm install -g nrm</li><li>nrm ls 查看源列表</li><li>nrm add <alias-name><address> // eg：nrm add grgnpm <a href="http://10.1.3.24:4873">http://10.1.3.24:4873</a></li><li>nrm use <name> // eg：nrm use taobao。</li><li>nrm test  // npm 源测速</li><li>nrm test  <name> // 指定测速</li><li>nrm del <name> //删除源</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;npm 包调试方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改 pagekage.json的dependencies&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>qianku落地挖坑填坑系列</title>
    <link href="https://ms-yip.github.io/2022/05/26/qianku%E8%90%BD%E5%9C%B0%E6%8C%96%E5%9D%91%E5%A1%AB%E5%9D%91%E7%B3%BB%E5%88%97/"/>
    <id>https://ms-yip.github.io/2022/05/26/qianku%E8%90%BD%E5%9C%B0%E6%8C%96%E5%9D%91%E5%A1%AB%E5%9D%91%E7%B3%BB%E5%88%97/</id>
    <published>2022-05-26T12:37:27.000Z</published>
    <updated>2022-12-29T10:47:13.661Z</updated>
    
    <content type="html"><![CDATA[<p>qiankun fetch 失败</p><ol><li>导出的生命周期有问题</li><li>子站没有开始允许跨域</li></ol><p>要解决的问题</p><p>1.样式污染问题主站与子项目间的</p><p><a href="https://blog.csdn.net/Lyrelion/article/details/119245884">qiankun 问题记录</a></p><p>iframe 跨域踩坑系列：</p><p>受到三种跨域限制：一是ajax请求限制；二是DOM无法获得；三是Cookie、LocalStorage 和 IndexDB 无法读取。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;qiankun fetch 失败&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导出的生命周期有问题&lt;/li&gt;
&lt;li&gt;子站没有开始允许跨域&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要解决的问题&lt;/p&gt;
&lt;p&gt;1.样式污染问题主站与子项目间的&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.cs
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="https://ms-yip.github.io/2022/05/26/vue/"/>
    <id>https://ms-yip.github.io/2022/05/26/vue/</id>
    <published>2022-05-26T12:37:27.000Z</published>
    <updated>2023-01-06T01:56:03.431Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>MVVM概念</p><p>一种软件架构设计模式</p><p>model 数据模型</p><p>view 视图</p><p>viewModel </p></li><li><p>渐进式框架：</p><p>自底向上逐层应用。不必使用他的所有部分</p></li><li><p>生命周期</p><p>共8个，需要熟悉生命周期流程图</p><ol><li><p>初始化 Events 和Lifecycle；beforeCreated</p></li><li><p>初始化 Injections 和 reactivity；created</p></li><li><p>el‘option 或者$mount时， 将（el’ outerHtml 作为编译模板）compile template into render function；beforeMounted</p></li><li><p>create vm.$el &amp; replace el with it ;完成实例与虚拟dom的关联； Mounted</p></li><li><p>监听数据变化，beforeUpdate， virtual dom re-render &amp; patch</p></li><li><p>调用 $distroy ；执行 beforeDestory ；teardown watchers，child components &amp; event listeners；destoryed</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            msg:&quot;测试&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;&#125;,</span><br><span class="line">        computed:&#123;&#125;,</span><br><span class="line">        beforeCreate:function()&#123;</span><br><span class="line">            console.group(&quot;beforeCreate==&gt;&quot;);</span><br><span class="line">            console.log(&quot;this:&quot;,this); // 存在实例</span><br><span class="line">            console.log(&quot;$options:&quot;,this.$options); // 存在配置项</span><br><span class="line">            console.log(&quot;$el&quot;,this.$el); // 没有完成容器构建，所以 $el 为 undefined</span><br><span class="line">            console.log(&quot;$data:&quot;,this.$data); // 只完成了vue的环境，但没有完成数据装载，所以为 undefined</span><br><span class="line">            console.log(&quot;$data.msg:&quot;,this.msg);// 只完成了vue的环境，但没有完成数据装载，所以为 undefined</span><br><span class="line">            console.groupEnd();</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            console.group(&quot;created==&gt;&quot;);</span><br><span class="line">            console.log(&quot;this:&quot;,this);// 存在实例</span><br><span class="line">            console.log(&quot;$options:&quot;,this.$options);// 存在配置项</span><br><span class="line">            console.log(&quot;$el&quot;,this.$el);// 没有完成容器构建，所以 $el 为 undefined</span><br><span class="line">            // 在完成数据装载时，执行$options.data 方法 （mergedInstanceDataFn())</span><br><span class="line">            // 主要用于完成数据对象的合并 和 数据劫持的执行，最终返回一个具有劫持的 数据对象</span><br><span class="line">            // 提供vue实例的 $data</span><br><span class="line">            console.log(&quot;$data:&quot;,this.$data); // 已经完成了vue的基本功能定义，所以已存在数据仓库</span><br><span class="line">            console.log(&quot;$data.msg:&quot;,this.msg);// 已经完成了vue的基本功能定义，所以已存在变量</span><br><span class="line">            console.groupEnd();</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>   <strong>自定义组件的v-model</strong></p><p>   <code>v-model</code> 默认会利用名为 <code>value</code> 的 prop 和名为 <code>input</code> 的事件.</p><p>   像单选框、复选框等类型的输入控件可能会将 <code>value</code> attribute 用于不同的目的</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;base-checkbox&#x27;, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &#x27;checked&#x27;,</span><br><span class="line">    event: &#x27;change&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    checked: Boolean</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:checked</span>=<span class="string">&quot;checked&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:change</span>=<span class="string">&quot;$emit(&#x27;change&#x27;, $event.target.checked)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   <strong>this.$listeners</strong></p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;base-input&#x27;, &#123;</span><br><span class="line">  inheritAttrs: false,</span><br><span class="line">  props: [&#x27;label&#x27;, &#x27;value&#x27;],</span><br><span class="line">  computed: &#123;</span><br><span class="line">    inputListeners: function () &#123;</span><br><span class="line">      var vm = this</span><br><span class="line">      // `Object.assign` 将所有的对象合并为一个新对象</span><br><span class="line">      return Object.assign(&#123;&#125;,</span><br><span class="line">        // 我们从父级添加所有的监听器</span><br><span class="line">        this.$listeners,</span><br><span class="line">        // 然后我们添加自定义监听器，</span><br><span class="line">        // 或覆写一些监听器的行为</span><br><span class="line">        &#123;</span><br><span class="line">          // 这里确保组件配合 `v-model` 的工作</span><br><span class="line">          input: function (event) &#123;</span><br><span class="line">            vm.$emit(&#x27;input&#x27;, event.target.value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &#123;&#123; label &#125;&#125;</span><br><span class="line">      &lt;input</span><br><span class="line">        v-bind=&quot;$attrs&quot;</span><br><span class="line">        v-bind:value=&quot;value&quot;</span><br><span class="line">        v-on=&quot;inputListeners&quot;</span><br><span class="line">      &gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   插槽新语法 2.6</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user #default=&quot;&#123; user:person &#125;&quot;&gt;</span><br><span class="line">  &#123;&#123; person.firstName &#125;&#125;</span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><p>   你甚至可以定义后备内容，用于插槽 prop 是 undefined 的情形：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user v-slot=&quot;&#123; user = &#123; firstName: &#x27;Guest&#x27; &#125; &#125;&quot;&gt;</span><br><span class="line">  &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><p>   <strong>动态参数！</strong></p><p>   <a href="[https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6](https://cn.vuejs.org/v2/guide/components-dynamic-async.html#异步组件)"><strong>异步组件</strong></a></p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;async-example&#x27;, function (resolve, reject) &#123;</span><br><span class="line">  setTimeout(function () &#123;</span><br><span class="line">    // 向 `resolve` 回调传递组件定义</span><br><span class="line">    resolve(&#123;</span><br><span class="line">      template: &#x27;&lt;div&gt;I am async!&lt;/div&gt;&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   一个推荐的做法是将异步组件和 <a href="https://webpack.js.org/guides/code-splitting/">webpack 的 code-splitting 功能</a>一起配合使用：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;async-webpack-example&#x27;, function (resolve) &#123;</span><br><span class="line">  // 这个特殊的 `require` 语法将会告诉 webpack</span><br><span class="line">  // 自动将你的构建代码切割成多个包，这些包</span><br><span class="line">  // 会通过 Ajax 请求加载</span><br><span class="line">  require([&#x27;./my-async-component&#x27;], resolve)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>处理加载状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const AsyncComponent = () =&gt; (&#123;</span><br><span class="line">  // 需要加载的组件 (应该是一个 `Promise` 对象)</span><br><span class="line">  component: import(&#x27;./MyComponent.vue&#x27;),</span><br><span class="line">  // 异步组件加载时使用的组件</span><br><span class="line">  loading: LoadingComponent,</span><br><span class="line">  // 加载失败时使用的组件</span><br><span class="line">  error: ErrorComponent,</span><br><span class="line">  // 展示加载时组件的延时时间。默认值是 200 (毫秒)</span><br><span class="line">  delay: 200,</span><br><span class="line">  // 如果提供了超时时间且组件加载也超时了，</span><br><span class="line">  // 则使用加载失败时使用的组件。默认值是：`Infinity`</span><br><span class="line">  timeout: 3000</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a><a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#依赖注入">依赖注入</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">provide: function () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    getMap: this.getMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 子代组件</span><br><span class="line">inject: [&#x27;getMap&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.w3cplus.com/vue/seven-ways-to-define-a-component-template-by-vuejs.html">Vue.js 定义组件模板的七种方式</a></p><p>$forceUpdate() 强制更新</p><p>混入：</p><p>mixins/extend 使用同样的策略进行合并</p><p>data ，methods<code>、</code>components、directives 合并冲突 是取组件对象的值</p><p>同名钩子函数将合并为一个数组，混入对象的钩子将在组件自身钩子<strong>之前</strong>调用</p><p>自定义指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 注册一个全局自定义指令 `v-focus`</span><br><span class="line">Vue.directive(&#x27;focus&#x27;, &#123;</span><br><span class="line">  // 当被绑定的元素插入到 DOM 中时……</span><br><span class="line">  inserted: function (el) &#123;</span><br><span class="line">    // 聚焦元素</span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 如果想注册局部指令，组件中也接受一个 directives 的选项：</span><br><span class="line">directives: &#123;</span><br><span class="line">  focus: &#123;</span><br><span class="line">    // 指令的定义</span><br><span class="line">    inserted: function (el) &#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p><ul><li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li><li><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li><li><code>update</code>：所在组件的 VNode 更新时调用，<strong>但是可能发生在其子 VNode 更新之前</strong>。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</li><li><code>componentUpdated</code>：指令所在组件的 VNode <strong>及其子 VNode</strong> 全部更新后调用。</li><li><code>unbind</code>：只调用一次，指令与元素解绑时调用。</li></ul><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>数据驱动、组件化</p><h3 id="三大要素"><a href="#三大要素" class="headerlink" title="三大要素"></a>三大要素</h3><ol><li><p>数据响应式： 监听数据变化并在视图更新<br> Object.defineProperty<br> proxy</p></li><li><p>模版引擎：提供描述视图的模板语法<br>插值语法 双大括号<br>指令 v-bind v-if v-on v-model v-for</p></li><li><p>渲染： 如何将模版转为 html<br>模板 =&gt; vdom =&gt; dom</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;MVVM概念&lt;/p&gt;
&lt;p&gt;一种软件架构设计模式&lt;/p&gt;
&lt;p&gt;model 数据模型&lt;/p&gt;
&lt;p&gt;view 视图&lt;/p&gt;
&lt;p&gt;viewModel &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;渐进式框架：&lt;/p&gt;
&lt;p&gt;自底向上逐层应用。不必使用他的所有部分&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
