<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>珊珊的小本子</title>
  <icon>https://www.gravatar.com/avatar/b5c247f59c4ff39dce2796b57d2cf6f1</icon>
  <subtitle>一个记满小鱼干的小本本</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ms-yip.github.io/"/>
  <updated>2022-12-29T10:30:07.395Z</updated>
  <id>https://ms-yip.github.io/</id>
  
  <author>
    <name>ms.y</name>
    <email>yeminshan@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>页面跨页通信</title>
    <link href="https://ms-yip.github.io/2022/12/29/%E9%A1%B5%E9%9D%A2%E8%B7%A8%E9%A1%B5%E9%80%9A%E4%BF%A1/"/>
    <id>https://ms-yip.github.io/2022/12/29/%E9%A1%B5%E9%9D%A2%E8%B7%A8%E9%A1%B5%E9%80%9A%E4%BF%A1/</id>
    <published>2022-12-29T10:30:07.395Z</published>
    <updated>2022-12-29T10:30:07.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同源跨页"><a href="#同源跨页" class="headerlink" title="同源跨页"></a>同源跨页</h1><ol><li><p>BroadCast Channel</p><p>兼容性：ie、safari on IOS 不兼容，chrome 54+，Edge 79+， Firefox 38+，opera 41+</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bc = new BroadcastChannel(&#x27;alienzhou&#x27;);</span><br><span class="line">bc.postMessage(&#123;from: &#x27;other&#x27;, msg&#125;);</span><br><span class="line">bc.onmessage = function(e) &#123;</span><br><span class="line">console.log(&#x27;index receive message&#x27;, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 每个需要的页面中添加创建信道，发送消息和接受消息的代码</span><br><span class="line">var bc;</span><br><span class="line">function broadcast() &#123;</span><br><span class="line">  bc = new BroadcastChannel(&#x27;alienzhou&#x27;);</span><br><span class="line">  bc.onmessage = function(e) &#123;</span><br><span class="line">      console.log(&#x27;index receive message&#x27;, e);</span><br><span class="line">      var data = e.data;</span><br><span class="line">      var $div = document.createElement(&#x27;div&#x27;);</span><br><span class="line">      $div.textContent = data.from + &#x27;: &#x27; + data.msg;</span><br><span class="line">      document.getElementById(&#x27;js-container&#x27;).appendChild($div);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">broadcast();</span><br><span class="line"></span><br><span class="line">document.getElementById(&#x27;js-btn&#x27;).addEventListener(&#x27;click&#x27;, function()&#123;</span><br><span class="line">  var msg = document.getElementById(&#x27;js-input&#x27;).value;</span><br><span class="line">  bc.postMessage(&#123;from: &#x27;other&#x27;, msg&#125;);</span><br><span class="line"></span><br><span class="line">  var $div = document.createElement(&#x27;div&#x27;);</span><br><span class="line">  $div.textContent = &#x27;me: &#x27; + msg;</span><br><span class="line">  document.getElementById(&#x27;js-container&#x27;).appendChild($div);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">document.getElementById(&#x27;js-close&#x27;).addEventListener(&#x27;click&#x27;,function() &#123;</span><br><span class="line">    bc.close();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">document.getElementById(&#x27;js-open&#x27;).addEventListener(&#x27;click&#x27;, function() &#123;</span><br><span class="line">    broadcast();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>Service Worker</li></ol><p><a href="https://juejin.cn/post/6844903588691443725">https://juejin.cn/post/6844903588691443725</a></p><p><a href="https://juejin.cn/post/6844903811232825357#heading-3">参考链接</a></p><ol start="3"><li><p>LocalStorage</p><p>原理：使用LocalStorage能缓存数据，LocalStorage 变化时，会触发<code>storage</code>事件。通过监听<code>storage</code>事件可收到“通知”。</p><p>如果setItem的值是与之前的是一样的，不会触发。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&#x27;storage&#x27;, function (e) &#123;</span><br><span class="line">    if (e.key === &#x27;ctc-msg&#x27;) &#123;</span><br><span class="line">        const data = JSON.parse(e.newValue);</span><br><span class="line">        const text = &#x27;[receive] &#x27; + data.msg + &#x27; —— tab &#x27; + data.from;</span><br><span class="line">        console.log(&#x27;[Storage I] receive message:&#x27;, text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">mydata.st = +(new Date);</span><br><span class="line">window.localStorage.setItem(&#x27;ctc-msg&#x27;, JSON.stringify(mydata));</span><br></pre></td></tr></table></figure><ol start="4"><li>Shared Worker</li></ol></li></ol><ol start="4"><li><p>IndexedDB</p><p>全局性”（支持跨页面）的存储方案。例如 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FIndexedDB_API">IndexedDB</a> 或 cookie。</p><p>与 Shared Worker 方案类似，消息发送方将消息存至 IndexedDB 中；接收方（例如所有页面）则通过<strong>轮询</strong>去获取最新的信息。在这之前，我们先简单封装几个 IndexedDB 的工具方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">// 打开数据库连接：</span><br><span class="line">   function openStore() &#123;</span><br><span class="line">    const storeName = &#x27;ctc_aleinzhou&#x27;;</span><br><span class="line">       return new Promise(function (resolve, reject) &#123;</span><br><span class="line">        if (!(&#x27;indexedDB&#x27; in window)) &#123;</span><br><span class="line">               return reject(&#x27;don\&#x27;t support indexedDB&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">           const request = indexedDB.open(&#x27;CTC_DB&#x27;, 1);</span><br><span class="line">        request.onerror = reject;</span><br><span class="line">           request.onsuccess =  e =&gt; resolve(e.target.result);</span><br><span class="line">        request.onupgradeneeded = function (e) &#123;</span><br><span class="line">               const db = e.srcElement.result;</span><br><span class="line">            if (e.oldVersion === 0 &amp;&amp; !db.objectStoreNames.contains(storeName)) &#123;</span><br><span class="line">                   const store = db.createObjectStore(storeName, &#123;keyPath: &#x27;tag&#x27;&#125;);</span><br><span class="line">                store.createIndex(storeName + &#x27;Index&#x27;, &#x27;tag&#x27;, &#123;unique: false&#125;);</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">// 存储数据</span><br><span class="line">   function saveData(db, data) &#123;</span><br><span class="line">    return new Promise(function (resolve, reject) &#123;</span><br><span class="line">           const STORE_NAME = &#x27;ctc_aleinzhou&#x27;;</span><br><span class="line">           const tx = db.transaction(STORE_NAME, &#x27;readwrite&#x27;);</span><br><span class="line">           const store = tx.objectStore(STORE_NAME);</span><br><span class="line">           const request = store.put(&#123;tag: &#x27;ctc_data&#x27;, data&#125;);</span><br><span class="line">           request.onsuccess = () =&gt; resolve(db);</span><br><span class="line">           request.onerror = reject;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   //  查询/读取数据</span><br><span class="line">   function query(db) &#123;</span><br><span class="line">       const STORE_NAME = &#x27;ctc_aleinzhou&#x27;;</span><br><span class="line">       return new Promise(function (resolve, reject) &#123;</span><br><span class="line">           try &#123;</span><br><span class="line">               const tx = db.transaction(STORE_NAME, &#x27;readonly&#x27;);</span><br><span class="line">               const store = tx.objectStore(STORE_NAME);</span><br><span class="line">               const dbRequest = store.get(&#x27;ctc_data&#x27;);</span><br><span class="line">               dbRequest.onsuccess = e =&gt; resolve(e.target.result);</span><br><span class="line">               dbRequest.onerror = reject;</span><br><span class="line">           &#125;</span><br><span class="line">           catch (err) &#123;</span><br><span class="line">               reject(err);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   openStore().then(db =&gt; saveData(db, null))</span><br><span class="line">   </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 对于消息读取，可以在连接与初始化后轮询：</span><br><span class="line">openStore().then(db =&gt; saveData(db, null)).then(function (db) &#123;</span><br><span class="line">    setInterval(function () &#123;</span><br><span class="line">        query(db).then(function (res) &#123;</span><br><span class="line">            if (!res || !res.data) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            const data = res.data;</span><br><span class="line">            const text = &#x27;[receive] &#x27; + data.msg + &#x27; —— tab &#x27; + data.from;</span><br><span class="line">            console.log(&#x27;[Storage I] receive message:&#x27;, text);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;);</span><br><span class="line">// 要发送消息时，只需向 IndexedDB 存储数据即可：</span><br><span class="line">openStore().then(db =&gt; saveData(db, null)).then(function (db) &#123;</span><br><span class="line">    // …… 省略上面的轮询代码</span><br><span class="line">    // 触发 saveData 的方法可以放在用户操作的事件监听内</span><br><span class="line">    saveData(db, mydata);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>window.open + window.opener</p><p>原理：</p><p>window.open 方法打开一个页面会返回一个window的引用</p><p>被打开的页面window.opener 会记录打开他的页面的引用</p></li></ol><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 发送消息方</span><br><span class="line">// 过滤掉已经关闭的窗口</span><br><span class="line">childWins = childWins.filter(w =&gt; !w.closed);</span><br><span class="line">if (childWins.length &gt; 0) &#123;</span><br><span class="line">    mydata.fromOpenner = false;</span><br><span class="line">    childWins.forEach(w =&gt; w.postMessage(mydata));</span><br><span class="line">&#125;</span><br><span class="line">if (window.opener &amp;&amp; !window.opener.closed) &#123;</span><br><span class="line">    mydata.fromOpenner = true;</span><br><span class="line">    window.opener.postMessage(mydata);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 接收消息方</span><br><span class="line">window.addEventListener(&#x27;message&#x27;, function (e) &#123;</span><br><span class="line">    const data = e.data;</span><br><span class="line">    const text = &#x27;[receive] &#x27; + data.msg + &#x27; —— tab &#x27; + data.from;</span><br><span class="line">    console.log(&#x27;[Cross-document Messaging] receive message:&#x27;, text);</span><br><span class="line">    // 避免消息回传</span><br><span class="line">    if (window.opener &amp;&amp; !window.opener.closed &amp;&amp; data.fromOpenner) &#123;</span><br><span class="line">        window.opener.postMessage(data);</span><br><span class="line">    &#125;</span><br><span class="line">    // 过滤掉已经关闭的窗口</span><br><span class="line">    childWins = childWins.filter(w =&gt; !w.closed);</span><br><span class="line">    // 避免消息回传</span><br><span class="line">    if (childWins &amp;&amp; !data.fromOpenner) &#123;</span><br><span class="line">        childWins.forEach(w =&gt; w.postMessage(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h1 id="非同源页面通讯"><a href="#非同源页面通讯" class="headerlink" title="非同源页面通讯"></a>非同源页面通讯</h1><p>使用一个用户不可见的 iframe 作为“桥”。由于 iframe 与父页面间可以通过指定<code>origin</code>来忽略同源限制，因此可以在每个页面中嵌入一个 iframe。这些 iframe 由于使用的是一个 url，因此属于同源页面，其通信方式可以复用同源部分提到的各种方式。</p><p>需要在页面中监听 iframe 发来的消息，做相应的业务处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 业务页面代码 -- 监听信息 */</span><br><span class="line">window.addEventListener(&#x27;message&#x27;, function (e) &#123;</span><br><span class="line">    // …… do something</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/* 业务页面代码 -- 发送消息【iframe的window发送消息】 */</span><br><span class="line">window.frames[0].window.postMessage(mydata, &#x27;*&#x27;); </span><br></pre></td></tr></table></figure><p>iframe内可以选用上面的方法：这里示例用BroadcastChannel</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* iframe 内代码 */</span><br><span class="line">const bc = new BroadcastChannel(&#x27;AlienZHOU&#x27;);</span><br><span class="line">// 监听window的消息【收到来自页面的消息后】，在 iframe 间进行广播（发送消息）</span><br><span class="line">// iframe中的bc在这里充当中间人的角色</span><br><span class="line">window.addEventListener(&#x27;message&#x27;, function (e) &#123;</span><br><span class="line">    bc.postMessage(e.data);</span><br><span class="line">&#125;);   </span><br><span class="line"></span><br><span class="line">/* iframe 内代码 */</span><br><span class="line">// 对于收到的（iframe）广播消息，通知给所属的业务页面</span><br><span class="line">// iframe中的bc在这里充当中间人的角色</span><br><span class="line">bc.onmessage = function (e) &#123;</span><br><span class="line">    window.parent.postMessage(e.data, &#x27;*&#x27;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/6844903811232825357#">from</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;同源跨页&quot;&gt;&lt;a href=&quot;#同源跨页&quot; class=&quot;headerlink&quot; title=&quot;同源跨页&quot;&gt;&lt;/a&gt;同源跨页&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;BroadCast Channel&lt;/p&gt;
&lt;p&gt;兼容性：ie、safari on IOS 不兼容，chr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>项目遇到的问题记录</title>
    <link href="https://ms-yip.github.io/2022/12/29/%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://ms-yip.github.io/2022/12/29/%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-29T10:30:07.395Z</published>
    <updated>2022-12-29T10:30:07.395Z</updated>
    
    <content type="html"><![CDATA[<p>1.Syntax Error: TypeError: this.getOptions is not a function</p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220419190703151.png" alt="image-20220419190703151"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.Syntax Error: TypeError: this.getOptions is not a function&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/yeminshan/photos/raw/master/typro_img_upl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>设备设施代码</title>
    <link href="https://ms-yip.github.io/2022/12/29/%E8%AE%BE%E5%A4%87%E8%AE%BE%E6%96%BD%E4%BB%A3%E7%A0%81/"/>
    <id>https://ms-yip.github.io/2022/12/29/%E8%AE%BE%E5%A4%87%E8%AE%BE%E6%96%BD%E4%BB%A3%E7%A0%81/</id>
    <published>2022-12-29T10:30:07.393Z</published>
    <updated>2022-12-29T10:30:07.393Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>postcss</p><p>是一个用 JavaScript 工具和插件转换 CSS 代码的工具</p><p>检验CSS、支持变量和混合，转化CSS3的新特性语法、行内图片等。</p><p>它的工作模式是<strong>接收样式源代码并交由编译插件处理</strong>，最后输出CSS。通过PostCSS包含的很多功能强大的插件，可以让我们使用更新的CSS特性，保证更好的浏览器兼容性。</p><p>postcss不能单独使用，配合构建工具使用。</p><p>使用：</p><p><strong>postcss.config.js</strong> 来对 Postcss 进行配置</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;postcss&lt;/p&gt;
&lt;p&gt;是一个用 JavaScript 工具和插件转换 CSS 代码的工具&lt;/p&gt;
&lt;p&gt;检验CSS、支持变量和混合，转化CSS3的新特性语法、行内图片等。&lt;/p&gt;
&lt;p&gt;它的工作模式是&lt;strong&gt;接收样式源代码并交由编译插件处理
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>文件上传</title>
    <link href="https://ms-yip.github.io/2022/12/29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://ms-yip.github.io/2022/12/29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2022-12-29T10:30:07.392Z</published>
    <updated>2022-12-29T10:30:07.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h3 id="HTML-原生"><a href="#HTML-原生" class="headerlink" title="HTML 原生"></a>HTML 原生</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ajaxifr&quot;</span> <span class="attr">name</span>=<span class="string">“file”</span> <span class="attr">type</span>=<span class="string">“post”</span> <span class="attr">target</span>=<span class="string">“fileUpload”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ajaxifr&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span>&lt;<span class="attr">input</span> <span class="attr">id</span>=<span class="string">&quot;filesubmit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;fileUpload&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery-form"><a href="#jQuery-form" class="headerlink" title="jQuery.form"></a>jQuery.form</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;ajaxifr&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ajaxifr&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">oncick</span>=<span class="string">&quot;upload&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&#x27;#ajaxifr&#x27;</span>).<span class="title function_">ajaxForm</span>(&#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line"><span class="attr">target</span>: <span class="string">&quot;#fileUpload&quot;</span>,</span><br><span class="line"><span class="attr">url</span>: <span class="string">&quot;XXXXURL&quot;</span>,</span><br><span class="line"><span class="attr">beforeSend</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">        <span class="attr">uploadProgress</span>: <span class="keyword">function</span> (<span class="params">event, position, total, percentComplete</span>) &#123;&#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">        <span class="attr">complete</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件上传&quot;&gt;&lt;a href=&quot;#文件上传&quot; class=&quot;headerlink&quot; title=&quot;文件上传&quot;&gt;&lt;/a&gt;文件上传&lt;/h1&gt;&lt;h3 id=&quot;HTML-原生&quot;&gt;&lt;a href=&quot;#HTML-原生&quot; class=&quot;headerlink&quot; title=&quot;HTM
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>批处理</title>
    <link href="https://ms-yip.github.io/2022/12/29/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    <id>https://ms-yip.github.io/2022/12/29/%E6%89%B9%E5%A4%84%E7%90%86/</id>
    <published>2022-12-29T10:30:07.391Z</published>
    <updated>2022-12-29T10:30:07.391Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo 是否执行install操作[y/n]:</span><br><span class="line">set /p o=</span><br><span class="line">if &quot;%o%&quot; == &quot;y&quot; (</span><br><span class="line">  call npm install</span><br><span class="line">  call npm run serve</span><br><span class="line">) else if &quot;%o%&quot; == &quot;n&quot; (</span><br><span class="line">  call npm -v</span><br><span class="line">  call npm run serve</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>搭建npm私库</title>
    <link href="https://ms-yip.github.io/2022/12/29/%E6%90%AD%E5%BB%BAnpm%E7%A7%81%E5%BA%93/"/>
    <id>https://ms-yip.github.io/2022/12/29/%E6%90%AD%E5%BB%BAnpm%E7%A7%81%E5%BA%93/</id>
    <published>2022-12-29T10:30:07.391Z</published>
    <updated>2022-12-29T10:30:07.392Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://bbs.huaweicloud.com/blogs/238859">centos基础</a></p><p>1.安装git</p><p><a href="https://blog.csdn.net/xwj1992930/article/details/96428998">https://blog.csdn.net/xwj1992930/article/details/96428998</a></p><p><a href="https://juejin.cn/post/6844904196651630599">https://juejin.cn/post/6844904196651630599</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://bbs.huaweicloud.com/blogs/238859&quot;&gt;centos基础&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.安装git&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/xwj1992930/article/d
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://ms-yip.github.io/2022/12/29/%E5%B0%8F%E7%99%BD%E5%AD%A6%E4%B9%A0%E7%94%A8%E7%94%B5%E8%84%91/"/>
    <id>https://ms-yip.github.io/2022/12/29/%E5%B0%8F%E7%99%BD%E5%AD%A6%E4%B9%A0%E7%94%A8%E7%94%B5%E8%84%91/</id>
    <published>2022-12-29T10:30:07.390Z</published>
    <updated>2022-12-29T10:30:07.390Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 小白学习用电脑</span><br><span class="line">date: 2020-08-20 15:41:02</span><br><span class="line">tags: []</span><br><span class="line">categories: [&#x27;windows&#x27;]</span><br></pre></td></tr></table></figure><h3 id="window添加右键功能"><a href="#window添加右键功能" class="headerlink" title="window添加右键功能"></a>window添加右键功能</h3><ol><li>添加txt文件，并添加内容如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">; Open files</span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\Open with VS Code]</span><br><span class="line">@=&quot;Edit with VS Code&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\ymshan\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe,0&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\Open with VS Code\command]</span><br><span class="line">@=&quot;\&quot;C:\\Users\\ymshan\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot;</span><br><span class="line"></span><br><span class="line">; This will make it appear when you right click ON a folder</span><br><span class="line">; The &quot;Icon&quot; line can be removed if you don&#x27;t want the icon to appear</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\vscode]</span><br><span class="line">@=&quot;Open Folder as VS Code Project&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;\&quot;C:\\Users\\ymshan\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot;,0&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\vscode\command]</span><br><span class="line">@=&quot;\&quot;C:\\Users\\ymshan\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; This will make it appear when you right click INSIDE a folder</span><br><span class="line">; The &quot;Icon&quot; line can be removed if you don&#x27;t want the icon to appear</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\vscode]</span><br><span class="line">@=&quot;Open Folder as VS Code Project&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;\&quot;C:\\Users\\ymshan\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot;,0&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\vscode\command]</span><br><span class="line">@=&quot;\&quot;C:\\Users\\ymshan\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;</span><br></pre></td></tr></table></figure><p>其中：C:\Users\ymshan\AppData\Local\Programs\Microsoft VS Code\Code.exe为启用程序的路径</p><ol start="2"><li><p>文件保存后改为reg格式</p></li><li><p>执行即可。</p></li></ol><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ol><li><p>win + r 输入 regdit 打开注册表注册表编辑器</p></li><li><p>寻找路径：计算机\HKEY_CLASSES_ROOT\Directory\shell\</p></li><li><p>即可看见刚刚添加的vscode注册表项</p></li><li><p>点击查看：<strong>其实可以直接在这里加</strong></p><p>名称： 默认   类型: REG _SZ   数据: Open With   VSCode</p></li></ol><p>​       名称：Icon   类型: REG _SZ   数据: “C:\Users\ymshan\AppData\Local\Programs\Microsoft VS Code\Code.exe”,0</p><h1 id="添加系统变量"><a href="#添加系统变量" class="headerlink" title="添加系统变量"></a>添加系统变量</h1><p>有点貌似添加全局变量</p><p>我的电脑–右键–属性–高级系统设置–环境变量</p><p>先添加系统变量。如JAVA_HOME：程序文件所在的目录</p><p>然后用户变量path追加新添加的系统变量,分号(半角;)做分割,双%引用添加的系统变量。如%JAVA_HOME%</p><h1 id="生成SSH"><a href="#生成SSH" class="headerlink" title="生成SSH"></a>生成SSH</h1><p> <a href="https://www.jianshu.com/p/259773014e03">生成ssh</a></p><h1 id="typro-上传图片配置-link"><a href="#typro-上传图片配置-link" class="headerlink" title="typro 上传图片配置 link"></a>typro 上传图片配置 <a href="https://www.jianshu.com/p/d7bf3f9da6db">link</a></h1><ol><li><p>安装link 安装步骤安装，以及设置config</p></li><li><p>设置完成 picgo upload <img-path> 测试配置</p></li><li><p>在typro 首选项设置设置测试成功的命令（不需要加上图片地址）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;picBed&quot;: &#123;</span><br><span class="line">    &quot;current&quot;: &quot;gitee&quot;,</span><br><span class="line">    &quot;uploader&quot;: &quot;gitee&quot;,</span><br><span class="line">    &quot;smms&quot;: &#123;</span><br><span class="line">      &quot;token&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;gitee&quot;: &#123;</span><br><span class="line">      &quot;branch&quot;: &quot;master&quot;,</span><br><span class="line">      &quot;customPath&quot;: &quot;yearQuarter&quot;,</span><br><span class="line">      &quot;customUrl&quot;: &quot;&quot;,</span><br><span class="line">      &quot;path&quot;: &quot;typro_img_upload&quot;,</span><br><span class="line">      &quot;repo&quot;: &quot;yeminshan/photos&quot;,</span><br><span class="line">      &quot;token&quot;: &quot;8b3f83992c476dcc456a2dc569c81872&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;list&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;SM.MS图床&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;smms&quot;,</span><br><span class="line">        &quot;visible&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;腾讯云COS&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;tcyun&quot;,</span><br><span class="line">        &quot;visible&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;GitHub图床&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;github&quot;,</span><br><span class="line">        &quot;visible&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;七牛图床&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;qiniu&quot;,</span><br><span class="line">        &quot;visible&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;Imgur图床&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;imgur&quot;,</span><br><span class="line">        &quot;visible&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;阿里云OSS&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;aliyun&quot;,</span><br><span class="line">        &quot;visible&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;又拍云图床&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;upyun&quot;,</span><br><span class="line">        &quot;visible&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;gitee&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;gitee&quot;,</span><br><span class="line">        &quot;visible&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;shortKey&quot;: &#123;</span><br><span class="line">      &quot;picgo:upload&quot;: &#123;</span><br><span class="line">        &quot;enable&quot;: true,</span><br><span class="line">        &quot;key&quot;: &quot;CommandOrControl+Shift+P&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;upload&quot;,</span><br><span class="line">        &quot;label&quot;: &quot;快捷上传&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;server&quot;: &#123;</span><br><span class="line">      &quot;enable&quot;: true,</span><br><span class="line">      &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">      &quot;port&quot;: 36677</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;privacyEnsure&quot;: true,</span><br><span class="line">    &quot;showUpdateTip&quot;: true,</span><br><span class="line">    &quot;rename&quot;: false</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;picgoPlugins&quot;: &#123;</span><br><span class="line">    &quot;picgo-plugin-gitee-uploader&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;debug&quot;: true,</span><br><span class="line">  &quot;PICGO_ENV&quot;: &quot;GUI&quot;,</span><br><span class="line">  &quot;needReload&quot;: false,</span><br><span class="line">  &quot;picgo-plugin-gitee-uploader&quot;: &#123;</span><br><span class="line">    &quot;lastSync&quot;: &quot;2021-10-20 03:17:30&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_42454941/article/details/117263945">window管理多个ssh</a></p><h2 id="Mac-移动硬盘读取问题"><a href="#Mac-移动硬盘读取问题" class="headerlink" title="Mac 移动硬盘读取问题"></a>Mac 移动硬盘读取问题</h2><ol><li><p>diskutil list</p></li><li><p>diskutil mount /dev/XXX</p></li><li><p>sudo pkill -f fsck 杀死进程</p></li><li><p>查看  ps aux | grep fsck </p></li><li><p>修复 fsck_exfat -y -x /dev/XXX</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>华为云开发者认证学习</title>
    <link href="https://ms-yip.github.io/2022/12/29/%E5%8D%8E%E4%B8%BA%E4%BA%91%E5%BC%80%E5%8F%91%E8%80%85%E8%AE%A4%E8%AF%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://ms-yip.github.io/2022/12/29/%E5%8D%8E%E4%B8%BA%E4%BA%91%E5%BC%80%E5%8F%91%E8%80%85%E8%AE%A4%E8%AF%81%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-12-29T10:30:07.389Z</published>
    <updated>2022-12-29T10:30:07.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="华为云"><a href="#华为云" class="headerlink" title="华为云"></a>华为云</h1><h2 id="系统总览"><a href="#系统总览" class="headerlink" title="系统总览"></a>系统总览</h2><h3 id="架构原则"><a href="#架构原则" class="headerlink" title="架构原则"></a>架构原则</h3><p>弹性、分布式、高可用、自动化、自服务</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>单体架构：局限，不可隔离和自治</p><p>微服务架构：细粒度扩容；独立性和敏捷性更好，架构持续演进更容易</p><p>Serverless架构：（无服务器架构）更轻量化、更快弹性、更低成本</p><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>Kubernetes</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;华为云&quot;&gt;&lt;a href=&quot;#华为云&quot; class=&quot;headerlink&quot; title=&quot;华为云&quot;&gt;&lt;/a&gt;华为云&lt;/h1&gt;&lt;h2 id=&quot;系统总览&quot;&gt;&lt;a href=&quot;#系统总览&quot; class=&quot;headerlink&quot; title=&quot;系统总览&quot;&gt;&lt;/a&gt;系统总
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>啊TODOLIST</title>
    <link href="https://ms-yip.github.io/2022/12/29/%E5%95%8ATODOLIST/"/>
    <id>https://ms-yip.github.io/2022/12/29/%E5%95%8ATODOLIST/</id>
    <published>2022-12-29T10:30:07.389Z</published>
    <updated>2022-12-29T10:30:07.389Z</updated>
    
    <content type="html"><![CDATA[<p>now：</p><ol><li>梯形css</li></ol><ol><li>搭建git 平台进行代码管理</li><li>自动化部署，jekins + 自动发布</li><li>device el-input 只输入数字指令</li><li>测试不加上locale.i18n((key, value) =&gt; i18n.t(key, value)); 时 element多语言切换是不是不生效</li><li>profill</li></ol><p>学习资源</p><p>1.<strong>twin-layout</strong></p><ol><li>列表*</li><li>动态表单</li><li>填单提交</li><li>校验</li><li>mock数据</li><li>倒置列表</li><li>小程序消息通知机制原理，实现，授权</li></ol><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220303200148325.png" alt="image-20220303200148325"></p><p>el-switch  改成有前置条件更改状态</p><p>组件</p><p>1.树 只展示， 加展开/搜索</p><p>1.0 有/没有增删改功能</p><p>1.1 静态数据</p><p>1.2 接口请求/有刷新功能</p><p>1.2.1 完整树显示</p><p>1.2.2 懒加载</p><p>1.3 节点单选/多选</p><p>2.动态表单</p><p>2.1 行内/排列/ 样式</p><p>3.表格</p><table><thead><tr><th>短期</th><th>长期</th><th>规划</th></tr></thead><tbody><tr><td><del>发布和上传vpsdoc-cli</del></td><td></td><td>vue路线：2/3源码阅读/常用ui框架阅读</td></tr><tr><td>发布queen-ui并上传</td><td></td><td>uniapp跨端</td></tr><tr><td>完善doc-template项目</td><td></td><td>JS基础 、犀牛书/es6/esnext、TS</td></tr><tr><td><del>mock数据问题集成进项目</del></td><td></td><td>React：文档入门/全家桶/demo项目源码学习（大师）/ui框架源码/跨端</td></tr><tr><td>admin-template项目（feelview-h5）</td><td></td><td></td></tr><tr><td>qiankun微服务实践方案</td><td></td><td></td></tr><tr><td>微服务实践脚手架</td><td></td><td></td></tr><tr><td>其他微服务实现方案</td><td></td><td></td></tr><tr><td>多页面项目实现方案</td><td></td><td></td></tr><tr><td>犀牛书研读</td><td></td><td></td></tr><tr><td>ES6+ES next</td><td></td><td></td></tr><tr><td>TS</td><td></td><td></td></tr><tr><td>Vue3</td><td></td><td></td></tr><tr><td>react</td><td></td><td></td></tr><tr><td>code review</td><td></td><td></td></tr><tr><td>异步操作</td><td></td><td></td></tr><tr><td>现有项目截取接口数据写mock</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>功能</th><th>细则</th><th></th></tr></thead><tbody><tr><td>督办单</td><td>1.批量关闭不要<br />2.详情弹窗/多tab/混合form和表格<br />3.关闭 2 + btn</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;now：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;梯形css&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;搭建git 平台进行代码管理&lt;/li&gt;
&lt;li&gt;自动化部署，jekins + 自动发布&lt;/li&gt;
&lt;li&gt;device el-input 只输入数字指令&lt;/li&gt;
&lt;li&gt;测试不加上lo
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="https://ms-yip.github.io/2022/12/29/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://ms-yip.github.io/2022/12/29/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2022-12-29T10:30:07.388Z</published>
    <updated>2022-12-29T10:30:07.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h1><p>引入</p><p>从输⼊ URL 到⻚⾯加载完成，发⽣了什么？</p><ol><li>⽤户输⼊网址</li><li>浏览器根据 DNS 服务器得到域名的 IP 地址</li><li>和IP地址建⽴TCP链接发送HTTP请求 </li><li>服务器接收请求，查库，读⽂件等，拼接好返回的HTTP响应</li><li>浏览器得到返回内容（ ⾸屏HTML，只有 HTML 格式浏览器才能正确解析），开始渲染过程</li><li>解析html为dom </li><li>解析css 为css-tree</li><li>dom+ css ⽣成render-tree 绘图</li><li>加载script的js⽂件 </li><li>执⾏js</li></ol><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><ol><li>查看dns缓存</li><li>本地没缓存，发起dns请求，向本地配置的DNS服务器发请求(递归)</li></ol><p>优化： prefetch 预获取，⽐如使⽤了cdn的域名</p><p>大致分为：</p><ol><li><p>文件加载优化</p><ol><li>加载css文件</li><li>HTTP协议细节</li><li>从输入url到页面渲染过程</li><li>大厂怎么上线前端代码</li></ol></li><li><p>代码执行优化</p><ol><li>节流/防抖</li><li>重绘回流</li><li>ssr 执行更少DOM操作更少</li></ol></li></ol><p>HTTP/1.0中http请求发送同步创建TCP连接，http请求发送到服务端，服务端响应之后，该TCP连接也关闭。</p><p>HTTP/1.1 中可以某种方式声明保持TCP连接，可以串行多次请求传输。这时TCP连接需要三次握手消耗。第二次请求没有三次握手的消耗。</p><p>HTTP/1.2 中同一个TCP连接可以并发传输HTTP请求。</p><p>三次握手：</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210819104304603.png" alt="image-20210819104304603"></p><p>少加载文件</p><p>1.合理利用浏览器缓存</p><p>雅虎军规</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823130247947.png" alt="image-20210823130247947"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823130341779.png" alt="image-20210823130341779"></p><h4 id="前端性能监控"><a href="#前端性能监控" class="headerlink" title="前端性能监控"></a><a href="https://www.jianshu.com/p/1355232d525a">前端性能监控</a></h4><p>performance.getEntriesByType(“navigation”)</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823131231630.png" alt="image-20210823131231630">LightHouse 谷歌插件</p><p>npm install -g lighthouse </p><p>节流防抖 <img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823131625663.png" alt=""></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823132104720.png" alt="image-20210823132104720"></p><p>少操作dom</p><p>重绘 回流</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823132416264.png" alt="image-20210823132416264"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823132437975.png" alt="image-20210823132437975"></p><p>lazy-load</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823132600065.png" alt="image-20210823132600065"></p><p>vue</p><p>1.vi-if、v-show</p><p>2.与渲染无关的数据不放在data上，data 不要嵌套太多层</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823133443039.png" alt="image-20210823133443039"></p><p>react</p><p><strong><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823133515803.png" alt="image-20210823133515803"></strong></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823133537953.png" alt="image-20210823133537953"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823133612260.png" alt="image-20210823133612260"></p><p>移动端长列表 dom显示数量控制再窗口可见的3个page数据量</p><p>实现虚拟滚动效果</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823134025541.png" alt="image-20210823134025541"></p><p>web works。</p><p>vue</p><p><img src="C:%5CUsers%5Cymshan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210823134724237.png" alt="image-20210823134724237"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端性能优化&quot;&gt;&lt;a href=&quot;#前端性能优化&quot; class=&quot;headerlink&quot; title=&quot;前端性能优化&quot;&gt;&lt;/a&gt;前端性能优化&lt;/h1&gt;&lt;p&gt;引入&lt;/p&gt;
&lt;p&gt;从输⼊ URL 到⻚⾯加载完成，发⽣了什么？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;⽤户输⼊网址&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端安全</title>
    <link href="https://ms-yip.github.io/2022/12/29/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    <id>https://ms-yip.github.io/2022/12/29/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/</id>
    <published>2022-12-29T10:30:07.387Z</published>
    <updated>2022-12-29T10:30:07.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx-部署相关"><a href="#nginx-部署相关" class="headerlink" title="nginx 部署相关"></a>nginx 部署相关</h1><p>1.隐藏nginx 版本信息</p><p>server_tokens off;</p><p>2.xss攻击防范</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nginx-部署相关&quot;&gt;&lt;a href=&quot;#nginx-部署相关&quot; class=&quot;headerlink&quot; title=&quot;nginx 部署相关&quot;&gt;&lt;/a&gt;nginx 部署相关&lt;/h1&gt;&lt;p&gt;1.隐藏nginx 版本信息&lt;/p&gt;
&lt;p&gt;server_tokens of
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>低代码平台笔记</title>
    <link href="https://ms-yip.github.io/2022/12/29/%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ms-yip.github.io/2022/12/29/%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-12-29T10:30:07.386Z</published>
    <updated>2022-12-29T10:30:07.386Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ffc32091346968e50aae5ebfa347304fe3849d9056e7d2a622110f677c0b9e78">861a498f247eaa4e2a0e05ff5af6574ed09d8da929dd5d753abbea56389744a02acb8575de8707f46b3a1f24fce434c3448c66295ef7429d2482dd73f45acdb443d13afa6f3f1b44a287db51e8750f2a608858205fde9f69b8a1d39977bbf84c1c0ab4aff0eca4ed61fcc3f5555acefb1656b651a440deff9fd2f29ff67c5bf6d1b1dec2a099d6928d0f7355b8e491540dfcc4830351d6b95e0558bf3db330f3289f5eb08923b44113c491c49a379a7c6e04f212719cd373d657726a9e56ee495d3089309bb0245642e50703aff7c193e02ab15acda1ad2ec9753ab079aab99d2966bcda2a402fba00825a04c2ef79e045334011383724f7a3e104ac7f932313190c9a7c451d09a0647a8c5a57f0dea7595f51cbfe2eadf79fd7b44a068164caa3667609f9c8d9df3947e0d10e9140cf9ce1cab1588242a37cbdbc596f98f025f7009e013f68a94c4a1755c8f38d31fc257b225d6085d1ae34dc7c4aebe022747aa763295121245fd1f00b153407aea05e133e219425e5540d6a64a05fc86f2c30febf964077661b606880c04e79cdc24a12de8e4f4a23256177cd98a908d9f3bf650816fe54311f541650ad8b098a67fea7962b43d571708cb2796f55126d2fe4090d5692075645b2ce5c3ff790998170db32c178341e27716923ffc4950d98123cd1cac484bc2fbf305cf2bda78b88ec693db8e259177a12673ff9997ab03c53c920c83d2d06404a3ab73d55b8915d2abf5ce94b1fa3edaf108f4b3e068eb3ea807ba84c6d56f949915a41863b82fcc1e9118eb7f470dc0335e3156583d2af1c86fa91b08afa01d4fd0d6bc180ba55d7e122e3175ec919137130f260ff4e222829a2a159aebccace660503086bbf1549f3b5923b57bc8d754158f31c6315522875a1049a39c78b99e7de4c5a5980a4eeba3b0681b9a431d433382ece6873d38f389fe3169daddeddbc3e877603b35949c15e852062c7cf9ca5428794e9016a31a114412e3f02e05d0bc5219ee751dde224e8bb0531f6426fcf8afec92049914ed842744cab77148de634adbb03c85f84e947d4a38e9f4c680926cecf247dcdf32c6480c56e85f3a5b4f68cecdfe0554218c05f9610888169eaaf124c2af15cc6c848f28bd77fe44c605acb5e5bdf1fe1cc92d9e154619d62cd9f6d09e86590885b1496586724bcefd30df43691150b2184b71cc0fa8543cbe35f6c0f4a27bfaa5e306eacc45d99a7435aa97cc1395a3f84283904ac7b965e6fadd6cac4f1a9dd64ec7f4f644e7977426ece585e8bef1a0da1d08704916bbe456945179b7d266cdbefbb26b1888676f027692c8597865ff4aa155f1c8043ee7d0bf3dc7225f3b53661800a583700a8f4064693cbd796f088d75dfa05b704c198554c582bd29f00a0351a191efe073f2050a06e475bdc33d43a80dc5104a38c83dc5d8f3dc03e20651bef83711d9a58b9778abfc7dbef3ddbd88df5c9f8476b73b65fdace57f6748cce3ed33f782ef90382ecf72b02f53fce19569c4eb9521e608e55ba3351c0a81cef7656932b6750c7f7ddc5eb67eb2012a3e8623d7c60cdb0a233fd62ec2af2e03626a40a085b6079e7c3eab8d815339cd57d3def5e89f2c35d0f72dd908f689fa1af5eead5cfb73b3462826f695c356049718d5aeacaf7065c614e9e0936b004f7ec987eb451c7bfe0af52ff8bcc4dff5aed093489ce1eed077c01e022f1bc554e910c00986306fd89558389464c27f42d4996af2c0dd7a461e0bbc1712af9eba7b977b027d0b3a89700b7931fe55621eb4db1783999aad1ff2f5984001d21e4c597e12afa5c7e2a82727e8c2850441bcaa88a5a344d5eca402ccdca7311eddbede04aa88c77591c5aa4f09808e141949f806280149099e878556ee430e518e69d9513e9f24282ff46ab8579d43dc30dcaf06aca36b86f6abc97f942b6084eb68237efb930e92874f34b370dd0ba5803ce5721bd7a47f6fd2cabface7e13a129985d2d30c104645948d01b66a8e9620c9bcc36e8e91e19015c00a589e606fbd9d258308fc7aff33e84a6f1702db4b9e230330ba4657506413642c973daf23d7a015ed2a7fd64328fc7d2ecbddd9009202378c99504e131997ace913aab1105d7934e9f10434c06e7a50dcc970ec5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>从0搭建脚手架</title>
    <link href="https://ms-yip.github.io/2022/12/29/%E4%BB%8E0%E6%90%AD%E5%BB%BA%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <id>https://ms-yip.github.io/2022/12/29/%E4%BB%8E0%E6%90%AD%E5%BB%BA%E8%84%9A%E6%89%8B%E6%9E%B6/</id>
    <published>2022-12-29T10:30:07.385Z</published>
    <updated>2022-12-29T10:30:07.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用库介绍"><a href="#常用库介绍" class="headerlink" title="常用库介绍"></a>常用库介绍</h1><ol><li><p>commander-自定义命令行指令 【可处理控制台命令的工具】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env node</span><br><span class="line"></span><br><span class="line">const program = require(&#x27;commander&#x27;)</span><br><span class="line">const &#123;version&#125; = require(&#x27;../src/config&#x27;)</span><br><span class="line">program</span><br><span class="line">  .name(&#x27;mcli&#x27;)</span><br><span class="line">  .description(&#x27;this is a fast tools to init a program project&#x27;)</span><br><span class="line">  .version(version, &#x27;-v, --version&#x27;)</span><br><span class="line">  .command(&#x27;init &lt;name&gt;&#x27;) // 定义命令行指令</span><br><span class="line">  .alias(&#x27;i&#x27;) // 指令别名</span><br><span class="line">  .description(&#x27;init a new project&#x27;) //描述，将在help的时候展示</span><br><span class="line">  .option(&#x27;-t, --theme &lt;themename&gt;&#x27;, &#x27;初始化使用的主题&#x27;, &#x27;default&#x27;) // 定义参数, 短定义，长定义，描述，默认值</span><br><span class="line">  .usage(&#x27;&lt;commands&gt; [options]&#x27;) // 使用方式介绍</span><br><span class="line">  .action(name =&gt; &#123; //定义一个callback函数</span><br><span class="line">      // 打印命令行输入的值</span><br><span class="line">    console.log(&quot;你想创建的项目名是：&quot; + name)</span><br><span class="line">    console.log(process.argv) // 返回数组 process.argv就是用户在命令行中传入的参数</span><br><span class="line">  &#125;)</span><br><span class="line">  .parse()// 解析命令行</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>chalk-命令行美化工具 【可改变输出log颜色的工具】</p></li></ol><table><thead><tr><th></th><th></th><th>color</th><th>bgcolor</th></tr></thead><tbody><tr><td>reset</td><td>重置当前样式</td><td>black</td><td>bgBlack</td></tr><tr><td>bold</td><td>使文本加粗</td><td>red</td><td>bgRed</td></tr><tr><td>dim</td><td>使文本具有较低的不透明度</td><td>green</td><td>bgGreen</td></tr><tr><td>italic</td><td>使文本斜体</td><td>yellow</td><td>bgYellow</td></tr><tr><td>underline</td><td>下划线</td><td>blue</td><td>bgBlue</td></tr><tr><td>overline</td><td>上划线</td><td>magenta</td><td>bgMagenta</td></tr><tr><td>inverse</td><td>反转背景和前景色</td><td>cyan</td><td>bgCyan</td></tr><tr><td>hidden</td><td>打印文本但不可见</td><td>white</td><td>bgWhite</td></tr><tr><td>strikethrough</td><td>通过文本中心放置一条水平线</td><td>blackBright</td><td>bgBlackBright</td></tr><tr><td>visible</td><td></td><td>redBright</td><td>bgRedBright</td></tr><tr><td></td><td></td><td>greenBright</td><td>bgGreenBright</td></tr><tr><td></td><td></td><td>yellowBright</td><td>bgYellowBright</td></tr><tr><td></td><td></td><td>blueBright</td><td>bgBlueBright</td></tr><tr><td></td><td></td><td>magentaBright</td><td>bgMagentaBright</td></tr><tr><td></td><td></td><td>cyanBright</td><td>bgCyanBright</td></tr><tr><td></td><td></td><td>whiteBright</td><td>bgWhiteBright</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="property">red</span>.<span class="property">bold</span>.<span class="title function_">bgWhite</span>(<span class="string">&#x27;Hello World&#x27;</span>)); <span class="comment">// 常规用法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chalk<span class="string">`&#123;red.bold.bgWhite Hello World&#125;`</span>); <span class="comment">// 模板用法</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>inquirer-命令行交互工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">const inquirer = require(&#x27;inquirer&#x27;)</span><br><span class="line">inquirer.prompt([</span><br><span class="line">  &#123;</span><br><span class="line">    type: &#x27;input&#x27;, // 【type：input,confirm,list(选择),rawlist,checkbox,password...】</span><br><span class="line">    name: &#x27;name&#x27;, // key 名，存入的对应变量</span><br><span class="line">    message: &#x27;Your name&#x27;, // 提示信息</span><br><span class="line">    default: &#x27;my-node-cli&#x27; // 默认值</span><br><span class="line">  &#125;</span><br><span class="line">]).then(answers =&gt; &#123;</span><br><span class="line">console.log(answers)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> // 询问用户是否确定要覆盖</span><br><span class="line">      let &#123; action &#125; = await inquirer.prompt([</span><br><span class="line">        &#123;</span><br><span class="line">          name: &#x27;action&#x27;,</span><br><span class="line">          type: &#x27;list&#x27;,</span><br><span class="line">          message: &#x27;Target directory already exists Pick an action:&#x27;,</span><br><span class="line">          choices: [</span><br><span class="line">            &#123;</span><br><span class="line">              name: &#x27;Overwrite&#x27;,</span><br><span class="line">              value: &#x27;overwrite&#x27;</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">              name: &#x27;Cancel&#x27;,</span><br><span class="line">              value: false</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">      if (!action) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125; else if (action === &#x27;overwrite&#x27;) &#123;</span><br><span class="line">        // 移除已存在的目录</span><br><span class="line">        console.log(`\r\nRemoving...`)</span><br><span class="line">        await fs.remove(targetAir)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ora-命令行loading 动效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const ora = require(&#x27;ora&#x27;)</span><br><span class="line">// 自定义文本信息</span><br><span class="line">const message = &#x27;Loading unicorns&#x27;</span><br><span class="line">// 初始化</span><br><span class="line">const spinner = ora(message);</span><br><span class="line">// 开始加载动画</span><br><span class="line">spinner.start();</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    // 修改动画样式</span><br><span class="line"></span><br><span class="line">    // Type: string</span><br><span class="line">    // Default: &#x27;cyan&#x27;</span><br><span class="line">    // Values: &#x27;black&#x27; | &#x27;red&#x27; | &#x27;green&#x27; | &#x27;yellow&#x27; | &#x27;blue&#x27; | &#x27;magenta&#x27; | &#x27;cyan&#x27; | &#x27;white&#x27; | &#x27;gray&#x27;</span><br><span class="line">    spinner.color = &#x27;red&#x27;;    </span><br><span class="line">    spinner.text = &#x27;Loading rainbows&#x27;;</span><br><span class="line"></span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        // 加载状态修改</span><br><span class="line">        spinner.stop() // 停止</span><br><span class="line">        spinner.succeed(&#x27;Loading succeed&#x27;); // 成功 ✔</span><br><span class="line">        // spinner.fail(text?);  失败 ✖</span><br><span class="line">        // spinner.warn(text?);  提示 ⚠</span><br><span class="line">        // spinner.info(text?);  信息 ℹ</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;, 2000);</span><br></pre></td></tr></table></figure></li><li><p>cross-spawn-跨平台 shell 工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env node </span><br><span class="line"></span><br><span class="line">const spawn = require(&#x27;cross-spawn&#x27;);</span><br><span class="line">const chalk = require(&#x27;chalk&#x27;)</span><br><span class="line"></span><br><span class="line">// 定义需要按照的依赖</span><br><span class="line">const dependencies = [&#x27;vue&#x27;, &#x27;vuex&#x27;, &#x27;vue-router&#x27;];</span><br><span class="line"></span><br><span class="line">// 执行安装</span><br><span class="line">const child = spawn(&#x27;npm&#x27;, [&#x27;install&#x27;, &#x27;-D&#x27;].concat(dependencies), &#123; </span><br><span class="line">    stdio: &#x27;inherit&#x27; </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 监听执行结果</span><br><span class="line">child.on(&#x27;close&#x27;, function(code) &#123;</span><br><span class="line">    // 执行失败</span><br><span class="line">    if(code !== 0) &#123;</span><br><span class="line">        console.log(chalk.red(&#x27;Error occurred while installing dependencies!&#x27;));</span><br><span class="line">        process.exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    // 执行成功</span><br><span class="line">    else &#123;</span><br><span class="line">        console.log(chalk.cyan(&#x27;Install finished&#x27;))   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>文件操作-覆盖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// lib/create.js</span><br><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">const fs = require(&#x27;fs-extra&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = async function (name, options) &#123;</span><br><span class="line">  // 执行创建命令</span><br><span class="line"></span><br><span class="line">  // 当前命令行选择的目录</span><br><span class="line">  const cwd  = process.cwd(); // 获取node.js流程的当前工作目录</span><br><span class="line">  // 需要创建的目录地址</span><br><span class="line">  const targetAir  = path.join(cwd, name)</span><br><span class="line"></span><br><span class="line">  // 目录是否已经存在？</span><br><span class="line">  if (fs.existsSync(targetAir)) &#123;</span><br><span class="line"></span><br><span class="line">    // 是否为强制创建？</span><br><span class="line">    if (options.force) &#123;</span><br><span class="line">      await fs.remove(targetAir)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // TODO：询问用户是否确定要覆盖</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>figlet打印logo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// bin/cli.js</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .on(&#x27;--help&#x27;, () =&gt; &#123;</span><br><span class="line">    // 使用 figlet 绘制 Logo</span><br><span class="line">    console.log(&#x27;\r\n&#x27; + figlet.textSync(&#x27;zhurong&#x27;, &#123;</span><br><span class="line">      font: &#x27;Ghost&#x27;,</span><br><span class="line">      horizontalLayout: &#x27;default&#x27;,</span><br><span class="line">      verticalLayout: &#x27;default&#x27;,</span><br><span class="line">      width: 80,</span><br><span class="line">      whitespaceBreak: true</span><br><span class="line">    &#125;));</span><br><span class="line">    // 新增说明信息</span><br><span class="line">    console.log(`\r\nRun $&#123;chalk.cyan(`roc &lt;command&gt; --help`)&#125; show details\r\n`)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>如何获取版本信息</p><p>假设模板上传至github远程仓库</p><p>github 提供了</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fapi.github.com%2Forgs%2Fzhurong-cli%2Frepos">api.github.com/orgs/zhuron…</a> 接口获取模板信息</li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fapi.github.com%2Frepos%2Fzhurong-cli%2F%24%7Brepo%7D%2Ftags">api.github.com/repos/zhuro…</a> 接口获取版本信息</li></ul><p>我们在 lib 目录下创建一个 http.js 专门处理模板和版本信息的获取</p></li><li><p>download-git-repo 下载远程模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const util = require(&#x27;util&#x27;)</span><br><span class="line">const downloadGitRepo = require(&#x27;download-git-repo&#x27;) // 不支持 Promise</span><br><span class="line"></span><br><span class="line">// 下载远程模板</span><br><span class="line">  // 1）拼接下载地址</span><br><span class="line">  // 2）调用下载方法</span><br><span class="line">  async download(repo, tag)&#123;</span><br><span class="line"></span><br><span class="line">    // 1）拼接下载地址</span><br><span class="line">    const requestUrl = `zhurong-cli/$&#123;repo&#125;$&#123;tag?&#x27;#&#x27;+tag:&#x27;&#x27;&#125;`;</span><br><span class="line"></span><br><span class="line">    // 2）调用下载方法</span><br><span class="line">    await wrapLoading(</span><br><span class="line">      this.downloadGitRepo, // 远程下载方法</span><br><span class="line">      &#x27;waiting download template&#x27;, // 加载提示信息</span><br><span class="line">      requestUrl, // 参数1: 下载地址</span><br><span class="line">      path.resolve(process.cwd(), this.targetDir)) // 参数2: 创建位置</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    await this.download(repo, tag)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="编写cli"><a href="#编写cli" class="headerlink" title="编写cli"></a>编写cli</h2><h3 id="package-json-bin-本地全局注册命令"><a href="#package-json-bin-本地全局注册命令" class="headerlink" title="package.json bin 本地全局注册命令"></a>package.json bin 本地全局注册命令</h3><p>bin 自定义命令，要安装到 PATH 中的可执行文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;bin&quot;: &#123;</span><br><span class="line">    &quot;mcli&quot;: &quot;./bin/index.js&quot; // 可执行文件入口</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="使用eslint"><a href="#使用eslint" class="headerlink" title="使用eslint"></a>使用eslint</h3><p>安装eslint</p><p>初始化eslint 注：npx 表示从当前路径下查找命令，即 ./node_modules/.bin/eslint –init</p><p>npx eslint –init</p><p>配置快捷命令 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">&quot;lint&quot;: &quot;eslint bin&quot; // 校验bin目录下的文件</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="usr-bin-env-node"><a href="#usr-bin-env-node" class="headerlink" title="#! /usr/bin/env node"></a>#! /usr/bin/env node</h3><p><code>/usr/bin/env</code> 就是告诉系统可以在PATH目录中查找。 所以配置 <code>#!/usr/bin/env node</code> , 就是解决了不同的用户node路径不同的问题，可以让系统动态的去查找node来执行你的脚本文件。</p><h1 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h1><ol start="0"><li><p>调试技巧</p><p>cli项目完成编码后运行 npm link 然后在其他地方执行 &lt;包名&gt;即可</p><p>或者执行yarn link ;其他地方执行 yarn link &lt;包名&gt;</p></li><li><p>Error: EISDIR: illegal operation on a directory, read</p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220126160646216.png" alt="image-20220126160639344"></p><p>原因： templates 目录下文件目录结构复杂，不是单纯文件。</p></li><li><p>这段代码不知道啥意思<img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220128091031079.png" alt="image-20220128091031079"></p></li><li><h3 id="配置husky"><a href="#配置husky" class="headerlink" title="配置husky"></a>配置husky</h3><p>使用git提交前，校验代码是否符合规范</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;hooks&quot;： &#123;</span><br><span class="line">&quot;pre-commit&quot;: &quot;npm run lint&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>循环</p><p>Reflect.ownKeys(mapActions).  类似于Object.keys</p></li></ol></li></ol><p> cli 带 PWA</p><p>参考资料：</p><ol><li><p><a href="https://juejin.cn/post/6967637968244703268#heading-0">https://juejin.cn/post/6967637968244703268#heading-0</a></p></li><li><p><a href="https://juejin.cn/post/6844904158701551630">https://juejin.cn/post/6844904158701551630</a></p></li><li><p><a href="https://juejin.cn/post/7021097811491946503【重点】">https://juejin.cn/post/7021097811491946503【重点】</a></p><p>【代码地址】<a href="https://github.com/zxyue25/cli-template">https://github.com/zxyue25/cli-template</a></p></li><li><p><a href="https://juejin.cn/post/7033745421084131341【重要，难看懂】">https://juejin.cn/post/7033745421084131341【重要，难看懂】</a></p></li><li><p><a href="https://juejin.cn/post/7010673349571379231【简单易懂详细】">https://juejin.cn/post/7010673349571379231【简单易懂详细】</a></p></li><li><p>源码：<a href="https://github.com/YvetteLau/Blog/tree/master/eos-cli">https://github.com/YvetteLau/Blog/tree/master/eos-cli</a></p><p><a href="https://juejin.cn/post/6844903896163303438">https://juejin.cn/post/6844903896163303438</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用库介绍&quot;&gt;&lt;a href=&quot;#常用库介绍&quot; class=&quot;headerlink&quot; title=&quot;常用库介绍&quot;&gt;&lt;/a&gt;常用库介绍&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;commander-自定义命令行指令 【可处理控制台命令的工具】&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="https://ms-yip.github.io/2022/12/29/vue/"/>
    <id>https://ms-yip.github.io/2022/12/29/vue/</id>
    <published>2022-12-29T10:30:07.380Z</published>
    <updated>2022-12-29T10:30:07.380Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>MVVM概念</p></li><li><p>渐进式框架：</p><p>自底向上逐层应用。不必使用他的所有部分</p></li><li><p>生命周期</p><p>共8个，需要熟悉生命周期流程图</p><ol><li><p>初始化 Events 和Lifecycle；beforeCreated</p></li><li><p>初始化 Injections 和 reactivity；created</p></li><li><p>el‘option 或者$mount时， 将（el’ outerHtml 作为编译模板）compile template into render function；beforeMounted</p></li><li><p>create vm.$el &amp; replace el with it ;完成实例与虚拟dom的关联； Mounted</p></li><li><p>监听数据变化，beforeUpdate， virtual dom re-render &amp; patch</p></li><li><p>调用 $distroy ；执行 beforeDestory ；teardown watchers，child components &amp; event listeners；destoryed</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            msg:&quot;测试&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;&#125;,</span><br><span class="line">        computed:&#123;&#125;,</span><br><span class="line">        beforeCreate:function()&#123;</span><br><span class="line">            console.group(&quot;beforeCreate==&gt;&quot;);</span><br><span class="line">            console.log(&quot;this:&quot;,this); // 存在实例</span><br><span class="line">            console.log(&quot;$options:&quot;,this.$options); // 存在配置项</span><br><span class="line">            console.log(&quot;$el&quot;,this.$el); // 没有完成容器构建，所以 $el 为 undefined</span><br><span class="line">            console.log(&quot;$data:&quot;,this.$data); // 只完成了vue的环境，但没有完成数据装载，所以为 undefined</span><br><span class="line">            console.log(&quot;$data.msg:&quot;,this.msg);// 只完成了vue的环境，但没有完成数据装载，所以为 undefined</span><br><span class="line">            console.groupEnd();</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            console.group(&quot;created==&gt;&quot;);</span><br><span class="line">            console.log(&quot;this:&quot;,this);// 存在实例</span><br><span class="line">            console.log(&quot;$options:&quot;,this.$options);// 存在配置项</span><br><span class="line">            console.log(&quot;$el&quot;,this.$el);// 没有完成容器构建，所以 $el 为 undefined</span><br><span class="line">            // 在完成数据装载时，执行$options.data 方法 （mergedInstanceDataFn())</span><br><span class="line">            // 主要用于完成数据对象的合并 和 数据劫持的执行，最终返回一个具有劫持的 数据对象</span><br><span class="line">            // 提供vue实例的 $data</span><br><span class="line">            console.log(&quot;$data:&quot;,this.$data); // 已经完成了vue的基本功能定义，所以已存在数据仓库</span><br><span class="line">            console.log(&quot;$data.msg:&quot;,this.msg);// 已经完成了vue的基本功能定义，所以已存在变量</span><br><span class="line">            console.groupEnd();</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>   <strong>自定义组件的v-model</strong></p><p>   <code>v-model</code> 默认会利用名为 <code>value</code> 的 prop 和名为 <code>input</code> 的事件.</p><p>   像单选框、复选框等类型的输入控件可能会将 <code>value</code> attribute 用于不同的目的</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;base-checkbox&#x27;, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &#x27;checked&#x27;,</span><br><span class="line">    event: &#x27;change&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    checked: Boolean</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:checked</span>=<span class="string">&quot;checked&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:change</span>=<span class="string">&quot;$emit(&#x27;change&#x27;, $event.target.checked)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   <strong>this.$listeners</strong></p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;base-input&#x27;, &#123;</span><br><span class="line">  inheritAttrs: false,</span><br><span class="line">  props: [&#x27;label&#x27;, &#x27;value&#x27;],</span><br><span class="line">  computed: &#123;</span><br><span class="line">    inputListeners: function () &#123;</span><br><span class="line">      var vm = this</span><br><span class="line">      // `Object.assign` 将所有的对象合并为一个新对象</span><br><span class="line">      return Object.assign(&#123;&#125;,</span><br><span class="line">        // 我们从父级添加所有的监听器</span><br><span class="line">        this.$listeners,</span><br><span class="line">        // 然后我们添加自定义监听器，</span><br><span class="line">        // 或覆写一些监听器的行为</span><br><span class="line">        &#123;</span><br><span class="line">          // 这里确保组件配合 `v-model` 的工作</span><br><span class="line">          input: function (event) &#123;</span><br><span class="line">            vm.$emit(&#x27;input&#x27;, event.target.value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &#123;&#123; label &#125;&#125;</span><br><span class="line">      &lt;input</span><br><span class="line">        v-bind=&quot;$attrs&quot;</span><br><span class="line">        v-bind:value=&quot;value&quot;</span><br><span class="line">        v-on=&quot;inputListeners&quot;</span><br><span class="line">      &gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   插槽新语法 2.6</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user #default=&quot;&#123; user:person &#125;&quot;&gt;</span><br><span class="line">  &#123;&#123; person.firstName &#125;&#125;</span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><p>   你甚至可以定义后备内容，用于插槽 prop 是 undefined 的情形：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user v-slot=&quot;&#123; user = &#123; firstName: &#x27;Guest&#x27; &#125; &#125;&quot;&gt;</span><br><span class="line">  &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><p>   <strong>动态参数！</strong></p><p>   <a href="[https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6](https://cn.vuejs.org/v2/guide/components-dynamic-async.html#异步组件)"><strong>异步组件</strong></a></p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;async-example&#x27;, function (resolve, reject) &#123;</span><br><span class="line">  setTimeout(function () &#123;</span><br><span class="line">    // 向 `resolve` 回调传递组件定义</span><br><span class="line">    resolve(&#123;</span><br><span class="line">      template: &#x27;&lt;div&gt;I am async!&lt;/div&gt;&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   一个推荐的做法是将异步组件和 <a href="https://webpack.js.org/guides/code-splitting/">webpack 的 code-splitting 功能</a>一起配合使用：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;async-webpack-example&#x27;, function (resolve) &#123;</span><br><span class="line">  // 这个特殊的 `require` 语法将会告诉 webpack</span><br><span class="line">  // 自动将你的构建代码切割成多个包，这些包</span><br><span class="line">  // 会通过 Ajax 请求加载</span><br><span class="line">  require([&#x27;./my-async-component&#x27;], resolve)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>处理加载状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const AsyncComponent = () =&gt; (&#123;</span><br><span class="line">  // 需要加载的组件 (应该是一个 `Promise` 对象)</span><br><span class="line">  component: import(&#x27;./MyComponent.vue&#x27;),</span><br><span class="line">  // 异步组件加载时使用的组件</span><br><span class="line">  loading: LoadingComponent,</span><br><span class="line">  // 加载失败时使用的组件</span><br><span class="line">  error: ErrorComponent,</span><br><span class="line">  // 展示加载时组件的延时时间。默认值是 200 (毫秒)</span><br><span class="line">  delay: 200,</span><br><span class="line">  // 如果提供了超时时间且组件加载也超时了，</span><br><span class="line">  // 则使用加载失败时使用的组件。默认值是：`Infinity`</span><br><span class="line">  timeout: 3000</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a><a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#依赖注入">依赖注入</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">provide: function () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    getMap: this.getMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 子代组件</span><br><span class="line">inject: [&#x27;getMap&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.w3cplus.com/vue/seven-ways-to-define-a-component-template-by-vuejs.html">Vue.js 定义组件模板的七种方式</a></p><p>$forceUpdate() 强制更新</p><p>混入：</p><p>mixins/extend 使用同样的策略进行合并</p><p>data ，methods<code>、</code>components、directives 合并冲突 是取组件对象的值</p><p>同名钩子函数将合并为一个数组，混入对象的钩子将在组件自身钩子<strong>之前</strong>调用</p><p>自定义指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 注册一个全局自定义指令 `v-focus`</span><br><span class="line">Vue.directive(&#x27;focus&#x27;, &#123;</span><br><span class="line">  // 当被绑定的元素插入到 DOM 中时……</span><br><span class="line">  inserted: function (el) &#123;</span><br><span class="line">    // 聚焦元素</span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 如果想注册局部指令，组件中也接受一个 directives 的选项：</span><br><span class="line">directives: &#123;</span><br><span class="line">  focus: &#123;</span><br><span class="line">    // 指令的定义</span><br><span class="line">    inserted: function (el) &#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p><ul><li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li><li><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li><li><code>update</code>：所在组件的 VNode 更新时调用，<strong>但是可能发生在其子 VNode 更新之前</strong>。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</li><li><code>componentUpdated</code>：指令所在组件的 VNode <strong>及其子 VNode</strong> 全部更新后调用。</li><li><code>unbind</code>：只调用一次，指令与元素解绑时调用。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;MVVM概念&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;渐进式框架：&lt;/p&gt;
&lt;p&gt;自底向上逐层应用。不必使用他的所有部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生命周期&lt;/p&gt;
&lt;p&gt;共8个，需要熟悉生命周期流程图&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始化 Event
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vuepress</title>
    <link href="https://ms-yip.github.io/2022/12/29/vuepress/"/>
    <id>https://ms-yip.github.io/2022/12/29/vuepress/</id>
    <published>2022-12-29T10:30:07.380Z</published>
    <updated>2022-12-29T10:30:07.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vuepess"><a href="#vuepess" class="headerlink" title="vuepess"></a>vuepess</h1><h4 id="使用安装"><a href="#使用安装" class="headerlink" title="使用安装"></a>使用安装</h4><p>yarn init</p><p>yarn add -D vuepress | npm i -s vuepress</p><p>添加npm 命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;docs:dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vuepress dev docs&quot;</span><span class="punctuation">,</span> <span class="comment">// 本地运行</span></span><br><span class="line">    <span class="attr">&quot;docs:build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vuepress build docs&quot;</span> <span class="comment">// 打包</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>添加内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> docs &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;# Hello VuePress&#x27;</span> &gt; docs/README.md</span><br></pre></td></tr></table></figure><p>PowerShell：标记“&amp;&amp;”不是此版本中的有效语句分隔符<br>        将命令行语句中的 &amp;&amp; 改为分号 ; 就好了</p><h1 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">VuePress 遵循 “约定优于配置” 的原则，推荐的目录结构如下：</span><br><span class="line">.</span><br><span class="line">├── docs</span><br><span class="line">│   ├── .vuepress (可选的)      // 用于存放全局的配置、组件、静态资源等。</span><br><span class="line">│   │   ├── components (可选的) // 该目录中的 Vue 组件将会被自动注册为全局组件</span><br><span class="line">│   │   ├── theme (可选的)      // 用于存放本地主题</span><br><span class="line">│   │   │   └── Layout.vue</span><br><span class="line">│   │   ├── public (可选的)     // 静态资源目录。</span><br><span class="line">│   │   ├── styles (可选的)     // 用于存放样式相关的文件</span><br><span class="line">│   │   │   ├── index.styl     // 将会被自动应用的全局样式文件，会生成在最终的 CSS 文件结尾，具有比默认样式更高的优先级。</span><br><span class="line">│   │   │   └── palette.styl   // 用于重写默认颜色常量，或者设置新的 stylus 颜色常量。</span><br><span class="line">│   │   ├── templates (可选的, 谨慎配置) //存储 HTML 模板文件。</span><br><span class="line">│   │   │   ├── dev.html // 用于开发环境的 HTML 模板文件</span><br><span class="line">│   │   │   └── ssr.html // 构建时基于 Vue SSR 的 HTML 模板文件。</span><br><span class="line">│   │   ├── config.js (可选的) // 配置文件的入口文件，也可以是 YML 或 toml</span><br><span class="line">│   │   └── enhanceApp.js (可选的) // 客户端应用的增强</span><br><span class="line">│   │ </span><br><span class="line">│   ├── README.md</span><br><span class="line">│   ├── guide</span><br><span class="line">│   │   └── README.md</span><br><span class="line">│   └── config.md</span><br><span class="line">│ </span><br><span class="line">└── package.json</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>docs/.vuepress/config.js</p><h3 id="配置顶部导航栏"><a href="#配置顶部导航栏" class="headerlink" title="配置顶部导航栏"></a>配置顶部导航栏</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 顶部导航栏内容</span><br><span class="line">nav: [</span><br><span class="line">&#123; text: &#x27;首页&#x27;, link: &#x27;/&#x27; &#125;,</span><br><span class="line">&#123; text: &#x27;基础组件&#x27;, link: &#x27;/guide/basic/&#x27; &#125;,</span><br><span class="line">&#123;</span><br><span class="line">text: &#x27;使用&#x27;,</span><br><span class="line">items: [</span><br><span class="line">&#123; text: &#x27;首页&#x27;, link: &#x27;/guide/use/index&#x27; &#125;, // 可不写后缀 .md</span><br><span class="line">&#123; text: &#x27;测试&#x27;, link: &#x27;/guide/use/test&#x27; &#125;, // 外部链接</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="配置侧边栏"><a href="#配置侧边栏" class="headerlink" title="配置侧边栏"></a>配置侧边栏</h3><h4 id="配置分组（一个侧边栏）"><a href="#配置分组（一个侧边栏）" class="headerlink" title="配置分组（一个侧边栏）"></a>配置分组（一个侧边栏）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sidebar:[</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;Group 1&#x27;, // 必要的</span><br><span class="line">    // path: &#x27;/guide/basic/layout-common-onlyform.vue&#x27;, // 可选的, 标题的跳转链接，应为绝对路径且必须存在</span><br><span class="line">    children: [</span><br><span class="line">      &#x27;/&#x27;,</span><br><span class="line">      &#x27;/guide/basic/a&#x27;,</span><br><span class="line">      &#x27;/guide/basic/b&#x27;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;Group 2&#x27;,</span><br><span class="line">    children: [</span><br><span class="line">      &#x27;about&#x27;,</span><br><span class="line">      &#x27;about2&#x27;,</span><br><span class="line">      &#x27;/guide/tools/a&#x27;,</span><br><span class="line">      &#x27;/guide/tools/b&#x27;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h4 id="配置多个侧边栏"><a href="#配置多个侧边栏" class="headerlink" title="配置多个侧边栏"></a>配置多个侧边栏</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sidebar: &#123;</span><br><span class="line">&#x27;/guide/about/&#x27;: [&#x27;&#x27;, &#x27;index2&#x27;], // 第一个侧边栏</span><br><span class="line">&#x27;/guide/basic/&#x27;: [ // 第二个侧边栏</span><br><span class="line">&#x27;/guide/basic/&#x27;,</span><br><span class="line">        &#x27;/guide/basic/a&#x27;,</span><br><span class="line">        &#x27;/guide/basic/b.vue&#x27;,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">displayAllHeaders: true,  // 显示所有页面的标题链接 默认值：false, 激活当前页才会看见下面的标题</span><br></pre></td></tr></table></figure><h4 id="结合多个侧边栏和分组"><a href="#结合多个侧边栏和分组" class="headerlink" title="结合多个侧边栏和分组"></a>结合多个侧边栏和分组</h4><p>多个侧边栏和分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sidebar:&#123;</span><br><span class="line">  &#x27;/guide/basic/&#x27;: [</span><br><span class="line">    &#123;</span><br><span class="line">      title: &#x27;A&#x27;,</span><br><span class="line">      children: [&#x27;a1.md&#x27;, &#x27;a2&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: &#x27;B&#x27;,</span><br><span class="line">      children: [&#x27;&#x27;, &#x27;B&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  &#x27;/guide/tools/&#x27;: [</span><br><span class="line">    &#123;</span><br><span class="line">      title: &#x27;tools&#x27;,</span><br><span class="line">      children: [&#x27;a&#x27;, &#x27;b&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: &#x27;others&#x27;,</span><br><span class="line">      children: [&#x27;others&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Front-Matter"><a href="#Front-Matter" class="headerlink" title="Front Matter"></a>Front Matter</h3><p>  front matter 必须是 markdown 文件中的第一部分，并且必须采用在三点划线之间书写的有效的 YAML<br>  预定义变量：<br>  title<br>  lang<br>  description 当前页面的描述。<br>  layout  设置当前页面的布局组件<br>  keys 密码<br>  publish 发布<br>  tags<br>  categories<br>  sticky 置顶顺序</p><h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><h4 id="组件展示-源码-效果"><a href="#组件展示-源码-效果" class="headerlink" title="组件展示(源码)效果"></a>组件展示(源码)效果</h4><ol><li><p>安装  <code>vuepress-plugin-demo-container</code> 插件做组件demo</p></li><li><p>然后在<code>/docs/.vuepress/config.js</code>文件中配置上该插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins: [&#x27;demo-container&#x27;], // 配置插件</span><br></pre></td></tr></table></figure></li><li><p><strong>应用级别的配置</strong></p><p>新建文件：/docs/.vuepress/enhanceApp.js</p><p>在此文件中添加应用代码：如引入使用插件等等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; <span class="title class_">Vue</span> &#125;) =&gt; &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @vuepress/plugin-back-to-top</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@vuepress/back-to-top&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进度条插件"><a href="#进度条插件" class="headerlink" title="进度条插件"></a>进度条插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @vuepress/plugin-nprogress</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@vuepress/nprogress&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义颜色</li></ul><p>在你的 <strong>site</strong> 或 <strong>theme</strong> 的 <code>palette.styl</code> 文件中设置 <code>$nprogressColor</code> 来改变进度条的颜色（默认使用 <code>$accentColor</code>）。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vuepress/styles/palette.styl</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="comment">// .vuepress/theme/styles/palette.styl</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$nprogressColor</span> = red</span><br></pre></td></tr></table></figure><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>vuepress-theme-cli</p><p>npm i @nacelle/vuepress-theme-docs -S //  适用文档</p><p>vuepress-theme-quicksand</p><p>vuepress-theme-next</p><p>vuepress-theme-resume</p><p>vuepress-theme-ibank</p><p>vuepress-theme-reco！！</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Uncaught-Error-Cannot-find-module-‘core-js-library-fn-object-assign’"><a href="#Uncaught-Error-Cannot-find-module-‘core-js-library-fn-object-assign’" class="headerlink" title="Uncaught Error: Cannot find module ‘core-js/library/fn/object/assign’"></a>Uncaught Error: Cannot find module ‘core-js/library/fn/object/assign’</h3><p>原因：enhanceApp.js 引入js后报错，core-js版本问题</p><p>方案1：安装<a href="mailto:core-js@2.X">core-js@2.X</a></p><p>方案2：在config文件（路径docs.vuepress\config.js）中加上以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chainWebpack (config) &#123;</span><br><span class="line">    config.resolve.alias.set(&#x27;core-js/library/fn&#x27;, &#x27;core-js/features&#x27;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vuepess&quot;&gt;&lt;a href=&quot;#vuepess&quot; class=&quot;headerlink&quot; title=&quot;vuepess&quot;&gt;&lt;/a&gt;vuepess&lt;/h1&gt;&lt;h4 id=&quot;使用安装&quot;&gt;&lt;a href=&quot;#使用安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>qianku落地挖坑填坑系列</title>
    <link href="https://ms-yip.github.io/2022/12/29/qianku%E8%90%BD%E5%9C%B0%E6%8C%96%E5%9D%91%E5%A1%AB%E5%9D%91%E7%B3%BB%E5%88%97/"/>
    <id>https://ms-yip.github.io/2022/12/29/qianku%E8%90%BD%E5%9C%B0%E6%8C%96%E5%9D%91%E5%A1%AB%E5%9D%91%E7%B3%BB%E5%88%97/</id>
    <published>2022-12-29T10:30:07.377Z</published>
    <updated>2022-12-29T10:30:07.377Z</updated>
    
    <content type="html"><![CDATA[<p>qiankun fetch 失败</p><ol><li>导出的生命周期有问题</li><li>子站没有开始允许跨域</li></ol><p>要解决的问题</p><p>1.样式污染问题主站与子项目间的</p><p><a href="https://blog.csdn.net/Lyrelion/article/details/119245884">qiankun 问题记录</a></p><p>iframe 跨域踩坑系列：</p><p>受到三种跨域限制：一是ajax请求限制；二是DOM无法获得；三是Cookie、LocalStorage 和 IndexDB 无法读取。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;qiankun fetch 失败&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导出的生命周期有问题&lt;/li&gt;
&lt;li&gt;子站没有开始允许跨域&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要解决的问题&lt;/p&gt;
&lt;p&gt;1.样式污染问题主站与子项目间的&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.cs
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pinia</title>
    <link href="https://ms-yip.github.io/2022/12/29/pinia/"/>
    <id>https://ms-yip.github.io/2022/12/29/pinia/</id>
    <published>2022-12-29T10:30:07.376Z</published>
    <updated>2022-12-29T10:30:07.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 使用 npm</span><br><span class="line">npm install pinia@next</span><br><span class="line"># 使用 yarn</span><br><span class="line">yarn add pinia@next</span><br></pre></td></tr></table></figure></li><li><p>引入</p><p>创建一个 pinia（根存储）并将其传递给应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createPinia &#125; from <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line">app.use(createPinia());</span><br></pre></td></tr></table></figure></li><li><p>了解State</p><p>defineStore：定义store</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineStore &#125; from &#x27;pinia&#x27;</span><br><span class="line"></span><br><span class="line">export default defineStore(&#123;</span><br><span class="line">  id: &#x27;app&#x27;,</span><br><span class="line">  state () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &#x27;码农小余&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; store.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import useAppStore from &#x27;./store/index&#x27;</span><br><span class="line">const store = useAppStore()</span><br><span class="line">console.log(store)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>this.$patch({})</p><p>可以同时修改多个值</p></li><li><p>$subscribe 用于监听 state 及其 mutation 动作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const store = useAppStore();</span><br><span class="line"></span><br><span class="line">store.$subscribe((mutation, state) =&gt; &#123;</span><br><span class="line">  console.log(mutation);</span><br><span class="line">  console.log(state);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>$onAction 可用于统计actions 的时间或者记录折扣点击总次数的时候</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>npm包调试</title>
    <link href="https://ms-yip.github.io/2022/12/29/npm%E5%8C%85%E8%B0%83%E8%AF%95/"/>
    <id>https://ms-yip.github.io/2022/12/29/npm%E5%8C%85%E8%B0%83%E8%AF%95/</id>
    <published>2022-12-29T10:30:07.375Z</published>
    <updated>2022-12-29T10:30:07.375Z</updated>
    
    <content type="html"><![CDATA[<p>npm 包调试方法</p><ol><li><p>修改 pagekage.json的dependencies</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- &quot;@shengshunyan/utils&quot;: &quot;^1.0.2&quot;</span><br><span class="line">+ &quot;@shengshunyan/utils&quot;:&quot;file:/Users/guoshi/Desktop/shengshunyan-utils&quot;</span><br></pre></td></tr></table></figure><p>注意：修改pagekage.json 之后, 需要重新执行安装指令。并且安装之前，npm包需要先执行build操作。</p></li><li><p>npm link</p><ul><li><p>npm包项目 npm run build 后 执行npm link 操作。 npm ls –global ：查看链接效果 </p></li><li><p>引用项目下执行 npm link [npm 包] 后运行。npm ls ：查看链接效果</p></li></ul></li><li><p>yalc</p><ul><li><strong>npm install -g yalc</strong> 安装yalc 包</li></ul></li></ol><ul><li>npm包项目执行 <strong>yalc publish</strong> 【将组件库发布到本地】<ul><li>引用项目下执行 <strong>yalc link/add  [npm包]</strong>，后运行项目 npm run dev  【使用该组件库的项目中添加本地依赖】</li></ul></li><li><strong>yalc remove –all</strong> 【联调后去掉本地依赖】</li></ul><p>备注：为实现本地调试自动化发布或构建，引用nodemon</p><ul><li><p>package.json文件里添加scripts脚本 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注意这里要用引号 包含执行的命令，否则只能执行一半 */</span></span><br><span class="line"><span class="string">&quot;watch&quot;</span>: <span class="string">&quot;nodemon --ignore node_modules/ --watch src/ --ext vue,ts,js,tsx,scss -x \&quot;npm run build &amp;&amp; yalc push\&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><h6 id="npm-run-watch"><a href="#npm-run-watch" class="headerlink" title="npm run watch"></a>npm run watch</h6></li><li><h3 id="查看仓库信息"><a href="#查看仓库信息" class="headerlink" title="查看仓库信息"></a>查看仓库信息</h3><p>当我们要查看本地仓库里存在的包时</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yalc installations <span class="keyword">show</span></span><br></pre></td></tr></table></figure><p>要清理不需要的包时</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yalc installations clean [<span class="keyword">my</span>-<span class="keyword">package</span>]</span><br></pre></td></tr></table></figure></li></ul><p>备注：nodemon.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;restartable&quot;: &quot;rs&quot;,</span><br><span class="line">  &quot;ignore&quot;: [</span><br><span class="line">     &quot;.git&quot;,</span><br><span class="line">     &quot;node_modules/**/node_modules&quot;</span><br><span class="line">   ],</span><br><span class="line">   &quot;verbose&quot;: true,</span><br><span class="line">   &quot;execMap&quot;: &#123;</span><br><span class="line">     &quot;js&quot;: &quot;node --harmony&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;events&quot;: &#123;</span><br><span class="line">     &quot;restart&quot;: &quot;osascript -e &#x27;display notification \&quot;App restarted due to:\n&#x27;$FILENAME&#x27;\&quot; with title \&quot;nodemon\&quot;&#x27;&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;watch&quot;: [</span><br><span class="line">     &quot;test/fixtures/&quot;,</span><br><span class="line">     &quot;test/samples/&quot;</span><br><span class="line">   ],</span><br><span class="line">   &quot;env&quot;: &#123;</span><br><span class="line">     &quot;NODE_ENV&quot;: &quot;development&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;ext&quot;: &quot;js,json&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>   npm 源管理工具 nrm</p><ol><li>安装 npm install -g nrm</li><li>nrm ls 查看源列表</li><li>nrm add <alias-name><address> // eg：nrm add grgnpm <a href="http://10.1.3.24:4873">http://10.1.3.24:4873</a></li><li>nrm use <name> // eg：nrm use taobao。</li><li>nrm test  // npm 源测速</li><li>nrm test  <name> // 指定测速</li><li>nrm del <name> //删除源</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;npm 包调试方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改 pagekage.json的dependencies&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>npm实操</title>
    <link href="https://ms-yip.github.io/2022/12/29/npm%E5%AE%9E%E6%93%8D/"/>
    <id>https://ms-yip.github.io/2022/12/29/npm%E5%AE%9E%E6%93%8D/</id>
    <published>2022-12-29T10:30:07.375Z</published>
    <updated>2022-12-29T10:30:07.376Z</updated>
    
    <content type="html"><![CDATA[<p>更新全局包：node</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update &lt;name&gt; -g</span><br></pre></td></tr></table></figure><p>更新生产环境依赖包：git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update &lt;name&gt; --save</span><br></pre></td></tr></table></figure><p>更新开发环境依赖包：github</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update &lt;name&gt; --save-dev</span><br></pre></td></tr></table></figure><p>修改源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><p>安装淘宝源 cnpm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h1 id="npmrc配置文件"><a href="#npmrc配置文件" class="headerlink" title=".npmrc配置文件"></a>.npmrc配置文件</h1><ol><li><p>文件位置</p><p>全局配置文件：<code>/etc/npmrc</code><br>用户配置文件：<code>~/.npmrc</code>  npm config set <key> <value>修改的是用户配置文件<br>项目配置文件：<code>$项目根目录/.npmrc</code></p><p>优先级：<strong>项目配置&gt;用户配置&gt;全局配置</strong></p></li><li><p>配置  key=value</p></li></ol><p>   npm cache clean -force  </p><p>   <a href="https://blog.csdn.net/kelly0721/article/details/121908256">参考</a></p><h2 id="常见的问题"><a href="#常见的问题" class="headerlink" title="常见的问题"></a>常见的问题</h2><h3 id="request-to-https-registry-npmjs-org-big-js-failed-reason-connect-ETIMEDOUT-104-16-17-35-443"><a href="#request-to-https-registry-npmjs-org-big-js-failed-reason-connect-ETIMEDOUT-104-16-17-35-443" class="headerlink" title="request to https://registry.npmjs.org/big.js failed, reason: connect ETIMEDOUT 104.16.17.35:443"></a>request to <a href="https://registry.npmjs.org/big.js">https://registry.npmjs.org/big.js</a> failed, reason: connect ETIMEDOUT 104.16.17.35:443</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;更新全局包：node&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>node安装使用</title>
    <link href="https://ms-yip.github.io/2022/12/29/node%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://ms-yip.github.io/2022/12/29/node%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</id>
    <published>2022-12-29T10:30:07.374Z</published>
    <updated>2022-12-29T10:30:07.375Z</updated>
    
    <content type="html"><![CDATA[<h4 id="node-安装"><a href="#node-安装" class="headerlink" title="node 安装"></a>node 安装</h4><ol><li><p>双击运行：<img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820113104311.png" alt=""></p></li><li><p>其他基本安装默认设置安装即可，也可以自定义路径安装：</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820113158414.png" alt="image-20210820113158414"></p></li></ol><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820113220463.png" alt="image-20210820113220463"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820113241473.png" alt="image-20210820113241473"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step6.png" alt="install-node-msi-version-on-windows-step6"></p><p>![(<a href="https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step6.png">https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step6.png</a>)</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step7.png" alt="install-node-msi-version-on-windows-step7"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step8.png" alt="install-node-msi-version-on-windows-step8"></p><h4 id="node运行项目"><a href="#node运行项目" class="headerlink" title="node运行项目"></a>node运行项目</h4><p>​    可直接打开文件目录，输入cmd命令行进行后续运行项目操作，详情请见开发及部署文档说明.md。也可以输入start.bat根据提示输入对应选项进行安装：</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820125956366.png" alt="image-20210820125956366"></p><p>特别说明：npm默认源因为访问慢等各种不可抗力因素经常会出现安装出错(整体或部分包)。出现报错情况很正常，请拿出专业和耐心，找出报错信息所指向的包，执行npm install  XXXX 即可。如多次安装也不行，请切换npm registry 或安装cnpm 进行install 操作。</p><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><h1 id="Unexpected-end-of-JSON-input-while-parsing-near-‘…”"><a href="#Unexpected-end-of-JSON-input-while-parsing-near-‘…”" class="headerlink" title="Unexpected end of JSON input while parsing near ‘…”"></a>Unexpected end of JSON input while parsing near ‘…”</h1><p>设置仓库为淘宝的，然后清除缓存，重新下载依赖包</p><p>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a></p><p>npm cache clean –force </p><p>npm install</p><p>或者 安装cnpm </p><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></p><p>cnpm install</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820142455193.png" alt="image-20210820142455193"></p><h1 id="运行npm-run-lint-serve-build-时报错"><a href="#运行npm-run-lint-serve-build-时报错" class="headerlink" title="运行npm run lint/serve/build 时报错"></a>运行npm run lint/serve/build 时报错</h1><p>​    在完成 install操作后，进行标题上命令，多为eslint语法校验和程序代码错误：请根据提示进行代码修复后再运行。</p><p>如下：</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820143211138.png" alt="image-20210820143211138"></p><p>下图为启动本地运行：</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820142936138.png" alt="image-20210820142936138"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;node-安装&quot;&gt;&lt;a href=&quot;#node-安装&quot; class=&quot;headerlink&quot; title=&quot;node 安装&quot;&gt;&lt;/a&gt;node 安装&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;双击运行：&lt;img src=&quot;https://gitee.com/msy-codi
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
