<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用链接备份</title>
      <link href="/2023/02/01/%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5%E5%A4%87%E4%BB%BD/"/>
      <url>/2023/02/01/%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ms-yip.github.io/vuepress-doc-tpl/">vuepress 文档demo预览地址</a><br><a href="https://www.npmjs.com/package/vuepress-menu">vuepress demo项目自动生成nav导航菜单和sidebar侧边栏快捷定位菜单 npm包</a><br><a href="https://www.npmjs.com/package/vpsdoc-cli">快速生成vuepress 文档项目脚手架 npm包</a><br><a href="https://github.com/ms-yip/swg-doc-mocker">swg-doc-mocker-用于自动拉取swagger文档数据转换成nodemock数据接口</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端安全</title>
      <link href="/2023/01/29/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-1/"/>
      <url>/2023/01/29/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript</title>
      <link href="/2022/12/29/javascript/"/>
      <url>/2022/12/29/javascript/</url>
      
        <content type="html"><![CDATA[<ol><li><p>闭包</p><p>闭包就是能够读取其他函数内部变量的函数</p><p>子函数在外被调用，子函数所在的父函数的作用域不会被释放</p></li></ol><p>   一个函数可以访问其相同作用域的外部变量</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = 1</span><br><span class="line">function m1 () &#123;</span><br><span class="line">console.log(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时</p><p><img src="/images/javascript/image-20221229173157295.png" alt="image-20221229173157295"></p><p>例子<img src="/images/javascript/image-20221229191050666.png" alt="image-20221229191050666"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var name = &quot;The Window&quot;;</span><br><span class="line"></span><br><span class="line">　　var object = &#123;</span><br><span class="line">　　　　name : &quot;My Object&quot;,</span><br><span class="line"></span><br><span class="line">　　　　getNameFunc : function()&#123;</span><br><span class="line">　　　　　　return function()&#123;</span><br><span class="line">　　　　　　　　return this.name;</span><br><span class="line">　　　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br><span class="line"></span><br><span class="line">　　alert(object.getNameFunc()());</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">　　var name = &quot;The Window&quot;;</span><br><span class="line"></span><br><span class="line">　　var object = &#123;</span><br><span class="line">　　　　name : &quot;My Object&quot;,</span><br><span class="line"></span><br><span class="line">　　　　getNameFunc : function()&#123;</span><br><span class="line">　　　　　　var that = this;</span><br><span class="line">　　　　　　return function()&#123;</span><br><span class="line">　　　　　　　　return that.name;</span><br><span class="line">　　　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br><span class="line"></span><br><span class="line">　　alert(object.getNameFunc()());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue源码系列</title>
      <link href="/2022/12/27/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/"/>
      <url>/2022/12/27/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>基础：</p><ol><li>vue插件开发</li><li></li></ol><p>vue全家桶插件学习</p><p>vue-router</p><ol><li><p>全局注册router-link </p><p>原理：</p><p>实现点击页面变换url 实现页面内容切换标识</p><p>接收to参数，实现a标签href动态变换</p><p>组件接收默认插槽自定义显示</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&quot;router-link&quot;, &#123;</span><br><span class="line">   // template: &#x27;&lt;a&gt;router-link&lt;/a&gt;&#x27;</span><br><span class="line">   props: &#123;</span><br><span class="line">     to: &#123;</span><br><span class="line">       type: String,</span><br><span class="line">       required: true,</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;,</span><br><span class="line">   render(h) &#123;</span><br><span class="line">     // h就是createElement()</span><br><span class="line">     // 作用：返回一个虚拟dom</span><br><span class="line">     // &lt;router-link to=&quot;/about&quot;&gt;abc&lt;/router-link&gt;</span><br><span class="line">     // return &lt;a href=&#123;&quot;#&quot; + this.to&#125;&gt;&#123;this.$slots.default&#125;&lt;/a&gt;;</span><br><span class="line">     // 获取插槽内容：this.$slots.default</span><br><span class="line">     return h(</span><br><span class="line">       &quot;a&quot;,</span><br><span class="line">       &#123;</span><br><span class="line">         attrs: &#123;</span><br><span class="line">           href: &quot;#&quot; + this.to,</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">       this.$slots.default</span><br><span class="line">     );</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>全局注册router-view </p><p>原理：</p><p>监听获取当前的url的变化</p><p>按照路由规则表映射关系，对应渲染相应的组件</p><p>此时：需要两个全局能访问的变量来驱动组件的渲染，分别是路由映射表，当前路由url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&quot;router-view&quot;, &#123;</span><br><span class="line">    render(h) &#123;</span><br><span class="line">      let component = null;</span><br><span class="line">      // 1.获取当前url的hash部分</span><br><span class="line">      // 2.根据hash部分从路由表中获取对应的组件</span><br><span class="line">      const route = this.$router.$options.routes.find(</span><br><span class="line">        (route) =&gt; route.path === this.$router.current</span><br><span class="line">      );</span><br><span class="line">      console.log(this.$router.current, this.$router.$options);</span><br><span class="line">      if (route) &#123;</span><br><span class="line">        component = route.component;</span><br><span class="line">      &#125;</span><br><span class="line">      return h(component);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>暴露VueRouter 类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class VueRouter &#123;</span><br><span class="line">  constructor(options) &#123;</span><br><span class="line">    // 1.保存路由选项</span><br><span class="line">    this.$options = options;</span><br><span class="line"></span><br><span class="line">    // current一个初始值</span><br><span class="line">    // 如何是current成为一个响应式数据</span><br><span class="line">    // 此方法可以给一个对象指定一个响应式属性</span><br><span class="line">    Vue.util.defineReactive(</span><br><span class="line">      this,</span><br><span class="line">      &quot;current&quot;,</span><br><span class="line">      window.location.hash.slice(1) || &quot;/&quot;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">      // 2.监控hash变化</span><br><span class="line">      window.addEventListener(&quot;hashchange&quot;, () =&gt; &#123;</span><br><span class="line">        // hash: #/about</span><br><span class="line">        this.current = window.location.hash.slice(1);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>vue实例化时，将路由表赋值到全局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 1.注册$router,让所有组件实例都可以访问它</span><br><span class="line">// 混入：Vue.mixin(&#123;&#125;)</span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    // 延迟执行：延迟到router实例和vue实例都创建完毕</span><br><span class="line">    if (this.$options.router) &#123;</span><br><span class="line">      // 如果存在说明是根实例</span><br><span class="line">      Vue.prototype.$router = this.$options.router;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>vuex</p><p>原理：</p><ol><li>暴露install 方法和store 类</li><li>$store 全局挂载实例对象</li><li>保证store 数据既能响应式 但单一渠道进行修改（仅commit进行修改， action 调用commit）</li><li>以$$ 或者_ 开头的变量 只响应 不代理 ？？？？</li><li>store 类实现dispatch commit 方法， 并且绑定上下文</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">// 我们自己的vuex实现</span><br><span class="line">let Vue;</span><br><span class="line"></span><br><span class="line">class Store &#123;</span><br><span class="line">  constructor(options) &#123;</span><br><span class="line">    // 1.保存选项</span><br><span class="line">    this._mutations = options.mutations;</span><br><span class="line">    this._actions = options.actions;</span><br><span class="line"></span><br><span class="line">    // 2.暴露state属性, 并对传入state选项做响应式处理</span><br><span class="line">    // Vue.util.defineReactive(this, &quot;state&quot;, this.$options.state);</span><br><span class="line">    // _vm希望用户明白，不要访问它</span><br><span class="line">    this._vm = new Vue(&#123;</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          // 加上$$避免Vue对该属性做代理</span><br><span class="line">          // this._vm.counter这样是不行的</span><br><span class="line">          $$state: options.state</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 绑定上下文，确保是store实例</span><br><span class="line">    // 由于 在定义actions 或者 mutations 时 有各种异步操作，导致this早就丢失了</span><br><span class="line">    this.commit = this.commit.bind(this)</span><br><span class="line">    this.dispatch = this.dispatch.bind(this)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get state() &#123;</span><br><span class="line">    return this._vm._data.$$state</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set state(v) &#123;</span><br><span class="line">    console.error(&#x27;please use replaceState to reset state&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // $store.commit(type, payload)</span><br><span class="line">  commit(type, payload) &#123;</span><br><span class="line">    const entry = this._mutations[type]</span><br><span class="line">    if (!entry) &#123;</span><br><span class="line">      console.error(&#x27;unknown mutation!&#x27;);</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    entry(this.state, payload)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dispatch(type, payload) &#123;</span><br><span class="line">    const entry = this._actions[type]</span><br><span class="line">    if (!entry) &#123;</span><br><span class="line">      console.error(&#x27;unknown action!&#x27;);</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    entry(this, payload)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function install(_Vue) &#123;</span><br><span class="line">  Vue = _Vue;</span><br><span class="line"></span><br><span class="line">  // 注册$store</span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    beforeCreate() &#123;</span><br><span class="line">      if (this.$options.store) &#123;</span><br><span class="line">        Vue.prototype.$store = this.$options.store;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 导出对象就是Vuex</span><br><span class="line">export default &#123; Store, install &#125;;</span><br></pre></td></tr></table></figure><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230094907676.png" alt="image-20221230094907676"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230095642148.png" alt="image-20221230095642148"></p><p>Dom 原生方法</p><p>正则 分组</p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230131238303.png" alt="image-20221230131238303"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230151610093.png" alt="image-20221230151610093"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230151741571.png" alt="image-20221230151741571"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230152022268.png" alt="image-20221230152022268"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230152301477.png" alt="image-20221230152301477"></p><p>Npm run dev (多了map文件)</p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230152701269.png" alt="image-20221230152701269"></p><p>加 common nodejs的打包输出  cjs 格式 服务端使用 </p><p>ssr  服务端渲染</p><p>esm 格式</p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230154629027.png" alt="image-20221230154629027"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230155450667.png" alt="image-20221230155450667"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230155807412.png" alt="image-20221230155807412"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230161928808.png" alt="image-20221230161928808"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230163519322.png" alt="image-20221230163519322"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221230201446118.png" alt="image-20221230201446118"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221231124136125.png" alt="image-20221231124136125"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221231124152279.png" alt="image-20221231124152279"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20221231135430738.png" alt="image-20221231135430738"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230102130400975.png" alt="image-20230102130400975"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230107135935361.png" alt="image-20230107135935361"></p><p>end。返回上一层上下文</p><p>chain webpack 链式调用 </p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230107140859949.png" alt="image-20230107140859949"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230107140925873.png" alt="image-20230107140925873"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230107150141051.png" alt="image-20230107150141051"></p><p>.env 通用配置</p><p>里面配置变量</p><p>可以在process.env 里面获取</p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230107151809915.png" alt="image-20230107151809915"></p><p>覆盖env 名字不是默认值的情况</p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230107152339375.png" alt="image-20230107152339375"></p><p>permission.js request.js</p><p>mock</p><p> easy-mock 能结合swagger</p><p>线上使用 安装docker</p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230107154622851.png" alt="image-20230107154622851"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108130247930.png" alt="image-20230108130247930"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108130605881.png" alt="image-20230108130605881"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108130623921.png" alt="image-20230108130623921"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108131930390.png" alt="image-20230108131930390"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108132024798.png" alt="image-20230108132024798"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108132234096.png" alt="image-20230108132234096"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108132835416.png" alt="image-20230108132835416"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108133218998.png" alt="image-20230108133218998"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108192518565.png" alt="image-20230108192518565"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108193139215.png" alt="image-20230108193139215"></p><p><img src="../images/vue%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/image-20230108193153758.png" alt="image-20230108193153758"></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tsconfig.json</title>
      <link href="/2022/10/27/tsconfig-json/"/>
      <url>/2022/10/27/tsconfig-json/</url>
      
        <content type="html"><![CDATA[<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* Visit https://aka.ms/tsconfig.json to read more about this file */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Projects */</span></span><br><span class="line">    <span class="comment">// &quot;incremental&quot;: true,                              /* Enable incremental compilation */</span></span><br><span class="line">    <span class="comment">// &quot;composite&quot;: true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */</span></span><br><span class="line">    <span class="comment">// &quot;tsBuildInfoFile&quot;: &quot;./&quot;,                          /* Specify the folder for .tsbuildinfo incremental compilation files. */</span></span><br><span class="line">    <span class="comment">// &quot;disableSourceOfProjectReferenceRedirect&quot;: true,  /* Disable preferring source files instead of declaration files when referencing composite projects */</span></span><br><span class="line">    <span class="comment">// &quot;disableSolutionSearching&quot;: true,                 /* Opt a project out of multi-project reference checking when editing. */</span></span><br><span class="line">    <span class="comment">// &quot;disableReferencedProjectLoad&quot;: true,             /* Reduce the number of projects loaded automatically by TypeScript. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Language and Environment */</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es2016&quot;</span><span class="punctuation">,</span>                                  <span class="comment">/* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */</span></span><br><span class="line">    <span class="comment">// &quot;lib&quot;: [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */</span></span><br><span class="line">    <span class="comment">// &quot;jsx&quot;: &quot;preserve&quot;,                                /* Specify what JSX code is generated. */</span></span><br><span class="line">    <span class="comment">// &quot;experimentalDecorators&quot;: true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */</span></span><br><span class="line">    <span class="comment">// &quot;emitDecoratorMetadata&quot;: true,                    /* Emit design-type metadata for decorated declarations in source files. */</span></span><br><span class="line">    <span class="comment">// &quot;jsxFactory&quot;: &quot;&quot;,                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. &#x27;React.createElement&#x27; or &#x27;h&#x27; */</span></span><br><span class="line">    <span class="comment">// &quot;jsxFragmentFactory&quot;: &quot;&quot;,                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. &#x27;React.Fragment&#x27; or &#x27;Fragment&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;jsxImportSource&quot;: &quot;&quot;,                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */</span></span><br><span class="line">    <span class="comment">// &quot;reactNamespace&quot;: &quot;&quot;,                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */</span></span><br><span class="line">    <span class="comment">// &quot;noLib&quot;: true,                                    /* Disable including any library files, including the default lib.d.ts. */</span></span><br><span class="line">    <span class="comment">// &quot;useDefineForClassFields&quot;: true,                  /* Emit ECMAScript-standard-compliant class fields. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Modules */</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>                                <span class="comment">/* Specify what module code is generated. */</span></span><br><span class="line">    <span class="comment">// &quot;rootDir&quot;: &quot;./&quot;,                                  /* Specify the root folder within your source files. */</span></span><br><span class="line">    <span class="comment">// &quot;moduleResolution&quot;: &quot;node&quot;,                       /* Specify how TypeScript looks up a file from a given module specifier. */</span></span><br><span class="line">    <span class="comment">// &quot;baseUrl&quot;: &quot;./&quot;,                                  /* Specify the base directory to resolve non-relative module names. */</span></span><br><span class="line">    <span class="comment">// &quot;paths&quot;: &#123;&#125;,                                      /* Specify a set of entries that re-map imports to additional lookup locations. */</span></span><br><span class="line">    <span class="comment">// &quot;rootDirs&quot;: [],                                   /* Allow multiple folders to be treated as one when resolving modules. */</span></span><br><span class="line">    <span class="comment">// &quot;typeRoots&quot;: [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */</span></span><br><span class="line">    <span class="comment">// &quot;types&quot;: [],                                      /* Specify type package names to be included without being referenced in a source file. */</span></span><br><span class="line">    <span class="comment">// &quot;allowUmdGlobalAccess&quot;: true,                     /* Allow accessing UMD globals from modules. */</span></span><br><span class="line">    <span class="comment">// &quot;resolveJsonModule&quot;: true,                        /* Enable importing .json files */</span></span><br><span class="line">    <span class="comment">// &quot;noResolve&quot;: true,                                /* Disallow `import`s, `require`s or `&lt;reference&gt;`s from expanding the number of files TypeScript should add to a project. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JavaScript Support */</span></span><br><span class="line">    <span class="comment">// &quot;allowJs&quot;: true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */</span></span><br><span class="line">    <span class="comment">// &quot;checkJs&quot;: true,                                  /* Enable error reporting in type-checked JavaScript files. */</span></span><br><span class="line">    <span class="comment">// &quot;maxNodeModuleJsDepth&quot;: 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Emit */</span></span><br><span class="line">    <span class="comment">// &quot;declaration&quot;: true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */</span></span><br><span class="line">    <span class="comment">// &quot;declarationMap&quot;: true,                           /* Create sourcemaps for d.ts files. */</span></span><br><span class="line">    <span class="comment">// &quot;emitDeclarationOnly&quot;: true,                      /* Only output d.ts files and not JavaScript files. */</span></span><br><span class="line">    <span class="comment">// &quot;sourceMap&quot;: true,                                /* Create source map files for emitted JavaScript files. */</span></span><br><span class="line">    <span class="comment">// &quot;outFile&quot;: &quot;./&quot;,                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */</span></span><br><span class="line">    <span class="comment">// &quot;outDir&quot;: &quot;./&quot;,                                   /* Specify an output folder for all emitted files. */</span></span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                           <span class="comment">/* Disable emitting comments. */</span></span><br><span class="line">    <span class="comment">// &quot;noEmit&quot;: true,                                   /* Disable emitting files from a compilation. */</span></span><br><span class="line">    <span class="comment">// &quot;importHelpers&quot;: true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */</span></span><br><span class="line">    <span class="comment">// &quot;importsNotUsedAsValues&quot;: &quot;remove&quot;,               /* Specify emit/checking behavior for imports that are only used for types */</span></span><br><span class="line">    <span class="comment">// &quot;downlevelIteration&quot;: true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */</span></span><br><span class="line">    <span class="comment">// &quot;sourceRoot&quot;: &quot;&quot;,                                 /* Specify the root path for debuggers to find the reference source code. */</span></span><br><span class="line">    <span class="comment">// &quot;mapRoot&quot;: &quot;&quot;,                                    /* Specify the location where debugger should locate map files instead of generated locations. */</span></span><br><span class="line">    <span class="comment">// &quot;inlineSourceMap&quot;: true,                          /* Include sourcemap files inside the emitted JavaScript. */</span></span><br><span class="line">    <span class="comment">// &quot;inlineSources&quot;: true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */</span></span><br><span class="line">    <span class="comment">// &quot;emitBOM&quot;: true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */</span></span><br><span class="line">    <span class="comment">// &quot;newLine&quot;: &quot;crlf&quot;,                                /* Set the newline character for emitting files. */</span></span><br><span class="line">    <span class="comment">// &quot;stripInternal&quot;: true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */</span></span><br><span class="line">    <span class="comment">// &quot;noEmitHelpers&quot;: true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */</span></span><br><span class="line">    <span class="comment">// &quot;noEmitOnError&quot;: true,                            /* Disable emitting files if any type checking errors are reported. */</span></span><br><span class="line">    <span class="comment">// &quot;preserveConstEnums&quot;: true,                       /* Disable erasing `const enum` declarations in generated code. */</span></span><br><span class="line">    <span class="comment">// &quot;declarationDir&quot;: &quot;./&quot;,                           /* Specify the output directory for generated declaration files. */</span></span><br><span class="line">    <span class="comment">// &quot;preserveValueImports&quot;: true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Interop Constraints */</span></span><br><span class="line">    <span class="comment">// &quot;isolatedModules&quot;: true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */</span></span><br><span class="line">    <span class="comment">// &quot;allowSyntheticDefaultImports&quot;: true,             /* Allow &#x27;import x from y&#x27; when a module doesn&#x27;t have a default export. */</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                             <span class="comment">/* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */</span></span><br><span class="line">    <span class="comment">// &quot;preserveSymlinks&quot;: true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>            <span class="comment">/* Ensure that casing is correct in imports. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Type Checking */</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                                      <span class="comment">/* Enable all strict type-checking options. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitAny&quot;: true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */</span></span><br><span class="line">    <span class="comment">// &quot;strictNullChecks&quot;: true,                         /* When type checking, take into account `null` and `undefined`. */</span></span><br><span class="line">    <span class="comment">// &quot;strictFunctionTypes&quot;: true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */</span></span><br><span class="line">    <span class="comment">// &quot;strictBindCallApply&quot;: true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */</span></span><br><span class="line">    <span class="comment">// &quot;strictPropertyInitialization&quot;: true,             /* Check for class properties that are declared but not set in the constructor. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitThis&quot;: true,                           /* Enable error reporting when `this` is given the type `any`. */</span></span><br><span class="line">    <span class="comment">// &quot;useUnknownInCatchVariables&quot;: true,               /* Type catch clause variables as &#x27;unknown&#x27; instead of &#x27;any&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;alwaysStrict&quot;: true,                             /* Ensure &#x27;use strict&#x27; is always emitted. */</span></span><br><span class="line">    <span class="comment">// &quot;noUnusedLocals&quot;: true,                           /* Enable error reporting when a local variables aren&#x27;t read. */</span></span><br><span class="line">    <span class="comment">// &quot;noUnusedParameters&quot;: true,                       /* Raise an error when a function parameter isn&#x27;t read */</span></span><br><span class="line">    <span class="comment">// &quot;exactOptionalPropertyTypes&quot;: true,               /* Interpret optional property types as written, rather than adding &#x27;undefined&#x27;. */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitReturns&quot;: true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */</span></span><br><span class="line">    <span class="comment">// &quot;noFallthroughCasesInSwitch&quot;: true,               /* Enable error reporting for fallthrough cases in switch statements. */</span></span><br><span class="line">    <span class="comment">// &quot;noUncheckedIndexedAccess&quot;: true,                 /* Include &#x27;undefined&#x27; in index signature results */</span></span><br><span class="line">    <span class="comment">// &quot;noImplicitOverride&quot;: true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */</span></span><br><span class="line">    <span class="comment">// &quot;noPropertyAccessFromIndexSignature&quot;: true,       /* Enforces using indexed accessors for keys declared using an indexed type */</span></span><br><span class="line">    <span class="comment">// &quot;allowUnusedLabels&quot;: true,                        /* Disable error reporting for unused labels. */</span></span><br><span class="line">    <span class="comment">// &quot;allowUnreachableCode&quot;: true,                     /* Disable error reporting for unreachable code. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Completeness */</span></span><br><span class="line">    <span class="comment">// &quot;skipDefaultLibCheck&quot;: true,                      /* Skip type checking .d.ts files that are included with TypeScript. */</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>                                 <span class="comment">/* Skip type checking all .d.ts files. */</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jenkins自动化部署vue项目</title>
      <link href="/2022/10/25/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/10/25/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="源码管理设置"><a href="#源码管理设置" class="headerlink" title="源码管理设置"></a>源码管理设置</h1><p>正常设置仓库地址和链接信息即可</p><p>x系统管理</p><p>添加ssh</p><p>安装插件</p><p>构建魂惊选择系统配置中的node版本</p><p><img src="/images/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/image-20221025164332249.png" alt="image-20221025164332249"></p><p><img src="/images/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/image-20221026102058986.png" alt="image-20221026102058986"></p><p><img src="/images/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/image-20221025165553136.png" alt="image-20221025165553136"></p>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Avue</title>
      <link href="/2022/05/26/Avue/"/>
      <url>/2022/05/26/Avue/</url>
      
        <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>安装&amp;引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#安装</span><br><span class="line">npm i @smallwei/avue -S</span><br><span class="line">yarn add @smallwei/avue -S</span><br><span class="line"></span><br><span class="line"># 引入</span><br><span class="line">import Avue from &#x27;@smallwei/avue&#x27;;</span><br><span class="line">import &#x27;@smallwei/avue/lib/index.css&#x27;;</span><br><span class="line">Vue.use(Avue);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/2022/05/26/Vue3/"/>
      <url>/2022/05/26/Vue3/</url>
      
        <content type="html"><![CDATA[<p>开始学习：</p><ol><li><p>创建<strong>vue应用实例</strong>，应用实例暴露的大多数方法都会返回该同一实例，<strong>允许链式</strong>。</p><p>每个组件将有自己的组件实例 ；应用中所有组件实例共享一个应用实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">createApp(App)</span><br><span class="line">.component(&#x27;SearchInput&#x27;, SearchInputComponent)</span><br><span class="line">.directive(&#x27;focus&#x27;, FocusDirective)</span><br><span class="line">.use(store)</span><br><span class="line">.use(router)</span><br><span class="line">.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">4</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(vm.<span class="property">$data</span>.<span class="property">count</span>) <span class="comment">// =&gt; 4</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(vm.<span class="property">count</span>)       <span class="comment">// =&gt; 4</span></span><br></pre></td></tr></table></figure></li><li><p>尝试区分使用v-once指令有什么区别</p></li><li><p>$attrs属性使用频率太低了</p></li><li><p>自定义指令</p></li></ol><p>动态参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>区别：</p><p>组件可以有多个根元素</p><p>在内联语句处理器中访问原始的 DOM 事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;</span>&gt;</span></span><br><span class="line">  Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多事件处理器"><a href="#多事件处理器" class="headerlink" title="多事件处理器"></a>多事件处理器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;one($event), two($event)&quot;</span>&gt;</span></span><br><span class="line">  Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  one(event) &#123;</span><br><span class="line">    // 第一个事件处理器逻辑...</span><br><span class="line">  &#125;,</span><br><span class="line">  two(event) &#123;</span><br><span class="line">   // 第二个事件处理器逻辑...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault()` 或 `event.stopPropagation()</span><br></pre></td></tr></table></figure><p><strong>不</strong>希望组件的根元素继承 attribute，inheritAttrs<code>选项设置为</code>false</p><p>与单个根节点组件不同，具有多个根节点的组件不具有自动 attribute <a href="https://en.wiktionary.org/wiki/fall-through#English">fallthrough (隐式贯穿)</a> 行为。如果未显式绑定 <code>$attrs</code>，将发出运行时警告。</p><p>组件 多个 <code>v-model</code> 绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user-name</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model:first-name</span>=<span class="string">&quot;firstName&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model:last-name</span>=<span class="string">&quot;lastName&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">user-name</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;user-name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;update:firstName&#x27;</span>, <span class="string">&#x27;update:lastName&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input </span></span><br><span class="line"><span class="string">      type=&quot;text&quot;</span></span><br><span class="line"><span class="string">      :value=&quot;firstName&quot;</span></span><br><span class="line"><span class="string">      @input=&quot;$emit(&#x27;update:firstName&#x27;, $event.target.value)&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      type=&quot;text&quot;</span></span><br><span class="line"><span class="string">      :value=&quot;lastName&quot;</span></span><br><span class="line"><span class="string">      @input=&quot;$emit(&#x27;update:lastName&#x27;, $event.target.value)&quot;&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>插槽</p><p><strong>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</strong></p><p><strong><code>v-slot</code> 只能添加在 <code>&lt;template&gt;</code> 上</strong> (<a href="https://v3.cn.vuejs.org/guide/component-slots.html#独占默认插槽的缩写语法">只有一种例外情况</a>) 即 当被提供的内容<em>只有</em>默认插槽时，组件的标签才可以被当作插槽的模板来使用 ；只要出现多个插槽，请始终为<em>所有的</em>插槽使用完整的基于 <code>&lt;template&gt;</code></p><p>绑定在 <code>&lt;slot&gt;</code> 元素上的 attribute 被称为<strong>插槽 prop</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;( item, index ) in items&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:another-attribute</span>=<span class="string">&quot;anotherAttribute&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>动态插槽名和缩写和默认值有效么？</p><p>#[name]=”{item = “template”}”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">todos</span>: [<span class="string">&#x27;Feed a cat&#x27;</span>, <span class="string">&#x27;Buy tickets&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">provide</span>: &#123;</span><br><span class="line">    <span class="attr">todoLength</span>: <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="property">length</span> <span class="comment">// 将会导致错误 `Cannot read property &#x27;length&#x27; of undefined` 此处 provide不能访问 一些组件的实例 property</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">todos</span>: [<span class="string">&#x27;Feed a cat&#x27;</span>, <span class="string">&#x27;Buy tickets&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">todoLength</span>: <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="property">length</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在上面的例子中，如果我们更改了 <code>todos</code> 的列表，这个变化并不会反映在 inject 的 <code>todoLength</code> property 中。这是因为默认情况下，<code>provide/inject</code> 绑定<em>并不是</em>响应式的。我们可以通过传递一个 <code>ref</code> property 或 <code>reactive</code> 对象给 <code>provide</code> 来改变这种行为。在我们的例子中，如果我们想对祖先组件中的更改做出响应，我们需要为 provide 的 <code>todoLength</code> 分配一个组合式 API <code>computed</code> property：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">todoLength</span>: <span class="title class_">Vue</span>.<span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="property">length</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;todo-list-statistics&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;todoLength&#x27;</span>],</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Injected property: <span class="subst">$&#123;<span class="variable language_">this</span>.todoLength.value&#125;</span>`</span>) <span class="comment">// &gt; 注入的 property: 5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>setup</p><p>参数 props  是响应式数据，<strong>不能使用 ES6 直接解构</strong>，它会消除 prop 的响应性。</p><p>context</p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220408140614333.png" alt="image-20220408140614333"></p><p>执行 <code>setup</code> 时，你只能访问以下 property：</p><ul><li><code>props</code></li><li><code>attrs</code></li><li><code>slots</code></li><li><code>emit</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>composition-API</title>
      <link href="/2022/05/26/composition-API/"/>
      <url>/2022/05/26/composition-API/</url>
      
        <content type="html"><![CDATA[<ol><li><p>setup(props, context)</p><p>Composition API 的入口，从 vue2 生命周期钩子的视角来看，它会在 <code>beforeCreate</code> 钩子之后，<code>created</code> 之前被调用+，<code>setup</code> 也可以返回一个函数，函数中也能使用当前 <code>setup</code> 函数作用域中的响应式数据</p><p>props是响应式（不要结构出来否则失去响应式特性），context<code>(上下文对象，从原来 2.x 中 this 选择性地暴露了一些</code>property</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">      attrs,</span><br><span class="line">      emit,</span><br><span class="line">      isServer,</span><br><span class="line">      listeners,</span><br><span class="line">      parent,</span><br><span class="line">      refs,</span><br><span class="line">      root,</span><br><span class="line">      slots,</span><br><span class="line">      ssrContext,</span><br><span class="line">    &#125; = context</span><br></pre></td></tr></table></figure></li><li><p>ref &amp; reactive创建响应式数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>) <span class="comment">// &#123; value: 0 &#125;</span></span><br><span class="line"><span class="keyword">let</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">number</span>: <span class="number">0</span> &#125;)</span><br></pre></td></tr></table></figure><p>区别：// @TODO</p></li><li><p>toRef 和 toRefs</p><p>reactive 是将引入类型的数据变成响应式数据；而ref是将基本类型的数据转化为响应式数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let countRef = toRef(state, &#x27;count&#x27;)</span><br><span class="line">let stateAsRefs = toRefs(state2)</span><br></pre></td></tr></table></figure></li><li><p>computed</p><p>有两种使用方法：</p><ol><li><p>接受一个getter函数，返回一个不变的响应式对象</p></li><li><p>使用具有 get 和 set 函数的对象</p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211227143526277.png" alt="image-20211227143526277"></p></li></ol></li><li><p>watch</p><p> <img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211227143659669.png" alt="image-20211227143659669"></p></li><li><p>watchEffect</p><p>watchEffect的作用和watch一致，只不过在语法上有点不一样，watchEffect接收一个函数，在函数内的响应式对象有变化时，这个函数就会被执行一次。watchEffect返回暂停函数，当这个函数被调用后，watchEffect就不起作用了。</p></li></ol><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220124095254388.png" alt="image-20220124095254388"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>eslint</title>
      <link href="/2022/05/26/eslint/"/>
      <url>/2022/05/26/eslint/</url>
      
        <content type="html"><![CDATA[<h1 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h1><p>使用</p><ol><li><p>安装</p><p>局部安装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install eslint --save-dev</span><br></pre></td></tr></table></figure><p>全局安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g eslint</span><br></pre></td></tr></table></figure></li><li><p>初始化 <strong>eslint –init</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/eslint --init</span><br></pre></td></tr></table></figure></li></ol><p>配置说明：</p><p><strong>env</strong> 指定脚本的运行环境。</p><p><strong>parser</strong> 指定解析器，默认：Espress</p><p><strong>parserOptions</strong> 指定要支持的 JavaScript 语言选项</p><p><strong>globals</strong> 定义全局变量，允许未声明使用。[writable”,”readonly”, “off”]</p><p><strong>extends</strong> 可以被基础配置中的已启用的规则继承。 如：’extends’: ‘eslint:recommended’,</p><p><strong>rules</strong> 规则</p><p><strong>plugins</strong> 使用第三方插件</p><p><strong>processor</strong> 插件可以提供处理器。配合plugins使用。处理器可以从另一种文件中提取 JavaScript 代码，然后让 ESLint 检测 JavaScript 代码。或者处理器可以在预处理中转换 JavaScript 代码。</p><p><strong>overrides</strong> 为特定类型的文件指定处理器。<code>overrides</code> 键和 <code>processor</code> 键的组合</p><p>.eslintignore 文件配置要忽略的文件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gulp使用</title>
      <link href="/2022/05/26/gulp%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/05/26/gulp%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h1><p>gulp 是基于 node 实现 Web 前端自动化开发的工具，利用它能够极大的提高开发效率。</p><ol start="0"><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure><p>成功后查看版本 gulp -v</p></li><li><p>运行</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp [task-name]</span><br></pre></td></tr></table></figure><h4 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h4><ol><li><p>Did you forget to signal async completion?</p><p>原因：</p><p>gulp4中需要指定task结束<br> gulp4中，必须告诉gulp我们的task任务已经完成了。gulp3中，我们不必要这么做，因为如果没有发出异步完成信号，那么当任务返回时，gulp会认为它已经完成了，gulp4中必须明确指出任务完成了。</p></li></ol><p>方法一：告诉gulp任务完成的另一个常见方法是 返回(return) 一个流或者** Promise**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify:js&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;client/**/*.js&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">minify</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;build&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>方法二：使用回调函数作为您的任务的第一个参数，只需在完成时调用该函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;clean&#x27;</span>, <span class="keyword">function</span>(<span class="params">done</span>) &#123;</span><br><span class="line">  <span class="title function_">del</span>([<span class="string">&#x27;build]);</span></span><br><span class="line"><span class="string">    done();</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2022/05/26/git/"/>
      <url>/2022/05/26/git/</url>
      
        <content type="html"><![CDATA[<p>#简介：分布式版本控制系统</p><p>#原理：git 用来跟踪管理版本库的</p><p>在 GIt 中，你的文件可能会处于三种状态之一：</p><ul><li><strong>已修改（modified）</strong> - 已修改表示修改了文件，但还没保存到数据库中。</li><li><strong>已暂存（staged）</strong> - 已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li><li><strong>已提交（committed）</strong> - 已提交表示数据已经安全的保存在本地数据库中。</li></ul><p>不同状态的文件在 Git 中处于不同的工作区域。</p><p><strong>工作区（working）</strong> - 当你 <code>git clone</code> 一个项目到本地，相当于在本地克隆了项目的一个副本。工作区是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p><p><strong>暂存区（staging）</strong> - 暂存区是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’’，不过一般说法还是叫暂存区。</p><p><strong>本地仓库（local）</strong> - 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 本地仓库。</p><p><strong>远程仓库（remote）</strong> - 以上几个工作区都是在本地。为了让别人可以看到你的修改，你需要将你的更新推送到远程仓库。同理，如果你想同步别人的修改，你需要从远程仓库拉取更新。</p><p><img src="https://pic2.zhimg.com/80/v2-3bc9d5f2c49a713c776e69676d7d56c5_1440w.jpg" alt="image"></p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220524140506078.png" alt="image-20220524140506078"></p><p>#git 命令</p><ol><li><p>重新设置账号密码 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system --unset credential.helper</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;XX&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;XX&quot;</span><br></pre></td></tr></table></figure></li><li><p>新建仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>添加修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git add [file1] [file2] [file3] ... // add file </span><br><span class="line"></span><br><span class="line">git ads [dir] // add files in catalogue</span><br><span class="line"></span><br><span class="line">git add . // all file</span><br><span class="line"></span><br><span class="line">git add -A // 把所有修改添加到暂存区</span><br></pre></td></tr></table></figure></li><li><p>储藏 —— 将本地的修改内容作为草稿储藏起来</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git stash // 将修改作为当前分支的草稿保存</span><br><span class="line"></span><br><span class="line">git stash list // 查看草稿列表</span><br><span class="line"></span><br><span class="line">git stash drop stash@&#123;0&#125; //删除草稿</span><br><span class="line"></span><br><span class="line">$ git stash apply stash@&#123;0&#125; //读取草稿</span><br></pre></td></tr></table></figure><ol start="6"><li><p>遴选</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;hashA&gt; &lt;hashB&gt; </span><br><span class="line">// 可以转移从 A 到 B 的所有提交 不包含A</span><br><span class="line">git cherry-pick A..B </span><br><span class="line">// 可以转移从 A 到 B 的所有提交 含提交A</span><br><span class="line">git cherry-pick A^..B </span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>修改最后一次push commit 的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend &lt;message&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>.git 文件夹下的配置文件 config</p><p>[remote “origin”]  ，https:// 之后 增加 用户名:密码@</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iconfont使用</title>
      <link href="/2022/05/26/iconfont%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/05/26/iconfont%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>前言</p><p>iconfont 支持单色图标和多色图标</p><p>区别</p><p><img src="C:%5CUsers%5Cymshan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211130120001775.png" alt="image-20211130120001775"></p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211130115948867.png" alt="image-20211130115948867"></p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211130120223828.png" alt="image-20211130120223828"></p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211130120140324.png" alt="image-20211130120140324"></p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211130132508424.png" alt="image-20211130132508424"></p><p>![image-20211130132527647](<a href="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211130132527647.png">https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211130132527647.png</a></p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211130134357951.png" alt="image-20211130134357951"></p><p><strong>总结</strong>：使用Unicode 引入需要@font-face 及iconfont类；  font-class引入需要在前者基础上使用对应code的类；Symbol引入 需要js </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 50rpx;&quot;</span>&gt;</span><span class="symbol">&amp;#xe6ce;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-ic__yuyuejilu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 50rpx;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- .icon-ic__yuyuejilu:before &#123;</span></span><br><span class="line"><span class="comment">content: &quot;\e6ce&quot;;</span></span><br><span class="line"><span class="comment">&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-ic__yuyuejilu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="uniapp-使用iconfont"><a href="#uniapp-使用iconfont" class="headerlink" title="uniapp 使用iconfont"></a>uniapp 使用iconfont</h4><ol><li><p>编译成h5 ，正确引入 iconfont 引入的文件路径即可使用；但是不支持svg（iconfont.js会报错）</p></li><li><p><a href="https://blog.csdn.net/qq_42540989/article/details/111356678">uniapp 开发小程序使用iconfont彩色图标</a></p></li></ol><h3 id="封装icon示例"><a href="#封装icon示例" class="headerlink" title="封装icon示例"></a>封装icon示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">    &lt;use :xlink:href=&quot;iconName&quot;&gt;&lt;/use&gt;</span><br><span class="line">  &lt;/svg&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 使用svg需要引入iconfont字体的js文件，并且</span><br><span class="line">*</span><br><span class="line">*/</span><br><span class="line">&lt;script type=&quot;text/jsx&quot;&gt;</span><br><span class="line">import &#x27;../assets/icon/iconfont&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;icon&#x27;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      require: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    iconName() &#123;</span><br><span class="line">      return `#icon-$&#123;this.name&#125;`</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.icon &#123;</span><br><span class="line">  width: 1em;</span><br><span class="line">  height: 1em;</span><br><span class="line">  vertical-align: -0.15em;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>彩色图标 font-weight 大于500 会显示异常 ,因此可以在字体定义的时候设置font-weight</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2022/05/26/linux/"/>
      <url>/2022/05/26/linux/</url>
      
        <content type="html"><![CDATA[<p>文件目录显示</p><ul><li>蓝色 表示文件夹；</li><li>灰色 表示普通文件；</li><li>绿色 表示可执行文件；</li><li>红色 表示压缩文件；</li><li>天蓝色 表示链接文件（快捷方式）；</li></ul><p>常见目录</p><ul><li><strong>bin：</strong> 存放普通用户<strong>可执行的指令</strong>，普通用户也可以执行；</li><li><strong>dev ：</strong> 设备目录，所有的<strong>硬件设备及周边</strong>均放置在这个设备目录中；</li><li><strong>boot ：</strong> <strong>开机引导</strong>目录，包括 Linux 内核文件与开机所需要的文件；</li><li><strong>home：</strong> 这里主要存放你的<strong>个人数据</strong>，具体每个用户的设置文件，用户的桌面文件夹，还有用户的数据都放在这里。每个用户都有自己的用户目录，位置为：<code>/home/用户名</code>。当然，root 用户除外；</li><li><strong>usr：</strong> <strong>应用程序</strong>放置目录；</li><li><strong>lib：</strong> 开机时常用的<strong>动态链接</strong>库，bin 及 sbin 指令也会调用对应的 lib 库；</li><li><strong>tmp：</strong> 临时文件存放目录 ；</li><li><strong>etc：</strong> 各种<strong>配置文件</strong>目录，大部分配置属性均存放在这里；</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux学习</title>
      <link href="/2022/05/26/linux%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/26/linux%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node安装使用</title>
      <link href="/2022/05/26/node%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/05/26/node%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="node-安装"><a href="#node-安装" class="headerlink" title="node 安装"></a>node 安装</h4><ol><li><p>双击运行：<img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820113104311.png" alt=""></p></li><li><p>其他基本安装默认设置安装即可，也可以自定义路径安装：</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820113158414.png" alt="image-20210820113158414"></p></li></ol><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820113220463.png" alt="image-20210820113220463"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820113241473.png" alt="image-20210820113241473"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step6.png" alt="install-node-msi-version-on-windows-step6"></p><p>![(<a href="https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step6.png">https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step6.png</a>)</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step7.png" alt="install-node-msi-version-on-windows-step7"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/install-node-msi-version-on-windows-step8.png" alt="install-node-msi-version-on-windows-step8"></p><h4 id="node运行项目"><a href="#node运行项目" class="headerlink" title="node运行项目"></a>node运行项目</h4><p>​    可直接打开文件目录，输入cmd命令行进行后续运行项目操作，详情请见开发及部署文档说明.md。也可以输入start.bat根据提示输入对应选项进行安装：</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820125956366.png" alt="image-20210820125956366"></p><p>特别说明：npm默认源因为访问慢等各种不可抗力因素经常会出现安装出错(整体或部分包)。出现报错情况很正常，请拿出专业和耐心，找出报错信息所指向的包，执行npm install  XXXX 即可。如多次安装也不行，请切换npm registry 或安装cnpm 进行install 操作。</p><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><h1 id="Unexpected-end-of-JSON-input-while-parsing-near-‘…”"><a href="#Unexpected-end-of-JSON-input-while-parsing-near-‘…”" class="headerlink" title="Unexpected end of JSON input while parsing near ‘…”"></a>Unexpected end of JSON input while parsing near ‘…”</h1><p>设置仓库为淘宝的，然后清除缓存，重新下载依赖包</p><p>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a></p><p>npm cache clean –force </p><p>npm install</p><p>或者 安装cnpm </p><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></p><p>cnpm install</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820142455193.png" alt="image-20210820142455193"></p><h1 id="运行npm-run-lint-serve-build-时报错"><a href="#运行npm-run-lint-serve-build-时报错" class="headerlink" title="运行npm run lint/serve/build 时报错"></a>运行npm run lint/serve/build 时报错</h1><p>​    在完成 install操作后，进行标题上命令，多为eslint语法校验和程序代码错误：请根据提示进行代码修复后再运行。</p><p>如下：</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820143211138.png" alt="image-20210820143211138"></p><p>下图为启动本地运行：</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210820142936138.png" alt="image-20210820142936138"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pinia</title>
      <link href="/2022/05/26/pinia/"/>
      <url>/2022/05/26/pinia/</url>
      
        <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 使用 npm</span><br><span class="line">npm install pinia@next</span><br><span class="line"># 使用 yarn</span><br><span class="line">yarn add pinia@next</span><br></pre></td></tr></table></figure></li><li><p>引入</p><p>创建一个 pinia（根存储）并将其传递给应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createPinia &#125; from <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line">app.use(createPinia());</span><br></pre></td></tr></table></figure></li><li><p>了解State</p><p>defineStore：定义store</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineStore &#125; from &#x27;pinia&#x27;</span><br><span class="line"></span><br><span class="line">export default defineStore(&#123;</span><br><span class="line">  id: &#x27;app&#x27;,</span><br><span class="line">  state () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &#x27;码农小余&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; store.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import useAppStore from &#x27;./store/index&#x27;</span><br><span class="line">const store = useAppStore()</span><br><span class="line">console.log(store)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>this.$patch({})</p><p>可以同时修改多个值</p></li><li><p>$subscribe 用于监听 state 及其 mutation 动作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const store = useAppStore();</span><br><span class="line"></span><br><span class="line">store.$subscribe((mutation, state) =&gt; &#123;</span><br><span class="line">  console.log(mutation);</span><br><span class="line">  console.log(state);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>$onAction 可用于统计actions 的时间或者记录折扣点击总次数的时候</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>npm包调试</title>
      <link href="/2022/05/26/npm%E5%8C%85%E8%B0%83%E8%AF%95/"/>
      <url>/2022/05/26/npm%E5%8C%85%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>npm 包调试方法</p><ol><li><p>修改 pagekage.json的dependencies</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- &quot;@shengshunyan/utils&quot;: &quot;^1.0.2&quot;</span><br><span class="line">+ &quot;@shengshunyan/utils&quot;:&quot;file:/Users/guoshi/Desktop/shengshunyan-utils&quot;</span><br></pre></td></tr></table></figure><p>注意：修改pagekage.json 之后, 需要重新执行安装指令。并且安装之前，npm包需要先执行build操作。</p></li><li><p>npm link</p><ul><li><p>npm包项目 npm run build 后 执行npm link 操作。 npm ls –global ：查看链接效果 </p></li><li><p>引用项目下执行 npm link [npm 包] 后运行。npm ls ：查看链接效果</p></li></ul></li><li><p>yalc</p><ul><li><strong>npm install -g yalc</strong> 安装yalc 包</li></ul></li></ol><ul><li>npm包项目执行 <strong>yalc publish</strong> 【将组件库发布到本地】<ul><li>引用项目下执行 <strong>yalc link/add  [npm包]</strong>，后运行项目 npm run dev  【使用该组件库的项目中添加本地依赖】</li></ul></li><li><strong>yalc remove –all</strong> 【联调后去掉本地依赖】</li></ul><p>备注：为实现本地调试自动化发布或构建，引用nodemon</p><ul><li><p>package.json文件里添加scripts脚本 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注意这里要用引号 包含执行的命令，否则只能执行一半 */</span></span><br><span class="line"><span class="string">&quot;watch&quot;</span>: <span class="string">&quot;nodemon --ignore node_modules/ --watch src/ --ext vue,ts,js,tsx,scss -x \&quot;npm run build &amp;&amp; yalc push\&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><h6 id="npm-run-watch"><a href="#npm-run-watch" class="headerlink" title="npm run watch"></a>npm run watch</h6></li><li><h3 id="查看仓库信息"><a href="#查看仓库信息" class="headerlink" title="查看仓库信息"></a>查看仓库信息</h3><p>当我们要查看本地仓库里存在的包时</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yalc installations <span class="keyword">show</span></span><br></pre></td></tr></table></figure><p>要清理不需要的包时</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yalc installations clean [<span class="keyword">my</span>-<span class="keyword">package</span>]</span><br></pre></td></tr></table></figure></li></ul><p>备注：nodemon.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;restartable&quot;: &quot;rs&quot;,</span><br><span class="line">  &quot;ignore&quot;: [</span><br><span class="line">     &quot;.git&quot;,</span><br><span class="line">     &quot;node_modules/**/node_modules&quot;</span><br><span class="line">   ],</span><br><span class="line">   &quot;verbose&quot;: true,</span><br><span class="line">   &quot;execMap&quot;: &#123;</span><br><span class="line">     &quot;js&quot;: &quot;node --harmony&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;events&quot;: &#123;</span><br><span class="line">     &quot;restart&quot;: &quot;osascript -e &#x27;display notification \&quot;App restarted due to:\n&#x27;$FILENAME&#x27;\&quot; with title \&quot;nodemon\&quot;&#x27;&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;watch&quot;: [</span><br><span class="line">     &quot;test/fixtures/&quot;,</span><br><span class="line">     &quot;test/samples/&quot;</span><br><span class="line">   ],</span><br><span class="line">   &quot;env&quot;: &#123;</span><br><span class="line">     &quot;NODE_ENV&quot;: &quot;development&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;ext&quot;: &quot;js,json&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>   npm 源管理工具 nrm</p><ol><li>安装 npm install -g nrm</li><li>nrm ls 查看源列表</li><li>nrm add <alias-name><address> // eg：nrm add grgnpm <a href="http://10.1.3.24:4873">http://10.1.3.24:4873</a></li><li>nrm use <name> // eg：nrm use taobao。</li><li>nrm test  // npm 源测速</li><li>nrm test  <name> // 指定测速</li><li>nrm del <name> //删除源</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>qianku落地挖坑填坑系列</title>
      <link href="/2022/05/26/qianku%E8%90%BD%E5%9C%B0%E6%8C%96%E5%9D%91%E5%A1%AB%E5%9D%91%E7%B3%BB%E5%88%97/"/>
      <url>/2022/05/26/qianku%E8%90%BD%E5%9C%B0%E6%8C%96%E5%9D%91%E5%A1%AB%E5%9D%91%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>qiankun fetch 失败</p><ol><li>导出的生命周期有问题</li><li>子站没有开始允许跨域</li></ol><p>要解决的问题</p><p>1.样式污染问题主站与子项目间的</p><p><a href="https://blog.csdn.net/Lyrelion/article/details/119245884">qiankun 问题记录</a></p><p>iframe 跨域踩坑系列：</p><p>受到三种跨域限制：一是ajax请求限制；二是DOM无法获得；三是Cookie、LocalStorage 和 IndexDB 无法读取。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2022/05/26/vue/"/>
      <url>/2022/05/26/vue/</url>
      
        <content type="html"><![CDATA[<ol><li><p>MVVM概念</p><p>一种软件架构设计模式</p><p>model 数据模型</p><p>view 视图</p><p>viewModel </p></li><li><p>渐进式框架：</p><p>自底向上逐层应用。不必使用他的所有部分</p></li><li><p>生命周期</p><p>共8个，需要熟悉生命周期流程图</p><ol><li><p>初始化 Events 和Lifecycle；beforeCreated</p></li><li><p>初始化 Injections 和 reactivity；created</p></li><li><p>el‘option 或者$mount时， 将（el’ outerHtml 作为编译模板）compile template into render function；beforeMounted</p></li><li><p>create vm.$el &amp; replace el with it ;完成实例与虚拟dom的关联； Mounted</p></li><li><p>监听数据变化，beforeUpdate， virtual dom re-render &amp; patch</p></li><li><p>调用 $distroy ；执行 beforeDestory ；teardown watchers，child components &amp; event listeners；destoryed</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            msg:&quot;测试&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;&#125;,</span><br><span class="line">        computed:&#123;&#125;,</span><br><span class="line">        beforeCreate:function()&#123;</span><br><span class="line">            console.group(&quot;beforeCreate==&gt;&quot;);</span><br><span class="line">            console.log(&quot;this:&quot;,this); // 存在实例</span><br><span class="line">            console.log(&quot;$options:&quot;,this.$options); // 存在配置项</span><br><span class="line">            console.log(&quot;$el&quot;,this.$el); // 没有完成容器构建，所以 $el 为 undefined</span><br><span class="line">            console.log(&quot;$data:&quot;,this.$data); // 只完成了vue的环境，但没有完成数据装载，所以为 undefined</span><br><span class="line">            console.log(&quot;$data.msg:&quot;,this.msg);// 只完成了vue的环境，但没有完成数据装载，所以为 undefined</span><br><span class="line">            console.groupEnd();</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            console.group(&quot;created==&gt;&quot;);</span><br><span class="line">            console.log(&quot;this:&quot;,this);// 存在实例</span><br><span class="line">            console.log(&quot;$options:&quot;,this.$options);// 存在配置项</span><br><span class="line">            console.log(&quot;$el&quot;,this.$el);// 没有完成容器构建，所以 $el 为 undefined</span><br><span class="line">            // 在完成数据装载时，执行$options.data 方法 （mergedInstanceDataFn())</span><br><span class="line">            // 主要用于完成数据对象的合并 和 数据劫持的执行，最终返回一个具有劫持的 数据对象</span><br><span class="line">            // 提供vue实例的 $data</span><br><span class="line">            console.log(&quot;$data:&quot;,this.$data); // 已经完成了vue的基本功能定义，所以已存在数据仓库</span><br><span class="line">            console.log(&quot;$data.msg:&quot;,this.msg);// 已经完成了vue的基本功能定义，所以已存在变量</span><br><span class="line">            console.groupEnd();</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>   <strong>自定义组件的v-model</strong></p><p>   <code>v-model</code> 默认会利用名为 <code>value</code> 的 prop 和名为 <code>input</code> 的事件.</p><p>   像单选框、复选框等类型的输入控件可能会将 <code>value</code> attribute 用于不同的目的</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;base-checkbox&#x27;, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &#x27;checked&#x27;,</span><br><span class="line">    event: &#x27;change&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    checked: Boolean</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:checked</span>=<span class="string">&quot;checked&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:change</span>=<span class="string">&quot;$emit(&#x27;change&#x27;, $event.target.checked)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   <strong>this.$listeners</strong></p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;base-input&#x27;, &#123;</span><br><span class="line">  inheritAttrs: false,</span><br><span class="line">  props: [&#x27;label&#x27;, &#x27;value&#x27;],</span><br><span class="line">  computed: &#123;</span><br><span class="line">    inputListeners: function () &#123;</span><br><span class="line">      var vm = this</span><br><span class="line">      // `Object.assign` 将所有的对象合并为一个新对象</span><br><span class="line">      return Object.assign(&#123;&#125;,</span><br><span class="line">        // 我们从父级添加所有的监听器</span><br><span class="line">        this.$listeners,</span><br><span class="line">        // 然后我们添加自定义监听器，</span><br><span class="line">        // 或覆写一些监听器的行为</span><br><span class="line">        &#123;</span><br><span class="line">          // 这里确保组件配合 `v-model` 的工作</span><br><span class="line">          input: function (event) &#123;</span><br><span class="line">            vm.$emit(&#x27;input&#x27;, event.target.value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &#123;&#123; label &#125;&#125;</span><br><span class="line">      &lt;input</span><br><span class="line">        v-bind=&quot;$attrs&quot;</span><br><span class="line">        v-bind:value=&quot;value&quot;</span><br><span class="line">        v-on=&quot;inputListeners&quot;</span><br><span class="line">      &gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   插槽新语法 2.6</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user #default=&quot;&#123; user:person &#125;&quot;&gt;</span><br><span class="line">  &#123;&#123; person.firstName &#125;&#125;</span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><p>   你甚至可以定义后备内容，用于插槽 prop 是 undefined 的情形：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user v-slot=&quot;&#123; user = &#123; firstName: &#x27;Guest&#x27; &#125; &#125;&quot;&gt;</span><br><span class="line">  &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><p>   <strong>动态参数！</strong></p><p>   <a href="[https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6](https://cn.vuejs.org/v2/guide/components-dynamic-async.html#异步组件)"><strong>异步组件</strong></a></p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;async-example&#x27;, function (resolve, reject) &#123;</span><br><span class="line">  setTimeout(function () &#123;</span><br><span class="line">    // 向 `resolve` 回调传递组件定义</span><br><span class="line">    resolve(&#123;</span><br><span class="line">      template: &#x27;&lt;div&gt;I am async!&lt;/div&gt;&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   一个推荐的做法是将异步组件和 <a href="https://webpack.js.org/guides/code-splitting/">webpack 的 code-splitting 功能</a>一起配合使用：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;async-webpack-example&#x27;, function (resolve) &#123;</span><br><span class="line">  // 这个特殊的 `require` 语法将会告诉 webpack</span><br><span class="line">  // 自动将你的构建代码切割成多个包，这些包</span><br><span class="line">  // 会通过 Ajax 请求加载</span><br><span class="line">  require([&#x27;./my-async-component&#x27;], resolve)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>处理加载状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const AsyncComponent = () =&gt; (&#123;</span><br><span class="line">  // 需要加载的组件 (应该是一个 `Promise` 对象)</span><br><span class="line">  component: import(&#x27;./MyComponent.vue&#x27;),</span><br><span class="line">  // 异步组件加载时使用的组件</span><br><span class="line">  loading: LoadingComponent,</span><br><span class="line">  // 加载失败时使用的组件</span><br><span class="line">  error: ErrorComponent,</span><br><span class="line">  // 展示加载时组件的延时时间。默认值是 200 (毫秒)</span><br><span class="line">  delay: 200,</span><br><span class="line">  // 如果提供了超时时间且组件加载也超时了，</span><br><span class="line">  // 则使用加载失败时使用的组件。默认值是：`Infinity`</span><br><span class="line">  timeout: 3000</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a><a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#依赖注入">依赖注入</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">provide: function () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    getMap: this.getMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 子代组件</span><br><span class="line">inject: [&#x27;getMap&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.w3cplus.com/vue/seven-ways-to-define-a-component-template-by-vuejs.html">Vue.js 定义组件模板的七种方式</a></p><p>$forceUpdate() 强制更新</p><p>混入：</p><p>mixins/extend 使用同样的策略进行合并</p><p>data ，methods<code>、</code>components、directives 合并冲突 是取组件对象的值</p><p>同名钩子函数将合并为一个数组，混入对象的钩子将在组件自身钩子<strong>之前</strong>调用</p><p>自定义指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 注册一个全局自定义指令 `v-focus`</span><br><span class="line">Vue.directive(&#x27;focus&#x27;, &#123;</span><br><span class="line">  // 当被绑定的元素插入到 DOM 中时……</span><br><span class="line">  inserted: function (el) &#123;</span><br><span class="line">    // 聚焦元素</span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 如果想注册局部指令，组件中也接受一个 directives 的选项：</span><br><span class="line">directives: &#123;</span><br><span class="line">  focus: &#123;</span><br><span class="line">    // 指令的定义</span><br><span class="line">    inserted: function (el) &#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p><ul><li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li><li><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li><li><code>update</code>：所在组件的 VNode 更新时调用，<strong>但是可能发生在其子 VNode 更新之前</strong>。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</li><li><code>componentUpdated</code>：指令所在组件的 VNode <strong>及其子 VNode</strong> 全部更新后调用。</li><li><code>unbind</code>：只调用一次，指令与元素解绑时调用。</li></ul><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>数据驱动、组件化</p><h3 id="三大要素"><a href="#三大要素" class="headerlink" title="三大要素"></a>三大要素</h3><ol><li><p>数据响应式： 监听数据变化并在视图更新<br> Object.defineProperty<br> proxy</p></li><li><p>模版引擎：提供描述视图的模板语法<br>插值语法 双大括号<br>指令 v-bind v-if v-on v-model v-for</p></li><li><p>渲染： 如何将模版转为 html<br>模板 =&gt; vdom =&gt; dom</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vuepress</title>
      <link href="/2022/05/26/vuepress/"/>
      <url>/2022/05/26/vuepress/</url>
      
        <content type="html"><![CDATA[<h1 id="vuepess"><a href="#vuepess" class="headerlink" title="vuepess"></a>vuepess</h1><h4 id="使用安装"><a href="#使用安装" class="headerlink" title="使用安装"></a>使用安装</h4><p>yarn init</p><p>yarn add -D vuepress | npm i -s vuepress</p><p>添加npm 命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;docs:dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vuepress dev docs&quot;</span><span class="punctuation">,</span> <span class="comment">// 本地运行</span></span><br><span class="line">    <span class="attr">&quot;docs:build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vuepress build docs&quot;</span> <span class="comment">// 打包</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>添加内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> docs &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;# Hello VuePress&#x27;</span> &gt; docs/README.md</span><br></pre></td></tr></table></figure><p>PowerShell：标记“&amp;&amp;”不是此版本中的有效语句分隔符<br>        将命令行语句中的 &amp;&amp; 改为分号 ; 就好了</p><h1 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">VuePress 遵循 “约定优于配置” 的原则，推荐的目录结构如下：</span><br><span class="line">.</span><br><span class="line">├── docs</span><br><span class="line">│   ├── .vuepress (可选的)      // 用于存放全局的配置、组件、静态资源等。</span><br><span class="line">│   │   ├── components (可选的) // 该目录中的 Vue 组件将会被自动注册为全局组件</span><br><span class="line">│   │   ├── theme (可选的)      // 用于存放本地主题</span><br><span class="line">│   │   │   └── Layout.vue</span><br><span class="line">│   │   ├── public (可选的)     // 静态资源目录。</span><br><span class="line">│   │   ├── styles (可选的)     // 用于存放样式相关的文件</span><br><span class="line">│   │   │   ├── index.styl     // 将会被自动应用的全局样式文件，会生成在最终的 CSS 文件结尾，具有比默认样式更高的优先级。</span><br><span class="line">│   │   │   └── palette.styl   // 用于重写默认颜色常量，或者设置新的 stylus 颜色常量。</span><br><span class="line">│   │   ├── templates (可选的, 谨慎配置) //存储 HTML 模板文件。</span><br><span class="line">│   │   │   ├── dev.html // 用于开发环境的 HTML 模板文件</span><br><span class="line">│   │   │   └── ssr.html // 构建时基于 Vue SSR 的 HTML 模板文件。</span><br><span class="line">│   │   ├── config.js (可选的) // 配置文件的入口文件，也可以是 YML 或 toml</span><br><span class="line">│   │   └── enhanceApp.js (可选的) // 客户端应用的增强</span><br><span class="line">│   │ </span><br><span class="line">│   ├── README.md</span><br><span class="line">│   ├── guide</span><br><span class="line">│   │   └── README.md</span><br><span class="line">│   └── config.md</span><br><span class="line">│ </span><br><span class="line">└── package.json</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>docs/.vuepress/config.js</p><h3 id="配置顶部导航栏"><a href="#配置顶部导航栏" class="headerlink" title="配置顶部导航栏"></a>配置顶部导航栏</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 顶部导航栏内容</span><br><span class="line">nav: [</span><br><span class="line">&#123; text: &#x27;首页&#x27;, link: &#x27;/&#x27; &#125;,</span><br><span class="line">&#123; text: &#x27;基础组件&#x27;, link: &#x27;/guide/basic/&#x27; &#125;,</span><br><span class="line">&#123;</span><br><span class="line">text: &#x27;使用&#x27;,</span><br><span class="line">items: [</span><br><span class="line">&#123; text: &#x27;首页&#x27;, link: &#x27;/guide/use/index&#x27; &#125;, // 可不写后缀 .md</span><br><span class="line">&#123; text: &#x27;测试&#x27;, link: &#x27;/guide/use/test&#x27; &#125;, // 外部链接</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="配置侧边栏"><a href="#配置侧边栏" class="headerlink" title="配置侧边栏"></a>配置侧边栏</h3><h4 id="配置分组（一个侧边栏）"><a href="#配置分组（一个侧边栏）" class="headerlink" title="配置分组（一个侧边栏）"></a>配置分组（一个侧边栏）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sidebar:[</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;Group 1&#x27;, // 必要的</span><br><span class="line">    // path: &#x27;/guide/basic/layout-common-onlyform.vue&#x27;, // 可选的, 标题的跳转链接，应为绝对路径且必须存在</span><br><span class="line">    children: [</span><br><span class="line">      &#x27;/&#x27;,</span><br><span class="line">      &#x27;/guide/basic/a&#x27;,</span><br><span class="line">      &#x27;/guide/basic/b&#x27;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;Group 2&#x27;,</span><br><span class="line">    children: [</span><br><span class="line">      &#x27;about&#x27;,</span><br><span class="line">      &#x27;about2&#x27;,</span><br><span class="line">      &#x27;/guide/tools/a&#x27;,</span><br><span class="line">      &#x27;/guide/tools/b&#x27;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h4 id="配置多个侧边栏"><a href="#配置多个侧边栏" class="headerlink" title="配置多个侧边栏"></a>配置多个侧边栏</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sidebar: &#123;</span><br><span class="line">&#x27;/guide/about/&#x27;: [&#x27;&#x27;, &#x27;index2&#x27;], // 第一个侧边栏</span><br><span class="line">&#x27;/guide/basic/&#x27;: [ // 第二个侧边栏</span><br><span class="line">&#x27;/guide/basic/&#x27;,</span><br><span class="line">        &#x27;/guide/basic/a&#x27;,</span><br><span class="line">        &#x27;/guide/basic/b.vue&#x27;,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">displayAllHeaders: true,  // 显示所有页面的标题链接 默认值：false, 激活当前页才会看见下面的标题</span><br></pre></td></tr></table></figure><h4 id="结合多个侧边栏和分组"><a href="#结合多个侧边栏和分组" class="headerlink" title="结合多个侧边栏和分组"></a>结合多个侧边栏和分组</h4><p>多个侧边栏和分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sidebar:&#123;</span><br><span class="line">  &#x27;/guide/basic/&#x27;: [</span><br><span class="line">    &#123;</span><br><span class="line">      title: &#x27;A&#x27;,</span><br><span class="line">      children: [&#x27;a1.md&#x27;, &#x27;a2&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: &#x27;B&#x27;,</span><br><span class="line">      children: [&#x27;&#x27;, &#x27;B&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  &#x27;/guide/tools/&#x27;: [</span><br><span class="line">    &#123;</span><br><span class="line">      title: &#x27;tools&#x27;,</span><br><span class="line">      children: [&#x27;a&#x27;, &#x27;b&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: &#x27;others&#x27;,</span><br><span class="line">      children: [&#x27;others&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Front-Matter"><a href="#Front-Matter" class="headerlink" title="Front Matter"></a>Front Matter</h3><p>  front matter 必须是 markdown 文件中的第一部分，并且必须采用在三点划线之间书写的有效的 YAML<br>  预定义变量：<br>  title<br>  lang<br>  description 当前页面的描述。<br>  layout  设置当前页面的布局组件<br>  keys 密码<br>  publish 发布<br>  tags<br>  categories<br>  sticky 置顶顺序</p><h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><h4 id="组件展示-源码-效果"><a href="#组件展示-源码-效果" class="headerlink" title="组件展示(源码)效果"></a>组件展示(源码)效果</h4><ol><li><p>安装  <code>vuepress-plugin-demo-container</code> 插件做组件demo</p></li><li><p>然后在<code>/docs/.vuepress/config.js</code>文件中配置上该插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins: [&#x27;demo-container&#x27;], // 配置插件</span><br></pre></td></tr></table></figure></li><li><p><strong>应用级别的配置</strong></p><p>新建文件：/docs/.vuepress/enhanceApp.js</p><p>在此文件中添加应用代码：如引入使用插件等等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; <span class="title class_">Vue</span> &#125;) =&gt; &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @vuepress/plugin-back-to-top</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@vuepress/back-to-top&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进度条插件"><a href="#进度条插件" class="headerlink" title="进度条插件"></a>进度条插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @vuepress/plugin-nprogress</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@vuepress/nprogress&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义颜色</li></ul><p>在你的 <strong>site</strong> 或 <strong>theme</strong> 的 <code>palette.styl</code> 文件中设置 <code>$nprogressColor</code> 来改变进度条的颜色（默认使用 <code>$accentColor</code>）。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vuepress/styles/palette.styl</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="comment">// .vuepress/theme/styles/palette.styl</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$nprogressColor</span> = red</span><br></pre></td></tr></table></figure><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>vuepress-theme-cli</p><p>npm i @nacelle/vuepress-theme-docs -S //  适用文档</p><p>vuepress-theme-quicksand</p><p>vuepress-theme-next</p><p>vuepress-theme-resume</p><p>vuepress-theme-ibank</p><p>vuepress-theme-reco！！</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Uncaught-Error-Cannot-find-module-‘core-js-library-fn-object-assign’"><a href="#Uncaught-Error-Cannot-find-module-‘core-js-library-fn-object-assign’" class="headerlink" title="Uncaught Error: Cannot find module ‘core-js/library/fn/object/assign’"></a>Uncaught Error: Cannot find module ‘core-js/library/fn/object/assign’</h3><p>原因：enhanceApp.js 引入js后报错，core-js版本问题</p><p>方案1：安装<a href="mailto:core-js@2.X">core-js@2.X</a></p><p>方案2：在config文件（路径docs.vuepress\config.js）中加上以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chainWebpack (config) &#123;</span><br><span class="line">    config.resolve.alias.set(&#x27;core-js/library/fn&#x27;, &#x27;core-js/features&#x27;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>低代码平台笔记</title>
      <link href="/2022/05/26/%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/26/%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ffc32091346968e50aae5ebfa347304fe3849d9056e7d2a622110f677c0b9e78">861a498f247eaa4e2a0e05ff5af6574ed09d8da929dd5d753abbea56389744a02acb8575de8707f46b3a1f24fce434c3448c66295ef7429d2482dd73f45acdb443d13afa6f3f1b44a287db51e8750f2a608858205fde9f69b8a1d39977bbf84c1c0ab4aff0eca4ed61fcc3f5555acefb1656b651a440deff9fd2f29ff67c5bf6d1b1dec2a099d6928d0f7355b8e491540dfcc4830351d6b95e0558bf3db330f3289f5eb08923b44113c491c49a379a7c6e04f212719cd373d657726a9e56ee495d3089309bb0245642e50703aff7c193e02ab15acda1ad2ec9753ab079aab99d2966bcda2a402fba00825a04c2ef79e045334011383724f7a3e104ac7f932313190c9a7c451d09a0647a8c5a57f0dea7595f51cbfe2eadf79fd7b44a068164caa3667609f9c8d9df3947e0d10e9140cf9ce1cab1588242a37cbdbc596f98f025f7009e013f68a94c4a1755c8f38d31fc257b225d6085d1ae34dc7c4aebe022747aa763295121245fd1f00b153407aea05e133e219425e5540d6a64a05fc86f2c30febf964077661b606880c04e79cdc24a12de8e4f4a23256177cd98a908d9f3bf650816fe54311f541650ad8b098a67fea7962b43d571708cb2796f55126d2fe4090d5692075645b2ce5c3ff790998170db32c178341e27716923ffc4950d98123cd1cac484bc2fbf305cf2bda78b88ec693db8e259177a12673ff9997ab03c53c920c83d2d06404a3ab73d55b8915d2abf5ce94b1fa3edaf108f4b3e068eb3ea807ba84c6d56f949915a41863b82fcc1e9118eb7f470dc0335e3156583d2af1c86fa91b08afa01d4fd0d6bc180ba55d7e122e3175ec919137130f260ff4e222829a2a159aebccace660503086bbf1549f3b5923b57bc8d754158f31c6315522875a1049a39c78b99e7de4c5a5980a4eeba3b0681b9a431d433382ece6873d38f389fe3169daddeddbc3e877603b35949c15e852062c7cf9ca5428794e9016a31a114412e3f02e05d0bc5219ee751dde224e8bb0531f6426fcf8afec92049914ed842744cab77148de634adbb03c85f84e947d4a38e9f4c680926cecf247dcdf32c6480c56e85f3a5b4f68cecdfe0554218c05f9610888169eaaf124c2af15cc6c848f28bd77fe44c605acb5e5bdf1fe1cc92d9e154619d62cd9f6d09e86590885b1496586724bcefd30df43691150b2184b71cc0fa8543cbe35f6c0f4a27bfaa5e306eacc45d99a7435aa97cc1395a3f84283904ac7b965e6fadd6cac4f1a9dd64ec7f4f644e7977426ece585e8bef1a0da1d08704916bbe456945179b7d266cdbefbb26b1888676f027692c8597865ff4aa155f1c8043ee7d0bf3dc7225f3b53661800a583700a8f4064693cbd796f088d75dfa05b704c198554c582bd29f00a0351a191efe073f2050a06e475bdc33d43a80dc5104a38c83dc5d8f3dc03e20651bef83711d9a58b9778abfc7dbef3ddbd88df5c9f8476b73b65fdace57f6748cce3ed33f782ef90382ecf72b02f53fce19569c4eb9521e608e55ba3351c0a81cef7656932b6750c7f7ddc5eb67eb2012a3e8623d7c60cdb0a233fd62ec2af2e03626a40a085b6079e7c3eab8d815339cd57d3def5e89f2c35d0f72dd908f689fa1af5eead5cfb73b3462826f695c356049718d5aeacaf7065c614e9e0936b004f7ec987eb451c7bfe0af52ff8bcc4dff5aed093489ce1eed077c01e022f1bc554e910c00986306fd89558389464c27f42d4996af2c0dd7a461e0bbc1712af9eba7b977b027d0b3a89700b7931fe55621eb4db1783999aad1ff2f5984001d21e4c597e12afa5c7e2a82727e8c2850441bcaa88a5a344d5eca402ccdca7311eddbede04aa88c77591c5aa4f09808e141949f806280149099e878556ee430e518e69d9513e9f24282ff46ab8579d43dc30dcaf06aca36b86f6abc97f942b6084eb68237efb930e92874f34b370dd0ba5803ce5721bd7a47f6fd2cabface7e13a129985d2d30c104645948d01b66a8e9620c9bcc36e8e91e19015c00a589e606fbd9d258308fc7aff33e84a6f1702db4b9e230330ba4657506413642c973daf23d7a015ed2a7fd64328fc7d2ecbddd9009202378c99504e131997ace913aab1105d7934e9f10434c06e7a50dcc970ec5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从0搭建脚手架</title>
      <link href="/2022/05/26/%E4%BB%8E0%E6%90%AD%E5%BB%BA%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2022/05/26/%E4%BB%8E0%E6%90%AD%E5%BB%BA%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="常用库介绍"><a href="#常用库介绍" class="headerlink" title="常用库介绍"></a>常用库介绍</h1><ol><li><p>commander-自定义命令行指令 【可处理控制台命令的工具】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env node</span><br><span class="line"></span><br><span class="line">const program = require(&#x27;commander&#x27;)</span><br><span class="line">const &#123;version&#125; = require(&#x27;../src/config&#x27;)</span><br><span class="line">program</span><br><span class="line">  .name(&#x27;mcli&#x27;)</span><br><span class="line">  .description(&#x27;this is a fast tools to init a program project&#x27;)</span><br><span class="line">  .version(version, &#x27;-v, --version&#x27;)</span><br><span class="line">  .command(&#x27;init &lt;name&gt;&#x27;) // 定义命令行指令</span><br><span class="line">  .alias(&#x27;i&#x27;) // 指令别名</span><br><span class="line">  .description(&#x27;init a new project&#x27;) //描述，将在help的时候展示</span><br><span class="line">  .option(&#x27;-t, --theme &lt;themename&gt;&#x27;, &#x27;初始化使用的主题&#x27;, &#x27;default&#x27;) // 定义参数, 短定义，长定义，描述，默认值</span><br><span class="line">  .usage(&#x27;&lt;commands&gt; [options]&#x27;) // 使用方式介绍</span><br><span class="line">  .action(name =&gt; &#123; //定义一个callback函数</span><br><span class="line">      // 打印命令行输入的值</span><br><span class="line">    console.log(&quot;你想创建的项目名是：&quot; + name)</span><br><span class="line">    console.log(process.argv) // 返回数组 process.argv就是用户在命令行中传入的参数</span><br><span class="line">  &#125;)</span><br><span class="line">  .parse()// 解析命令行</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>chalk-命令行美化工具 【可改变输出log颜色的工具】</p></li></ol><table><thead><tr><th></th><th></th><th>color</th><th>bgcolor</th></tr></thead><tbody><tr><td>reset</td><td>重置当前样式</td><td>black</td><td>bgBlack</td></tr><tr><td>bold</td><td>使文本加粗</td><td>red</td><td>bgRed</td></tr><tr><td>dim</td><td>使文本具有较低的不透明度</td><td>green</td><td>bgGreen</td></tr><tr><td>italic</td><td>使文本斜体</td><td>yellow</td><td>bgYellow</td></tr><tr><td>underline</td><td>下划线</td><td>blue</td><td>bgBlue</td></tr><tr><td>overline</td><td>上划线</td><td>magenta</td><td>bgMagenta</td></tr><tr><td>inverse</td><td>反转背景和前景色</td><td>cyan</td><td>bgCyan</td></tr><tr><td>hidden</td><td>打印文本但不可见</td><td>white</td><td>bgWhite</td></tr><tr><td>strikethrough</td><td>通过文本中心放置一条水平线</td><td>blackBright</td><td>bgBlackBright</td></tr><tr><td>visible</td><td></td><td>redBright</td><td>bgRedBright</td></tr><tr><td></td><td></td><td>greenBright</td><td>bgGreenBright</td></tr><tr><td></td><td></td><td>yellowBright</td><td>bgYellowBright</td></tr><tr><td></td><td></td><td>blueBright</td><td>bgBlueBright</td></tr><tr><td></td><td></td><td>magentaBright</td><td>bgMagentaBright</td></tr><tr><td></td><td></td><td>cyanBright</td><td>bgCyanBright</td></tr><tr><td></td><td></td><td>whiteBright</td><td>bgWhiteBright</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="property">red</span>.<span class="property">bold</span>.<span class="title function_">bgWhite</span>(<span class="string">&#x27;Hello World&#x27;</span>)); <span class="comment">// 常规用法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chalk<span class="string">`&#123;red.bold.bgWhite Hello World&#125;`</span>); <span class="comment">// 模板用法</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>inquirer-命令行交互工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">const inquirer = require(&#x27;inquirer&#x27;)</span><br><span class="line">inquirer.prompt([</span><br><span class="line">  &#123;</span><br><span class="line">    type: &#x27;input&#x27;, // 【type：input,confirm,list(选择),rawlist,checkbox,password...】</span><br><span class="line">    name: &#x27;name&#x27;, // key 名，存入的对应变量</span><br><span class="line">    message: &#x27;Your name&#x27;, // 提示信息</span><br><span class="line">    default: &#x27;my-node-cli&#x27; // 默认值</span><br><span class="line">  &#125;</span><br><span class="line">]).then(answers =&gt; &#123;</span><br><span class="line">console.log(answers)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> // 询问用户是否确定要覆盖</span><br><span class="line">      let &#123; action &#125; = await inquirer.prompt([</span><br><span class="line">        &#123;</span><br><span class="line">          name: &#x27;action&#x27;,</span><br><span class="line">          type: &#x27;list&#x27;,</span><br><span class="line">          message: &#x27;Target directory already exists Pick an action:&#x27;,</span><br><span class="line">          choices: [</span><br><span class="line">            &#123;</span><br><span class="line">              name: &#x27;Overwrite&#x27;,</span><br><span class="line">              value: &#x27;overwrite&#x27;</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">              name: &#x27;Cancel&#x27;,</span><br><span class="line">              value: false</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">      if (!action) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125; else if (action === &#x27;overwrite&#x27;) &#123;</span><br><span class="line">        // 移除已存在的目录</span><br><span class="line">        console.log(`\r\nRemoving...`)</span><br><span class="line">        await fs.remove(targetAir)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ora-命令行loading 动效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const ora = require(&#x27;ora&#x27;)</span><br><span class="line">// 自定义文本信息</span><br><span class="line">const message = &#x27;Loading unicorns&#x27;</span><br><span class="line">// 初始化</span><br><span class="line">const spinner = ora(message);</span><br><span class="line">// 开始加载动画</span><br><span class="line">spinner.start();</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    // 修改动画样式</span><br><span class="line"></span><br><span class="line">    // Type: string</span><br><span class="line">    // Default: &#x27;cyan&#x27;</span><br><span class="line">    // Values: &#x27;black&#x27; | &#x27;red&#x27; | &#x27;green&#x27; | &#x27;yellow&#x27; | &#x27;blue&#x27; | &#x27;magenta&#x27; | &#x27;cyan&#x27; | &#x27;white&#x27; | &#x27;gray&#x27;</span><br><span class="line">    spinner.color = &#x27;red&#x27;;    </span><br><span class="line">    spinner.text = &#x27;Loading rainbows&#x27;;</span><br><span class="line"></span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        // 加载状态修改</span><br><span class="line">        spinner.stop() // 停止</span><br><span class="line">        spinner.succeed(&#x27;Loading succeed&#x27;); // 成功 ✔</span><br><span class="line">        // spinner.fail(text?);  失败 ✖</span><br><span class="line">        // spinner.warn(text?);  提示 ⚠</span><br><span class="line">        // spinner.info(text?);  信息 ℹ</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;, 2000);</span><br></pre></td></tr></table></figure></li><li><p>cross-spawn-跨平台 shell 工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env node </span><br><span class="line"></span><br><span class="line">const spawn = require(&#x27;cross-spawn&#x27;);</span><br><span class="line">const chalk = require(&#x27;chalk&#x27;)</span><br><span class="line"></span><br><span class="line">// 定义需要按照的依赖</span><br><span class="line">const dependencies = [&#x27;vue&#x27;, &#x27;vuex&#x27;, &#x27;vue-router&#x27;];</span><br><span class="line"></span><br><span class="line">// 执行安装</span><br><span class="line">const child = spawn(&#x27;npm&#x27;, [&#x27;install&#x27;, &#x27;-D&#x27;].concat(dependencies), &#123; </span><br><span class="line">    stdio: &#x27;inherit&#x27; </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 监听执行结果</span><br><span class="line">child.on(&#x27;close&#x27;, function(code) &#123;</span><br><span class="line">    // 执行失败</span><br><span class="line">    if(code !== 0) &#123;</span><br><span class="line">        console.log(chalk.red(&#x27;Error occurred while installing dependencies!&#x27;));</span><br><span class="line">        process.exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    // 执行成功</span><br><span class="line">    else &#123;</span><br><span class="line">        console.log(chalk.cyan(&#x27;Install finished&#x27;))   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>文件操作-覆盖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// lib/create.js</span><br><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">const fs = require(&#x27;fs-extra&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = async function (name, options) &#123;</span><br><span class="line">  // 执行创建命令</span><br><span class="line"></span><br><span class="line">  // 当前命令行选择的目录</span><br><span class="line">  const cwd  = process.cwd(); // 获取node.js流程的当前工作目录</span><br><span class="line">  // 需要创建的目录地址</span><br><span class="line">  const targetAir  = path.join(cwd, name)</span><br><span class="line"></span><br><span class="line">  // 目录是否已经存在？</span><br><span class="line">  if (fs.existsSync(targetAir)) &#123;</span><br><span class="line"></span><br><span class="line">    // 是否为强制创建？</span><br><span class="line">    if (options.force) &#123;</span><br><span class="line">      await fs.remove(targetAir)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // TODO：询问用户是否确定要覆盖</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>figlet打印logo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// bin/cli.js</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .on(&#x27;--help&#x27;, () =&gt; &#123;</span><br><span class="line">    // 使用 figlet 绘制 Logo</span><br><span class="line">    console.log(&#x27;\r\n&#x27; + figlet.textSync(&#x27;zhurong&#x27;, &#123;</span><br><span class="line">      font: &#x27;Ghost&#x27;,</span><br><span class="line">      horizontalLayout: &#x27;default&#x27;,</span><br><span class="line">      verticalLayout: &#x27;default&#x27;,</span><br><span class="line">      width: 80,</span><br><span class="line">      whitespaceBreak: true</span><br><span class="line">    &#125;));</span><br><span class="line">    // 新增说明信息</span><br><span class="line">    console.log(`\r\nRun $&#123;chalk.cyan(`roc &lt;command&gt; --help`)&#125; show details\r\n`)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>如何获取版本信息</p><p>假设模板上传至github远程仓库</p><p>github 提供了</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fapi.github.com%2Forgs%2Fzhurong-cli%2Frepos">api.github.com/orgs/zhuron…</a> 接口获取模板信息</li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fapi.github.com%2Frepos%2Fzhurong-cli%2F%24%7Brepo%7D%2Ftags">api.github.com/repos/zhuro…</a> 接口获取版本信息</li></ul><p>我们在 lib 目录下创建一个 http.js 专门处理模板和版本信息的获取</p></li><li><p>download-git-repo 下载远程模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const util = require(&#x27;util&#x27;)</span><br><span class="line">const downloadGitRepo = require(&#x27;download-git-repo&#x27;) // 不支持 Promise</span><br><span class="line"></span><br><span class="line">// 下载远程模板</span><br><span class="line">  // 1）拼接下载地址</span><br><span class="line">  // 2）调用下载方法</span><br><span class="line">  async download(repo, tag)&#123;</span><br><span class="line"></span><br><span class="line">    // 1）拼接下载地址</span><br><span class="line">    const requestUrl = `zhurong-cli/$&#123;repo&#125;$&#123;tag?&#x27;#&#x27;+tag:&#x27;&#x27;&#125;`;</span><br><span class="line"></span><br><span class="line">    // 2）调用下载方法</span><br><span class="line">    await wrapLoading(</span><br><span class="line">      this.downloadGitRepo, // 远程下载方法</span><br><span class="line">      &#x27;waiting download template&#x27;, // 加载提示信息</span><br><span class="line">      requestUrl, // 参数1: 下载地址</span><br><span class="line">      path.resolve(process.cwd(), this.targetDir)) // 参数2: 创建位置</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    await this.download(repo, tag)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="编写cli"><a href="#编写cli" class="headerlink" title="编写cli"></a>编写cli</h2><h3 id="package-json-bin-本地全局注册命令"><a href="#package-json-bin-本地全局注册命令" class="headerlink" title="package.json bin 本地全局注册命令"></a>package.json bin 本地全局注册命令</h3><p>bin 自定义命令，要安装到 PATH 中的可执行文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;bin&quot;: &#123;</span><br><span class="line">    &quot;mcli&quot;: &quot;./bin/index.js&quot; // 可执行文件入口</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="使用eslint"><a href="#使用eslint" class="headerlink" title="使用eslint"></a>使用eslint</h3><p>安装eslint</p><p>初始化eslint 注：npx 表示从当前路径下查找命令，即 ./node_modules/.bin/eslint –init</p><p>npx eslint –init</p><p>配置快捷命令 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">&quot;lint&quot;: &quot;eslint bin&quot; // 校验bin目录下的文件</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="usr-bin-env-node"><a href="#usr-bin-env-node" class="headerlink" title="#! /usr/bin/env node"></a>#! /usr/bin/env node</h3><p><code>/usr/bin/env</code> 就是告诉系统可以在PATH目录中查找。 所以配置 <code>#!/usr/bin/env node</code> , 就是解决了不同的用户node路径不同的问题，可以让系统动态的去查找node来执行你的脚本文件。</p><h1 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h1><ol start="0"><li><p>调试技巧</p><p>cli项目完成编码后运行 npm link 然后在其他地方执行 &lt;包名&gt;即可</p><p>或者执行yarn link ;其他地方执行 yarn link &lt;包名&gt;</p></li><li><p>Error: EISDIR: illegal operation on a directory, read</p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220126160646216.png" alt="image-20220126160639344"></p><p>原因： templates 目录下文件目录结构复杂，不是单纯文件。</p></li><li><p>这段代码不知道啥意思<img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220128091031079.png" alt="image-20220128091031079"></p></li><li><h3 id="配置husky"><a href="#配置husky" class="headerlink" title="配置husky"></a>配置husky</h3><p>使用git提交前，校验代码是否符合规范</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;hooks&quot;： &#123;</span><br><span class="line">&quot;pre-commit&quot;: &quot;npm run lint&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>循环</p><p>Reflect.ownKeys(mapActions).  类似于Object.keys</p></li></ol></li></ol><p> cli 带 PWA</p><p>参考资料：</p><ol><li><p><a href="https://juejin.cn/post/6967637968244703268#heading-0">https://juejin.cn/post/6967637968244703268#heading-0</a></p></li><li><p><a href="https://juejin.cn/post/6844904158701551630">https://juejin.cn/post/6844904158701551630</a></p></li><li><p><a href="https://juejin.cn/post/7021097811491946503【重点】">https://juejin.cn/post/7021097811491946503【重点】</a></p><p>【代码地址】<a href="https://github.com/zxyue25/cli-template">https://github.com/zxyue25/cli-template</a></p></li><li><p><a href="https://juejin.cn/post/7033745421084131341【重要，难看懂】">https://juejin.cn/post/7033745421084131341【重要，难看懂】</a></p></li><li><p><a href="https://juejin.cn/post/7010673349571379231【简单易懂详细】">https://juejin.cn/post/7010673349571379231【简单易懂详细】</a></p></li><li><p>源码：<a href="https://github.com/YvetteLau/Blog/tree/master/eos-cli">https://github.com/YvetteLau/Blog/tree/master/eos-cli</a></p><p><a href="https://juejin.cn/post/6844903896163303438">https://juejin.cn/post/6844903896163303438</a></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端安全</title>
      <link href="/2022/05/26/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
      <url>/2022/05/26/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-部署相关"><a href="#nginx-部署相关" class="headerlink" title="nginx 部署相关"></a>nginx 部署相关</h1><p>1.隐藏nginx 版本信息</p><p>server_tokens off;</p><p>2.xss攻击防范</p><h3 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h3><p>密码安全-密码加固</p><p>密码学（对称与非对称）</p><p>传输安全 HTTPS</p><p>Nodejs安全框架 hemelt</p><p>CSP策略 content-security-policy</p><h2 id="常见的web攻击方式"><a href="#常见的web攻击方式" class="headerlink" title="常见的web攻击方式"></a>常见的web攻击方式</h2><p>XSS</p><p>CSRF</p><p>点击劫持</p><p>SQL注⼊</p><p>OS注⼊</p><p>请求劫持</p><p>DDOS</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>Cross Site Scripting跨站脚本攻击XSS (Cross-Site Scripting)，跨站脚本攻击，因为缩写和CSS重叠，所以只能叫XSS。跨站脚本攻击是指通过存在安全漏洞的Web⽹站注册⽤户的浏览器内运⾏⾮法的HTML标签或JavaScript进⾏的⼀种攻击。</p><p>跨站脚本攻击有可能造成以下影响:</p><p><u>利⽤虚假输⼊表单骗取⽤户个⼈信息。</u></p><p><u>利⽤脚本窃取⽤户的Cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求。</u></p><p><u>显示伪造的⽂章或图⽚。</u></p><p>我们可以在页面的head部分使用meta标签设置CSP策略，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;``meta` `http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#x27;self&#x27;; img-src https://*; child-src &#x27;none&#x27;;&quot;&gt;</span><br></pre></td></tr></table></figure><p>也可以用后端代码中设置http响应头的方式设置CSP策略</p><p>CSP有两种策略模式：</p><ol><li>Content-Security-Policy</li></ol><p>　　不允许所有违反安全策略的资源和脚本加载和执行</p><ol start="2"><li>Content-Security-Policy-Report-Only(配置report-url使用)</li></ol><p>　　安全策略失效，但会向某一特定url(report-url)发送安全报告</p><p><img src="../images/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/image-20230131203026780.png" alt="image-20230131203026780"></p><p><img src="../images/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/image-20230131204844870.png" alt="image-20230131204844870"></p><p><img src="../images/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/image-20230131204907612.png" alt="image-20230131204907612"></p><p><img src="../images/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/image-20230131205036334.png" alt="image-20230131205036334"></p><p><img src="../images/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/image-20230131205754824.png" alt="image-20230131205754824"></p><p><img src="../images/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/image-20230131210750216.png" alt="image-20230131210750216"></p><p>css   </p><p><img src="../images/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/image-20230131210829771.png" alt="image-20230131210829771"></p><p><img src="../images/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/image-20230131215515494.png" alt="image-20230131215515494"></p><p><strong>CSRF防御</strong></p><p><img src="../images/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/image-20230131221212039.png" alt="image-20230131221212039"></p><p><img src="../images/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/image-20230131221606107.png" alt="image-20230131221606107"></p><p>DDOS</p><p><img src="../images/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/image-20230131225324401.png" alt="image-20230131225324401"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化</title>
      <link href="/2022/05/26/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2022/05/26/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h1><p>引入</p><p>从输⼊ URL 到⻚⾯加载完成，发⽣了什么？</p><ol><li>⽤户输⼊网址</li><li>浏览器根据 DNS 服务器得到域名的 IP 地址</li><li>和IP地址建⽴TCP链接发送HTTP请求 </li><li>服务器接收请求，查库，读⽂件等，拼接好返回的HTTP响应</li><li>浏览器得到返回内容（ ⾸屏HTML，只有 HTML 格式浏览器才能正确解析），开始渲染过程</li><li>解析html为dom </li><li>解析css 为css-tree</li><li>dom+ css ⽣成render-tree 绘图</li><li>加载script的js⽂件 </li><li>执⾏js</li></ol><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><ol><li>查看dns缓存</li><li>本地没缓存，发起dns请求，向本地配置的DNS服务器发请求(递归)</li></ol><p>优化： prefetch 预获取，⽐如使⽤了cdn的域名</p><p>大致分为：</p><ol><li><p>文件加载优化</p><ol><li>加载css文件</li><li>HTTP协议细节</li><li>从输入url到页面渲染过程</li><li>大厂怎么上线前端代码</li></ol></li><li><p>代码执行优化</p><ol><li>节流/防抖</li><li>重绘回流</li><li>ssr 执行更少DOM操作更少</li></ol></li></ol><p>HTTP/1.0中http请求发送同步创建TCP连接，http请求发送到服务端，服务端响应之后，该TCP连接也关闭。</p><p>HTTP/1.1 中可以某种方式声明保持TCP连接，可以串行多次请求传输。这时TCP连接需要三次握手消耗。第二次请求没有三次握手的消耗。</p><p>HTTP/1.2 中同一个TCP连接可以并发传输HTTP请求。</p><p>三次握手：</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210819104304603.png" alt="image-20210819104304603"></p><p>少加载文件</p><p>1.合理利用浏览器缓存</p><p>雅虎军规</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823130247947.png" alt="image-20210823130247947"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823130341779.png" alt="image-20210823130341779"></p><h4 id="前端性能监控"><a href="#前端性能监控" class="headerlink" title="前端性能监控"></a><a href="https://www.jianshu.com/p/1355232d525a">前端性能监控</a></h4><p>performance.getEntriesByType(“navigation”)</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823131231630.png" alt="image-20210823131231630">LightHouse 谷歌插件</p><p>npm install -g lighthouse </p><p>节流防抖 <img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823131625663.png" alt=""></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823132104720.png" alt="image-20210823132104720"></p><p>少操作dom</p><p>重绘 回流</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823132416264.png" alt="image-20210823132416264"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823132437975.png" alt="image-20210823132437975"></p><p>lazy-load</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823132600065.png" alt="image-20210823132600065"></p><p>vue</p><p>1.vi-if、v-show</p><p>2.与渲染无关的数据不放在data上，data 不要嵌套太多层</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823133443039.png" alt="image-20210823133443039"></p><p>react</p><p><strong><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823133515803.png" alt="image-20210823133515803"></strong></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823133537953.png" alt="image-20210823133537953"></p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823133612260.png" alt="image-20210823133612260"></p><p>移动端长列表 dom显示数量控制再窗口可见的3个page数据量</p><p>实现虚拟滚动效果</p><p><img src="https://gitee.com/msy-coding/photos/raw/master/typro_upload/image-20210823134025541.png" alt="image-20210823134025541"></p><p>web works。</p><p>vue</p><p><img src="C:%5CUsers%5Cymshan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210823134724237.png" alt="image-20210823134724237"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小白学习用电脑</title>
      <link href="/2022/05/26/%E5%B0%8F%E7%99%BD%E5%AD%A6%E4%B9%A0%E7%94%A8%E7%94%B5%E8%84%91/"/>
      <url>/2022/05/26/%E5%B0%8F%E7%99%BD%E5%AD%A6%E4%B9%A0%E7%94%A8%E7%94%B5%E8%84%91/</url>
      
        <content type="html"><![CDATA[<h3 id="window添加右键功能"><a href="#window添加右键功能" class="headerlink" title="window添加右键功能"></a>window添加右键功能</h3><ol><li>添加txt文件，并添加内容如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">; Open files</span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\Open with VS Code]</span><br><span class="line">@=&quot;Edit with VS Code&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\ymshan\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe,0&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\Open with VS Code\command]</span><br><span class="line">@=&quot;\&quot;C:\\Users\\ymshan\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot;</span><br><span class="line"></span><br><span class="line">; This will make it appear when you right click ON a folder</span><br><span class="line">; The &quot;Icon&quot; line can be removed if you don&#x27;t want the icon to appear</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\vscode]</span><br><span class="line">@=&quot;Open Folder as VS Code Project&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;\&quot;C:\\Users\\ymshan\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot;,0&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\vscode\command]</span><br><span class="line">@=&quot;\&quot;C:\\Users\\ymshan\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; This will make it appear when you right click INSIDE a folder</span><br><span class="line">; The &quot;Icon&quot; line can be removed if you don&#x27;t want the icon to appear</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\vscode]</span><br><span class="line">@=&quot;Open Folder as VS Code Project&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;\&quot;C:\\Users\\ymshan\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot;,0&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\vscode\command]</span><br><span class="line">@=&quot;\&quot;C:\\Users\\ymshan\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;</span><br></pre></td></tr></table></figure><p>其中：C:\Users\ymshan\AppData\Local\Programs\Microsoft VS Code\Code.exe为启用程序的路径</p><ol start="2"><li><p>文件保存后改为reg格式</p></li><li><p>执行即可。</p></li></ol><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ol><li><p>win + r 输入 regdit 打开注册表注册表编辑器</p></li><li><p>寻找路径：计算机\HKEY_CLASSES_ROOT\Directory\shell\</p></li><li><p>即可看见刚刚添加的vscode注册表项</p></li><li><p>点击查看：<strong>其实可以直接在这里加</strong></p><p>名称： 默认   类型: REG _SZ   数据: Open With   VSCode</p></li></ol><p>​       名称：Icon   类型: REG _SZ   数据: “C:\Users\ymshan\AppData\Local\Programs\Microsoft VS Code\Code.exe”,0</p><h1 id="添加系统变量"><a href="#添加系统变量" class="headerlink" title="添加系统变量"></a>添加系统变量</h1><p>有点貌似添加全局变量</p><p>我的电脑–右键–属性–高级系统设置–环境变量</p><p>先添加系统变量。如JAVA_HOME：程序文件所在的目录</p><p>然后用户变量path追加新添加的系统变量,分号(半角;)做分割,双%引用添加的系统变量。如%JAVA_HOME%</p><h1 id="生成SSH"><a href="#生成SSH" class="headerlink" title="生成SSH"></a>生成SSH</h1><p> <a href="https://www.jianshu.com/p/259773014e03">生成ssh</a></p><h1 id="typro-上传图片配置-link"><a href="#typro-上传图片配置-link" class="headerlink" title="typro 上传图片配置 link"></a>typro 上传图片配置 <a href="https://www.jianshu.com/p/d7bf3f9da6db">link</a></h1><ol><li><p>安装link 安装步骤安装，以及设置config</p></li><li><p>设置完成 picgo upload <img-path> 测试配置</p></li><li><p>在typro 首选项设置设置测试成功的命令（不需要加上图片地址）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;picBed&quot;: &#123;</span><br><span class="line">    &quot;current&quot;: &quot;gitee&quot;,</span><br><span class="line">    &quot;uploader&quot;: &quot;gitee&quot;,</span><br><span class="line">    &quot;smms&quot;: &#123;</span><br><span class="line">      &quot;token&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;gitee&quot;: &#123;</span><br><span class="line">      &quot;branch&quot;: &quot;master&quot;,</span><br><span class="line">      &quot;customPath&quot;: &quot;yearQuarter&quot;,</span><br><span class="line">      &quot;customUrl&quot;: &quot;&quot;,</span><br><span class="line">      &quot;path&quot;: &quot;typro_img_upload&quot;,</span><br><span class="line">      &quot;repo&quot;: &quot;yeminshan/photos&quot;,</span><br><span class="line">      &quot;token&quot;: &quot;8b3f83992c476dcc456a2dc569c81872&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;list&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;SM.MS图床&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;smms&quot;,</span><br><span class="line">        &quot;visible&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;腾讯云COS&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;tcyun&quot;,</span><br><span class="line">        &quot;visible&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;GitHub图床&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;github&quot;,</span><br><span class="line">        &quot;visible&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;七牛图床&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;qiniu&quot;,</span><br><span class="line">        &quot;visible&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;Imgur图床&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;imgur&quot;,</span><br><span class="line">        &quot;visible&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;阿里云OSS&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;aliyun&quot;,</span><br><span class="line">        &quot;visible&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;又拍云图床&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;upyun&quot;,</span><br><span class="line">        &quot;visible&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;gitee&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;gitee&quot;,</span><br><span class="line">        &quot;visible&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;shortKey&quot;: &#123;</span><br><span class="line">      &quot;picgo:upload&quot;: &#123;</span><br><span class="line">        &quot;enable&quot;: true,</span><br><span class="line">        &quot;key&quot;: &quot;CommandOrControl+Shift+P&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;upload&quot;,</span><br><span class="line">        &quot;label&quot;: &quot;快捷上传&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;server&quot;: &#123;</span><br><span class="line">      &quot;enable&quot;: true,</span><br><span class="line">      &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">      &quot;port&quot;: 36677</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;privacyEnsure&quot;: true,</span><br><span class="line">    &quot;showUpdateTip&quot;: true,</span><br><span class="line">    &quot;rename&quot;: false</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;picgoPlugins&quot;: &#123;</span><br><span class="line">    &quot;picgo-plugin-gitee-uploader&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;debug&quot;: true,</span><br><span class="line">  &quot;PICGO_ENV&quot;: &quot;GUI&quot;,</span><br><span class="line">  &quot;needReload&quot;: false,</span><br><span class="line">  &quot;picgo-plugin-gitee-uploader&quot;: &#123;</span><br><span class="line">    &quot;lastSync&quot;: &quot;2021-10-20 03:17:30&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_42454941/article/details/117263945">window管理多个ssh</a></p><h2 id="Mac-移动硬盘读取问题"><a href="#Mac-移动硬盘读取问题" class="headerlink" title="Mac 移动硬盘读取问题"></a>Mac 移动硬盘读取问题</h2><ol><li><p>diskutil list</p></li><li><p>diskutil mount /dev/XXX</p></li><li><p>sudo pkill -f fsck 杀死进程</p></li><li><p>查看  ps aux | grep fsck </p></li><li><p>修复 fsck_exfat -y -x /dev/XXX</p></li></ol><h2 id="破解带密码压缩"><a href="#破解带密码压缩" class="headerlink" title="破解带密码压缩"></a>破解带密码压缩</h2><p><a href="https://cloud.tencent.com/developer/article/2092291">破解方法</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>啊TODOLIST</title>
      <link href="/2022/05/26/%E5%95%8ATODOLIST/"/>
      <url>/2022/05/26/%E5%95%8ATODOLIST/</url>
      
        <content type="html"><![CDATA[<p>now：</p><ol><li>梯形css</li></ol><ol><li>搭建git 平台进行代码管理</li><li>自动化部署，jekins + 自动发布</li><li>device el-input 只输入数字指令</li><li>测试不加上locale.i18n((key, value) =&gt; i18n.t(key, value)); 时 element多语言切换是不是不生效</li><li>profill</li></ol><p>学习资源</p><p>1.<strong>twin-layout</strong></p><ol><li>列表*</li><li>动态表单</li><li>填单提交</li><li>校验</li><li>mock数据</li><li>倒置列表</li><li>小程序消息通知机制原理，实现，授权</li></ol><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220303200148325.png" alt="image-20220303200148325"></p><p>el-switch  改成有前置条件更改状态</p><p>组件</p><p>1.树 只展示， 加展开/搜索</p><p>1.0 有/没有增删改功能</p><p>1.1 静态数据</p><p>1.2 接口请求/有刷新功能</p><p>1.2.1 完整树显示</p><p>1.2.2 懒加载</p><p>1.3 节点单选/多选</p><p>2.动态表单</p><p>2.1 行内/排列/ 样式</p><p>3.表格</p><table><thead><tr><th>短期</th><th>长期</th><th>规划</th></tr></thead><tbody><tr><td><del>发布和上传vpsdoc-cli</del></td><td></td><td>vue路线：2/3源码阅读/常用ui框架阅读</td></tr><tr><td>发布queen-ui并上传</td><td></td><td>uniapp跨端</td></tr><tr><td>完善doc-template项目</td><td></td><td>JS基础 、犀牛书/es6/esnext、TS</td></tr><tr><td><del>mock数据问题集成进项目</del></td><td></td><td>React：文档入门/全家桶/demo项目源码学习（大师）/ui框架源码/跨端</td></tr><tr><td>admin-template项目（feelview-h5）</td><td></td><td></td></tr><tr><td>qiankun微服务实践方案</td><td></td><td></td></tr><tr><td>微服务实践脚手架</td><td></td><td></td></tr><tr><td>其他微服务实现方案</td><td></td><td></td></tr><tr><td>多页面项目实现方案</td><td></td><td></td></tr><tr><td>犀牛书研读</td><td></td><td></td></tr><tr><td>ES6+ES next</td><td></td><td></td></tr><tr><td>TS</td><td></td><td></td></tr><tr><td>Vue3</td><td></td><td></td></tr><tr><td>react</td><td></td><td></td></tr><tr><td>code review</td><td></td><td></td></tr><tr><td>异步操作</td><td></td><td></td></tr><tr><td>现有项目截取接口数据写mock</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>功能</th><th>细则</th><th></th></tr></thead><tbody><tr><td>督办单</td><td>1.批量关闭不要<br />2.详情弹窗/多tab/混合form和表格<br />3.关闭 2 + btn</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>1.<del>人员/窗口申报，接口报错</del></p><p>2.<del>人员申报表单问题，监听问题 初始化不触发  两方案</del></p><p>3.<del>企业号切换用户问题，刷新，back 不重复触发登录问题</del></p><p>4.<del>企业号业务接口过期问题如何解决</del></p><p>5.<del>审批流 avue-select-window。不触发初始化渲染</del> </p><p>6.安全评估报告</p><p>7.<del>企业号字典获取，获取list，获取name</del></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>批处理</title>
      <link href="/2022/05/26/%E6%89%B9%E5%A4%84%E7%90%86/"/>
      <url>/2022/05/26/%E6%89%B9%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo 是否执行install操作[y/n]:</span><br><span class="line">set /p o=</span><br><span class="line">if &quot;%o%&quot; == &quot;y&quot; (</span><br><span class="line">  call npm install</span><br><span class="line">  call npm run serve</span><br><span class="line">) else if &quot;%o%&quot; == &quot;n&quot; (</span><br><span class="line">  call npm -v</span><br><span class="line">  call npm run serve</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2022/05/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2022/05/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h3 id="HTML-原生"><a href="#HTML-原生" class="headerlink" title="HTML 原生"></a>HTML 原生</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ajaxifr&quot;</span> <span class="attr">name</span>=<span class="string">“file”</span> <span class="attr">type</span>=<span class="string">“post”</span> <span class="attr">target</span>=<span class="string">“fileUpload”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ajaxifr&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span>&lt;<span class="attr">input</span> <span class="attr">id</span>=<span class="string">&quot;filesubmit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;fileUpload&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery-form"><a href="#jQuery-form" class="headerlink" title="jQuery.form"></a>jQuery.form</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;ajaxifr&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ajaxifr&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">oncick</span>=<span class="string">&quot;upload&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&#x27;#ajaxifr&#x27;</span>).<span class="title function_">ajaxForm</span>(&#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line"><span class="attr">target</span>: <span class="string">&quot;#fileUpload&quot;</span>,</span><br><span class="line"><span class="attr">url</span>: <span class="string">&quot;XXXXURL&quot;</span>,</span><br><span class="line"><span class="attr">beforeSend</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">        <span class="attr">uploadProgress</span>: <span class="keyword">function</span> (<span class="params">event, position, total, percentComplete</span>) &#123;&#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">        <span class="attr">complete</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建npm私库</title>
      <link href="/2022/05/26/%E6%90%AD%E5%BB%BAnpm%E7%A7%81%E5%BA%93/"/>
      <url>/2022/05/26/%E6%90%AD%E5%BB%BAnpm%E7%A7%81%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><a href="https://bbs.huaweicloud.com/blogs/238859">centos基础</a></p><p>1.安装git</p><p><a href="https://blog.csdn.net/xwj1992930/article/details/96428998">https://blog.csdn.net/xwj1992930/article/details/96428998</a></p><p><a href="https://juejin.cn/post/6844904196651630599">https://juejin.cn/post/6844904196651630599</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>页面跨页通信</title>
      <link href="/2022/05/26/%E9%A1%B5%E9%9D%A2%E8%B7%A8%E9%A1%B5%E9%80%9A%E4%BF%A1/"/>
      <url>/2022/05/26/%E9%A1%B5%E9%9D%A2%E8%B7%A8%E9%A1%B5%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="同源跨页"><a href="#同源跨页" class="headerlink" title="同源跨页"></a>同源跨页</h1><ol><li><p>BroadCast Channel</p><p>兼容性：ie、safari on IOS 不兼容，chrome 54+，Edge 79+， Firefox 38+，opera 41+</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bc = new BroadcastChannel(&#x27;alienzhou&#x27;);</span><br><span class="line">bc.postMessage(&#123;from: &#x27;other&#x27;, msg&#125;);</span><br><span class="line">bc.onmessage = function(e) &#123;</span><br><span class="line">console.log(&#x27;index receive message&#x27;, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 每个需要的页面中添加创建信道，发送消息和接受消息的代码</span><br><span class="line">var bc;</span><br><span class="line">function broadcast() &#123;</span><br><span class="line">  bc = new BroadcastChannel(&#x27;alienzhou&#x27;);</span><br><span class="line">  bc.onmessage = function(e) &#123;</span><br><span class="line">      console.log(&#x27;index receive message&#x27;, e);</span><br><span class="line">      var data = e.data;</span><br><span class="line">      var $div = document.createElement(&#x27;div&#x27;);</span><br><span class="line">      $div.textContent = data.from + &#x27;: &#x27; + data.msg;</span><br><span class="line">      document.getElementById(&#x27;js-container&#x27;).appendChild($div);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">broadcast();</span><br><span class="line"></span><br><span class="line">document.getElementById(&#x27;js-btn&#x27;).addEventListener(&#x27;click&#x27;, function()&#123;</span><br><span class="line">  var msg = document.getElementById(&#x27;js-input&#x27;).value;</span><br><span class="line">  bc.postMessage(&#123;from: &#x27;other&#x27;, msg&#125;);</span><br><span class="line"></span><br><span class="line">  var $div = document.createElement(&#x27;div&#x27;);</span><br><span class="line">  $div.textContent = &#x27;me: &#x27; + msg;</span><br><span class="line">  document.getElementById(&#x27;js-container&#x27;).appendChild($div);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">document.getElementById(&#x27;js-close&#x27;).addEventListener(&#x27;click&#x27;,function() &#123;</span><br><span class="line">    bc.close();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">document.getElementById(&#x27;js-open&#x27;).addEventListener(&#x27;click&#x27;, function() &#123;</span><br><span class="line">    broadcast();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>Service Worker</li></ol><p><a href="https://juejin.cn/post/6844903588691443725">https://juejin.cn/post/6844903588691443725</a></p><p><a href="https://juejin.cn/post/6844903811232825357#heading-3">参考链接</a></p><ol start="3"><li><p>LocalStorage</p><p>原理：使用LocalStorage能缓存数据，LocalStorage 变化时，会触发<code>storage</code>事件。通过监听<code>storage</code>事件可收到“通知”。</p><p>如果setItem的值是与之前的是一样的，不会触发。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&#x27;storage&#x27;, function (e) &#123;</span><br><span class="line">    if (e.key === &#x27;ctc-msg&#x27;) &#123;</span><br><span class="line">        const data = JSON.parse(e.newValue);</span><br><span class="line">        const text = &#x27;[receive] &#x27; + data.msg + &#x27; —— tab &#x27; + data.from;</span><br><span class="line">        console.log(&#x27;[Storage I] receive message:&#x27;, text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">mydata.st = +(new Date);</span><br><span class="line">window.localStorage.setItem(&#x27;ctc-msg&#x27;, JSON.stringify(mydata));</span><br></pre></td></tr></table></figure><ol start="4"><li>Shared Worker</li></ol></li></ol><ol start="4"><li><p>IndexedDB</p><p>全局性”（支持跨页面）的存储方案。例如 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FIndexedDB_API">IndexedDB</a> 或 cookie。</p><p>与 Shared Worker 方案类似，消息发送方将消息存至 IndexedDB 中；接收方（例如所有页面）则通过<strong>轮询</strong>去获取最新的信息。在这之前，我们先简单封装几个 IndexedDB 的工具方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">   // 打开数据库连接：</span><br><span class="line">   function openStore() &#123;</span><br><span class="line">    const storeName = &#x27;ctc_aleinzhou&#x27;;</span><br><span class="line">       return new Promise(function (resolve, reject) &#123;</span><br><span class="line">        if (!(&#x27;indexedDB&#x27; in window)) &#123;</span><br><span class="line">               return reject(&#x27;don\&#x27;t support indexedDB&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">           const request = indexedDB.open(&#x27;CTC_DB&#x27;, 1);</span><br><span class="line">        request.onerror = reject;</span><br><span class="line">           request.onsuccess =  e =&gt; resolve(e.target.result);</span><br><span class="line">        request.onupgradeneeded = function (e) &#123;</span><br><span class="line">               const db = e.srcElement.result;</span><br><span class="line">            if (e.oldVersion === 0 &amp;&amp; !db.objectStoreNames.contains(storeName)) &#123;</span><br><span class="line">                   const store = db.createObjectStore(storeName, &#123;keyPath: &#x27;tag&#x27;&#125;);</span><br><span class="line">                store.createIndex(storeName + &#x27;Index&#x27;, &#x27;tag&#x27;, &#123;unique: false&#125;);</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">// 存储数据</span><br><span class="line">   function saveData(db, data) &#123;</span><br><span class="line">    return new Promise(function (resolve, reject) &#123;</span><br><span class="line">           const STORE_NAME = &#x27;ctc_aleinzhou&#x27;;</span><br><span class="line">           const tx = db.transaction(STORE_NAME, &#x27;readwrite&#x27;);</span><br><span class="line">           const store = tx.objectStore(STORE_NAME);</span><br><span class="line">           const request = store.put(&#123;tag: &#x27;ctc_data&#x27;, data&#125;);</span><br><span class="line">           request.onsuccess = () =&gt; resolve(db);</span><br><span class="line">           request.onerror = reject;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   //  查询/读取数据</span><br><span class="line">   function query(db) &#123;</span><br><span class="line">       const STORE_NAME = &#x27;ctc_aleinzhou&#x27;;</span><br><span class="line">       return new Promise(function (resolve, reject) &#123;</span><br><span class="line">           try &#123;</span><br><span class="line">               const tx = db.transaction(STORE_NAME, &#x27;readonly&#x27;);</span><br><span class="line">               const store = tx.objectStore(STORE_NAME);</span><br><span class="line">               const dbRequest = store.get(&#x27;ctc_data&#x27;);</span><br><span class="line">               dbRequest.onsuccess = e =&gt; resolve(e.target.result);</span><br><span class="line">               dbRequest.onerror = reject;</span><br><span class="line">           &#125;</span><br><span class="line">           catch (err) &#123;</span><br><span class="line">               reject(err);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   openStore().then(db =&gt; saveData(db, null))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 对于消息读取，可以在连接与初始化后轮询：</span><br><span class="line">openStore().then(db =&gt; saveData(db, null)).then(function (db) &#123;</span><br><span class="line">    setInterval(function () &#123;</span><br><span class="line">        query(db).then(function (res) &#123;</span><br><span class="line">            if (!res || !res.data) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            const data = res.data;</span><br><span class="line">            const text = &#x27;[receive] &#x27; + data.msg + &#x27; —— tab &#x27; + data.from;</span><br><span class="line">            console.log(&#x27;[Storage I] receive message:&#x27;, text);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;);</span><br><span class="line">// 要发送消息时，只需向 IndexedDB 存储数据即可：</span><br><span class="line">openStore().then(db =&gt; saveData(db, null)).then(function (db) &#123;</span><br><span class="line">    // …… 省略上面的轮询代码</span><br><span class="line">    // 触发 saveData 的方法可以放在用户操作的事件监听内</span><br><span class="line">    saveData(db, mydata);</span><br><span class="line">&#125;);</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>window.open + window.opener</p><p>原理：</p><p>window.open 方法打开一个页面会返回一个window的引用</p><p>被打开的页面window.opener 会记录打开他的页面的引用</p></li></ol><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 发送消息方</span><br><span class="line">// 过滤掉已经关闭的窗口</span><br><span class="line">childWins = childWins.filter(w =&gt; !w.closed);</span><br><span class="line">if (childWins.length &gt; 0) &#123;</span><br><span class="line">    mydata.fromOpenner = false;</span><br><span class="line">    childWins.forEach(w =&gt; w.postMessage(mydata));</span><br><span class="line">&#125;</span><br><span class="line">if (window.opener &amp;&amp; !window.opener.closed) &#123;</span><br><span class="line">    mydata.fromOpenner = true;</span><br><span class="line">    window.opener.postMessage(mydata);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">// 接收消息方</span><br><span class="line">window.addEventListener(&#x27;message&#x27;, function (e) &#123;</span><br><span class="line">    const data = e.data;</span><br><span class="line">    const text = &#x27;[receive] &#x27; + data.msg + &#x27; —— tab &#x27; + data.from;</span><br><span class="line">    console.log(&#x27;[Cross-document Messaging] receive message:&#x27;, text);</span><br><span class="line">    // 避免消息回传</span><br><span class="line">    if (window.opener &amp;&amp; !window.opener.closed &amp;&amp; data.fromOpenner) &#123;</span><br><span class="line">        window.opener.postMessage(data);</span><br><span class="line">    &#125;</span><br><span class="line">    // 过滤掉已经关闭的窗口</span><br><span class="line">    childWins = childWins.filter(w =&gt; !w.closed);</span><br><span class="line">    // 避免消息回传</span><br><span class="line">    if (childWins &amp;&amp; !data.fromOpenner) &#123;</span><br><span class="line">        childWins.forEach(w =&gt; w.postMessage(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">   </span><br></pre></td></tr></table></figure></code></pre><h1 id="非同源页面通讯"><a href="#非同源页面通讯" class="headerlink" title="非同源页面通讯"></a>非同源页面通讯</h1><p>使用一个用户不可见的 iframe 作为“桥”。由于 iframe 与父页面间可以通过指定<code>origin</code>来忽略同源限制，因此可以在每个页面中嵌入一个 iframe。这些 iframe 由于使用的是一个 url，因此属于同源页面，其通信方式可以复用同源部分提到的各种方式。</p><p>需要在页面中监听 iframe 发来的消息，做相应的业务处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 业务页面代码 -- 监听信息 */</span><br><span class="line">window.addEventListener(&#x27;message&#x27;, function (e) &#123;</span><br><span class="line">    // …… do something</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/* 业务页面代码 -- 发送消息【iframe的window发送消息】 */</span><br><span class="line">window.frames[0].window.postMessage(mydata, &#x27;*&#x27;); </span><br></pre></td></tr></table></figure><p>iframe内可以选用上面的方法：这里示例用BroadcastChannel</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* iframe 内代码 */</span><br><span class="line">const bc = new BroadcastChannel(&#x27;AlienZHOU&#x27;);</span><br><span class="line">// 监听window的消息【收到来自页面的消息后】，在 iframe 间进行广播（发送消息）</span><br><span class="line">// iframe中的bc在这里充当中间人的角色</span><br><span class="line">window.addEventListener(&#x27;message&#x27;, function (e) &#123;</span><br><span class="line">    bc.postMessage(e.data);</span><br><span class="line">&#125;);   </span><br><span class="line"></span><br><span class="line">/* iframe 内代码 */</span><br><span class="line">// 对于收到的（iframe）广播消息，通知给所属的业务页面</span><br><span class="line">// iframe中的bc在这里充当中间人的角色</span><br><span class="line">bc.onmessage = function (e) &#123;</span><br><span class="line">    window.parent.postMessage(e.data, &#x27;*&#x27;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/6844903811232825357#">from</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>项目遇到的问题记录</title>
      <link href="/2022/05/26/%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/05/26/%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>1.Syntax Error: TypeError: this.getOptions is not a function</p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220419190703151.png" alt="image-20220419190703151"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>npm实操</title>
      <link href="/2022/05/26/npm%E5%AE%9E%E6%93%8D/"/>
      <url>/2022/05/26/npm%E5%AE%9E%E6%93%8D/</url>
      
        <content type="html"><![CDATA[<p>更新全局包：node</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update &lt;name&gt; -g</span><br></pre></td></tr></table></figure><p>更新生产环境依赖包：git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update &lt;name&gt; --save</span><br></pre></td></tr></table></figure><p>更新开发环境依赖包：github</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update &lt;name&gt; --save-dev</span><br></pre></td></tr></table></figure><p>修改源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><p>安装淘宝源 cnpm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h1 id="npmrc配置文件"><a href="#npmrc配置文件" class="headerlink" title=".npmrc配置文件"></a>.npmrc配置文件</h1><ol><li><p>文件位置</p><p>全局配置文件：<code>/etc/npmrc</code><br>用户配置文件：<code>~/.npmrc</code>  npm config set <key> <value>修改的是用户配置文件<br>项目配置文件：<code>$项目根目录/.npmrc</code></p><p>优先级：<strong>项目配置&gt;用户配置&gt;全局配置</strong></p></li><li><p>配置  key=value</p></li></ol><p>   npm cache clean -force  </p><p>   <a href="https://blog.csdn.net/kelly0721/article/details/121908256">参考</a></p><h2 id="常见的问题"><a href="#常见的问题" class="headerlink" title="常见的问题"></a>常见的问题</h2><h3 id="request-to-https-registry-npmjs-org-big-js-failed-reason-connect-ETIMEDOUT-104-16-17-35-443"><a href="#request-to-https-registry-npmjs-org-big-js-failed-reason-connect-ETIMEDOUT-104-16-17-35-443" class="headerlink" title="request to https://registry.npmjs.org/big.js failed, reason: connect ETIMEDOUT 104.16.17.35:443"></a>request to <a href="https://registry.npmjs.org/big.js">https://registry.npmjs.org/big.js</a> failed, reason: connect ETIMEDOUT 104.16.17.35:443</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Typescript</title>
      <link href="/2022/05/26/Typescript/"/>
      <url>/2022/05/26/Typescript/</url>
      
        <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure></li><li><p>查看版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure></li><li><p>创建项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>生产的默认的 tsconfig.json 请见 <a href="https://gitee.com/ms-yip/public_doc/blob/master/tsconfig.json">tsconfig.json</a></p></li><li><p>ts编译转换成js代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc app.ts</span><br></pre></td></tr></table></figure><table><thead><tr><th>编译参数</th><th>说明</th><th></th></tr></thead><tbody><tr><td>–help -h</td><td>显示帮助信息</td><td></td></tr><tr><td>–module</td><td>载入扩展模块</td><td></td></tr><tr><td>–target</td><td>设置 ECMA 版本</td><td></td></tr><tr><td>–declaration</td><td>额外生成一个 .d.ts 扩展名的文件。<br />会生成 ts-hw.d.ts、ts-hw.js 两个文件。</td><td></td></tr><tr><td>–removeComments</td><td>删除文件的注释</td><td></td></tr><tr><td>–out</td><td>编译多个文件并合并到一个输出的文件</td><td></td></tr><tr><td>–sourcemap</td><td>生成一个 sourcemap (.map) 文件。sourcemap 是一个存储源代码与编译代码对应位置映射的信息文件。</td><td></td></tr><tr><td>–module noImplicitAny</td><td>在表达式和声明上有隐含的 any 类型时报错</td><td></td></tr><tr><td>–watch</td><td>在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译。</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table></li></ol><ol start="4"><li><p>使用ts-node直接运行ts文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add ts-node </span><br><span class="line"><span class="comment">// 如果运行报错，则再安装下面依赖</span></span><br><span class="line">yarn add tslib @types/node</span><br></pre></td></tr></table></figure></li></ol><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><p>面向对象的编程语言</p><p>区分大小写</p><p>注释同js</p><p>基础静态类型： string、number 、null、undefined、symbol、boolean 、void</p><p>对象类型：对象类型、数组类型、类类型、函数类型</p><p>type annotation 类型注解 </p><p>type inferrence 类型推断</p><ul><li>如果 <code>TS</code> 能够自动分析变量类型， 我们就什么也不需要做了</li><li>如果 <code>TS</code> 无法分析变量类型的话， 我们就需要使用类型注解</li></ul><p>函数参数和返回类型定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getTotal</span>(<span class="params">one: number, two: number</span>): number &#123;</span><br><span class="line">  <span class="keyword">return</span> one + two;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数无返回值时定义方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数永远执行不完（比如死循环）， 返回值定义为never</p><p>函数参数为独享（结构时）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">&#123; one, two &#125;: &#123; one: number, two: number &#125;</span>): number &#123;</span><br><span class="line">  <span class="keyword">return</span> one + two;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> three = <span class="title function_">add</span>(&#123; <span class="attr">one</span>: <span class="number">1</span>, <span class="attr">two</span>: <span class="number">2</span> &#125;);</span><br></pre></td></tr></table></figure><p>数组类型定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">stringArr</span>: string[] = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">undefinedArr</span>: <span class="literal">undefined</span>[] = [<span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: (number | string)[] = [<span class="number">1</span>, <span class="string">&quot;string&quot;</span>, <span class="number">2</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数组中对象类型定义：</p><p>类型别名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Lady</span> = &#123; <span class="attr">name</span>: string, <span class="attr">age</span>: <span class="title class_">Number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">xiaoJieJies</span>: <span class="title class_">Lady</span>[] = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;刘英&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;谢大脚&quot;</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Madam</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">xiaoJieJies</span>: <span class="title class_">Madam</span>[] = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;刘英&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;谢大脚&quot;</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>元组</p><p>存储元素的<strong>数据类型不一样的数组</strong></p><p>常 用于处理csv文件数据</p><p>interface 接口</p><p>interface代表的是一个对象,接口可以存储属性以及方法</p><p>接口非必选值的定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Girl</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">  <span class="attr">bust</span>: number;</span><br><span class="line">  waistline?: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Girl</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">  <span class="attr">bust</span>: number;</span><br><span class="line">  waistline?: number;</span><br><span class="line">  [<span class="attr">propname</span>: string]: any; <span class="comment">// 允许加入任意值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类</p><p>类实现一个接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> &lt;className&gt; implements &lt;interface&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><p>接口也可以用于继承的</p><p>interface <interfaceName> extends <interfaceName2></p><p> 类的重写</p><p>子类与父类相同的属性或者方法，子类覆盖父类方法</p><p><code>super</code>关键字，它代表父类中的方法</p><p>类型就是基于三个关键词<code>private</code>、<code>protected</code>和<code>public</code>,也是三种访问类型</p><p>private 访问属性的意思是，只允许再类的内部被调用，外部不允许调用</p><p>protected 允许在类内及继承的子类中使用</p><p>造函数就是在类被初始化的时候，自动执行的一个方法。</p><p>类继承中构造函数写法</p><p>在子类里写构造函数时，必须用<code>super()</code>调用父类的构造函数，如果需要传值，也必须进行传值操作。就是是父类没有构造函数，子类也要使用<code>super()</code>进行调用，否则就会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">public age:number</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类的getter 和setter 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Xiaojiejie</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private _age:number</span>)&#123;&#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">age</span>()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span>-<span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">age:number</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_age</span>=age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类中的static</p><p>用<code>static</code>声明的属性和方法，不需要进行声明对象，就可以直接使用</p><p>类的只读属性和抽象类</p><p>添加reaonly 只读属性，不能修改</p><p>抽象类的使用：</p><p>抽象类的关键词是<code>abstract</code>,里边的抽象方法也是<code>abstract</code>开头的</p><p>继承抽象类， 必须实现抽象方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">abstract <span class="keyword">class</span> <span class="title class_">Girl</span>&#123;</span><br><span class="line">    abstract <span class="title function_">skill</span>()  <span class="comment">//因为没有具体的方法，所以我们这里不写括号</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Waiter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Girl</span>&#123;</span><br><span class="line">    <span class="title function_">skill</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大爷，请喝水！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseTeacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Girl</span>&#123;</span><br><span class="line">    <span class="title function_">skill</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大爷，来个泰式按摩吧！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">seniorTeacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Girl</span>&#123;</span><br><span class="line">    <span class="title function_">skill</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大爷，来个SPA全身按摩吧！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>联合类型  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Waiter</span> &#123;</span><br><span class="line">  <span class="attr">anjiao</span>: boolean;</span><br><span class="line">  <span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Teacher</span> &#123;</span><br><span class="line">  <span class="attr">anjiao</span>: boolean;</span><br><span class="line">  <span class="attr">skill</span>: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">judgeWho</span>(<span class="params">animal: Waiter | Teacher</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>有联合类型才需要类型保护</p><p>类型断言</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Waiter</span> &#123;</span><br><span class="line">  <span class="attr">anjiao</span>: boolean;</span><br><span class="line">  <span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Teacher</span> &#123;</span><br><span class="line">  <span class="attr">anjiao</span>: boolean;</span><br><span class="line">  <span class="attr">skill</span>: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">judgeWho</span>(<span class="params">animal: Waiter | Teacher</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (animal.<span class="property">anjiao</span>) &#123;</span><br><span class="line">    (animal <span class="keyword">as</span> <span class="title class_">Teacher</span>).<span class="title function_">skill</span>();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    (animal <span class="keyword">as</span> <span class="title class_">Waiter</span>).<span class="title function_">say</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>in语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">judgeWhoTwo</span>(<span class="params">animal: Waiter | Teacher</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;skill&quot;</span> <span class="keyword">in</span> animal) &#123;</span><br><span class="line">    animal.<span class="title function_">skill</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    animal.<span class="title function_">say</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>typeof语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">first: string | number, second: string | number</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> first === <span class="string">&quot;string&quot;</span> || <span class="keyword">typeof</span> second === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> first + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>instanceof</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addObj</span>(<span class="params">first: object | NumberObj, second: object | NumberObj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (first <span class="keyword">instanceof</span> <span class="title class_">NumberObj</span> &amp;&amp; second <span class="keyword">instanceof</span> <span class="title class_">NumberObj</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> first.<span class="property">count</span> + second.<span class="property">count</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>enum枚举类型</p><p>对象， 枚举类型对应值是数字 ，0 开始</p><h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><ol><li><p><code>tsc --init</code>命令生成 [tsconfig.json: typescript 的编译配置文件。]</p></li><li><p>配置tsconfig.json并放在项目根目录上， 执行tsc 则按照配置编译项目下的ts文件</p><p><a href="https://www.csdn.net/tags/NtDaEgzsMDI0NzEtYmxvZwO0O0OO0O0O.html">tsconfig.json配置说明</a></p></li></ol><p>include 配置白名单</p><p>exclude 配置黑名单（排除）</p><p>files 配置具体要编译的文件</p><p>root：</p><p>oytDir:</p><p>target: </p><p>module：</p><p>sourceMap</p><p>noUnusedLocals </p><p>noUnusedParameters</p><table><thead><tr><th></th><th>说明</th><th></th></tr></thead><tbody><tr><td>target</td><td>指定ECMAScript目标版本 <code>&quot;ES3&quot;</code>（默认）， <code>&quot;ES5&quot;</code>， <code>&quot;ES6&quot;</code>/ <code>&quot;ES2015&quot;</code>， <code>&quot;ES2016&quot;</code>， <code>&quot;ES2017&quot;</code>或 <code>&quot;ESNext&quot;</code>。</td><td></td></tr><tr><td>module</td><td>指定生成哪个模块系统代码： <code>&quot;None&quot;</code>， <code>&quot;CommonJS&quot;</code>， <code>&quot;AMD&quot;</code>， <code>&quot;System&quot;</code>， <code>&quot;UMD&quot;</code>， <code>&quot;ES6&quot;</code>或 <code>&quot;ES2015&quot;</code>。<br/>► 只有 <code>&quot;AMD&quot;</code>和 <code>&quot;System&quot;</code>能和 <code>--outFile</code>一起使用。<br/>► <code>&quot;ES6&quot;</code>和 <code>&quot;ES2015&quot;</code>可使用在目标输出为 <code>&quot;ES5&quot;</code>或更低的情况下。</td><td></td></tr><tr><td>strict</td><td>启用所有严格类型检查选项。<br/>启用 <code>--strict</code>相当于启用 <code>--noImplicitAny</code>, <code>--noImplicitThis</code>, <code>--alwaysStrict</code>， <code>--strictNullChecks</code>和 <code>--strictFunctionTypes</code>和<code>--strictPropertyInitialization</code></td><td></td></tr><tr><td>jsx</td><td>在 <code>.tsx</code>文件里支持JSX： <code>&quot;React&quot;</code>或 <code>&quot;Preserve&quot;</code>。</td><td></td></tr><tr><td>importHelpers</td><td>从 <a href="https://www.npmjs.com/package/tslib"><code>tslib</code> </a>导入辅助工具函数（比如 <code>__extends</code>， <code>__rest</code>等）</td><td></td></tr><tr><td>moduleResolution</td><td>决定如何处理模块。或者是<code>&quot;Node&quot;</code>对于Node.js/io.js，或者是<code>&quot;Classic&quot;</code>（默认）。</td><td>模块解析策略，ts默认用node的解析策略</td></tr><tr><td>skipLibCheck</td><td>忽略所有的声明文件（ <code>*.d.ts</code>）的类型检查。</td><td></td></tr><tr><td>esModuleInterop</td><td></td><td>作用是支持使用import d from ‘cjs’的方式引入commonjs包</td></tr><tr><td>allowSyntheticDefaultImports</td><td><strong>允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。？？？</strong></td><td>module === “system”<code>或设置了</code>–esModuleInterop<code>且</code>module<code>不为</code>es2015<code>/</code>esnext</td></tr><tr><td>sourceMap</td><td>生成相应的 <code>.map</code>文件。</td><td></td></tr><tr><td>baseUrl</td><td>解析非相对模块名的基准目录。</td><td></td></tr><tr><td>types</td><td>要包含的类型声明文件名列表。</td><td></td></tr><tr><td>paths</td><td>模块名到基于 <code>baseUrl</code>的路径映射的列表</td><td></td></tr><tr><td>lib</td><td></td><td>编译过程中需要引入的库文件的列表，告诉 typescript 编译器可以使用哪些功能</td></tr><tr><td>experimentalDecorators</td><td>启用实验性的ES装饰器。</td><td>是否启用实验性的装饰器特性,装饰器的语法是ES7的实验性语法, 不打开可能会报错</td></tr><tr><td>noUnusedLocals</td><td>若有未使用的局部变量则抛错。</td><td></td></tr><tr><td>removeComments</td><td>删除所有注释，除了以 <code>/!*</code>开头的版权信息。</td><td></td></tr></tbody></table><p>complerOptions</p><p>strict： <code>TypeScript</code>最严格的规范</p><p>noImplicitAny： 允许注解类型为any不用特意表明</p><p>strictNullChecks： 强制检查NULL类型</p><p>泛型</p><p>泛型的定义使用<code>&lt;&gt;</code>（尖角号）进行定义的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> join&lt;<span class="title class_">JSPang</span>&gt;(<span class="attr">first</span>: <span class="title class_">JSPang</span>, <span class="attr">second</span>: <span class="title class_">JSPang</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">join &lt; string &gt; (<span class="string">&quot;jspang&quot;</span>, <span class="string">&quot;.com&quot;</span>);</span><br></pre></td></tr></table></figure><p>泛型中数组的使用</p><p>第一种写法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> myFun&lt;<span class="variable constant_">ANY</span>&gt;(<span class="attr">params</span>: <span class="variable constant_">ANY</span>[]) &#123;</span><br><span class="line">  <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line">myFun &lt; string &gt; [<span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>];</span><br></pre></td></tr></table></figure><p>第二种写法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> myFun&lt;<span class="variable constant_">ANY</span>&gt;(<span class="attr">params</span>: <span class="title class_">Array</span>&lt;<span class="variable constant_">ANY</span>&gt;) &#123;</span><br><span class="line">  <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line">myFun &lt; string &gt; [<span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>];</span><br></pre></td></tr></table></figure><p>多个泛型定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> join&lt;T, P&gt;(<span class="attr">first</span>: T, <span class="attr">second</span>: P) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">join &lt; number, string &gt; (<span class="number">1</span>, <span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure><p>泛型的类型推断</p><p>命名空间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">namespace <span class="title class_">Home</span> &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Header</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Header&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Content</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Content&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Footer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Footer&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Header</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Content</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Footer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子命名空间（命名空间嵌套）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">namespace <span class="title class_">Components</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> namespace <span class="title class_">SubComponents</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//someting ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用import 语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Header</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    elem.<span class="property">innerText</span> = <span class="string">&quot;This is Header&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Content</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    elem.<span class="property">innerText</span> = <span class="string">&quot;This is Content&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Footer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    elem.<span class="property">innerText</span> = <span class="string">&quot;This is Footer&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Header</span>, <span class="title class_">Content</span>, <span class="title class_">Footer</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./components&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Header</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Content</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Footer</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明文件</p><p>使用第三方库时，用于ts编译时的检查</p><p>必须以 .d.ts 为后缀</p><blockquote><p><strong>在d.ts文件里面，在最外层声明变量或者函数或者类要在前面加上这个关键字。在typescript的规则里面，如果一个<code>.ts</code>、<code>.d.ts</code>文件如果没有用到import或者export语法的话，那么最顶层声明的变量就是全局变量</strong>.由于我们当前的d.ts文件使用了import/export语法，那么ts编译器就不把我们通过<code>declare var xxx:yyy</code>当成了全局变量了，那么我们就需要通过以下的方式声明全局变量：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span>,<span class="title class_">Response</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">req</span>: <span class="title class_">Request</span></span><br><span class="line">    <span class="keyword">var</span> <span class="attr">res</span>: <span class="title class_">Response</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ol><li><p>声明global导出文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> namesapce <span class="title class_">MyLib</span> &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 我们可以直接在代码中使用</span></span><br><span class="line">  <span class="comment">// const a = new MyLib.A()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明umd/commonjs导出</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;my-lib&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">namespace</span> <span class="title class_">MyLib</span> &#123; <span class="comment">//namespace包起来的大括号里面，注意括号里面就不需要declare关键字了。</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用时</span></span><br><span class="line">    <span class="comment">// 我们可以使用</span></span><br><span class="line">    <span class="comment">// import * as MyLib from &#x27;my-lib&#x27;</span></span><br><span class="line">    <span class="comment">// const a = new MyLib.A();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果开启了 ES Module 融合模式 (esModuleInterop=true)</span></span><br><span class="line">    <span class="comment">// 我们可以使用</span></span><br><span class="line">    <span class="comment">// import &#123; A &#125; from &#x27;my-lib&#x27;</span></span><br><span class="line">    <span class="comment">// const a = new A()</span></span><br><span class="line">      </span><br><span class="line">       <span class="comment">//declare module &quot;abcde&quot; &#123; // commonjs</span></span><br><span class="line">        <span class="comment">//export let a: number</span></span><br><span class="line">        <span class="comment">//export function b(): number</span></span><br><span class="line">        <span class="comment">// export namespace c&#123;</span></span><br><span class="line">            <span class="comment">//let cd: string</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">     <span class="comment">//&#125;   </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> = <span class="title class_">MyLib</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明ES Module 导出的包</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;my-lib&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">MyLib</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyLib</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// or other exorts</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 我们可以使用</span></span><br><span class="line">  <span class="comment">// import MyLib, &#123;A&#125; from &#x27;my-lib&#x27;</span></span><br><span class="line">  <span class="comment">// const lib = new MyLib()</span></span><br><span class="line">  <span class="comment">// const a = new A()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ES6的模块化方式（import export）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">declare var a1: 1</span><br><span class="line">declare var a2: 2</span><br><span class="line"></span><br><span class="line">export &#123; a1,a2 &#125;</span><br><span class="line"></span><br><span class="line">declare var aaa: 1</span><br><span class="line">declare var bbb: 2</span><br><span class="line">declare var ccc: 3 //因为这个文件里我们使用了import或者export语法，所以bbb和ccc在其他代码里不能访问到，即不是全局变量</span><br><span class="line"></span><br><span class="line">export &#123; aaa &#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><pre><code class="typescript">UMD<span class="keyword">declare</span> <span class="keyword">namespace</span> UUU&#123;    <span class="keyword">let</span> a:<span class="built_in">number</span>&#125;<span class="keyword">declare</span> <span class="keyword">module</span> "UUU" &#123;    <span class="keyword">export</span> =UUU&#125;</code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>uni-app</title>
      <link href="/2021/06/28/uni-app/"/>
      <url>/2021/06/28/uni-app/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211029102633152.png" alt="image-20211029102633152"></p><ol><li><p>规范</p><ol><li>遵循vue单文件组件规范（SFC）</li><li>组件标签接近小程序规范</li><li>接口能力（原生的手机能力）js-api接近微信小程序规范</li><li>数据绑定及事件处理接近vue规范</li><li>多端兼容建议使用flex布局</li></ol></li><li><p>特色</p><ol><li><p>条件编译</p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211029112926501.png" alt="image-20211029112926501"></p></li><li><p>APP端的Nvue开发（weex组件+uni-app api）</p></li><li><p>HTML5+（APP端使用）</p></li></ol></li><li><p>知识点</p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211101113208265.png" alt="image-20211101113208265"></p></li></ol><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211029102926942.png" alt="image-20211029102926942"></p><h1 id="vue-cli-安装uni-app"><a href="#vue-cli-安装uni-app" class="headerlink" title="vue-cli 安装uni-app"></a>vue-cli 安装uni-app</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create -p dcloud/uni-preset-vue[#alpha][projectName]</span><br></pre></td></tr></table></figure><p>条件编译：</p><p>条件编译是利用注释实现的，在不同语法里注释写法不一样，js使用 <code>// 注释</code>、css 使用 <code>/* 注释 */</code>、vue/nvue 模板里使用 <code>&lt;!-- 注释 --&gt;</code></p><ol><li><p>模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li></li></ol><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>生命周期顺序 组件间</p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211029101640148.png" alt="image-20211029101640148" style="zoom:100%;" /><p>页面生命周期</p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211115160736464.png" alt="image-20211115160736464"></p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211115161541833.png" alt="image-20211115161541833"></p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211115161909486.png" alt="image-20211115161909486">)<img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211115162128080.png" alt="image-20211115162128080">)<img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20211115164602567.png" alt="image-20211115164602567"></p><h3 id="平台配置"><a href="#平台配置" class="headerlink" title="平台配置"></a>平台配置</h3><p>小程序：</p><p>1.设置安全设置：服务端口开启（用来hbuild拉起）</p><p>指定图标</p><p>iconfont  下载代码 然后放在项目 删除url 引入非base64的内容</p><p>或者插件市场 icons dcloud</p><p>1.公共跳转页面</p><p>unicloud</p><ol><li>登录</li><li>appid</li><li>创建云服务空间名称</li><li>选择云服务空间</li><li>创建云函数， 上传部署 </li></ol><p><strong>封装uni.request</strong></p><p>参考：</p><p><a href="https://juejin.cn/post/6971256379046641672">promise封装</a></p><p><a href="https://juejin.cn/post/7023983465892675614">class封装</a></p><h2 id="编译小程序采坑系列"><a href="#编译小程序采坑系列" class="headerlink" title="编译小程序采坑系列"></a>编译小程序采坑系列</h2><ol><li><p>background属性图片显示问题</p></li><li><p>maigin padding 不成效 样式重叠问题</p></li><li><p>苹果刘海问题</p></li><li><p>吸顶效果</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue开发技巧</title>
      <link href="/2021/06/16/vue%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
      <url>/2021/06/16/vue%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><h5 id="生产环境开启-vue-devtools"><a href="#生产环境开启-vue-devtools" class="headerlink" title="生产环境开启 vue-devtools"></a>生产环境开启 vue-devtools</h5><p>步骤 ：</p><ul><li>Source 选项卡，找到打包好的 app.js</li><li>找到 <code>new</code>后面的对象就是 Vue 对象，断点</li><li>刷新页面，然后输入<code>d[&quot;default&quot;].config.devtools = true</code>（<code>.config</code>之前的对象就是上一步<code>new</code>后面的对象）</li><li>执行成功后，取消断点重新打开控制台即可</li></ul><h4 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h4><h5 id="vue-与对象数组"><a href="#vue-与对象数组" class="headerlink" title="vue 与对象数组"></a>vue 与对象数组</h5><p>对象：</p><p>vue能够监听到对象变化的场景</p><ol><li>整个对象赋值修改；一般用 Object.assign({}, {XXX：XXX})</li><li>this.set 修改原有属性一个原来没有的属性（仅一次有效) </li><li>watcher 监听加上deep（消耗太大） 或者直接依赖属性监听 如直接添加watcher ：obj.name</li></ol><p>（备注：不能监听的情况）</p><ol><li>对象的增加、删除、修改无法被vue监听到</li><li>this.set 修改原有属性</li></ol><p>数组：</p><p> vue能够监听到对象变化的场景</p><ol><li><p>整个赋值修改</p></li><li><p>push、splice、</p></li><li><p>vm.$set(vm.items, indexOfItem, newValue)</p></li></ol><p>（备注：不能监听的情况）</p><ol><li>修改length</li><li>索引修改</li></ol><h5 id="样式与scoped，样式作用域"><a href="#样式与scoped，样式作用域" class="headerlink" title="样式与scoped，样式作用域"></a>样式与scoped，样式作用域</h5><p>H5标签样式的优先级：行内样式&gt;内部样式(内嵌式)&gt;外部样式。</p><p>vue项目在development模式下，单文件的中css的引入是内部样式， 而在production模式下是外部样式。但是无论是哪种模式下，子组件的样式在父组件的样式后。</p><p>单文件css中添加scoped 可以限定样式的作用范围，注意： 加不加scoped限定范围都不会违背权重规则。</p><p>原理： html、css在当前组件标签和选择器都加上一个相同的属性，相当于权重提高。注意使用deep时， deep后面的标签是不会打上date属性的。</p><p>情形1：</p><p>父子都不用scoped，样式权重一样的情况下，（靠后的样式）叶子组件的样式优先显示。</p><p>情形2：</p><p>在component树中，任意级别加上scoped情况下，样式权重一样的情况下，遵循情形1的显示表现，加scoped限定的组件中css样式只影响该组件本身。</p><p>情形3：</p><p>父子组件都加上scoped的情况下，父组件加上deep  权重一样， 子组件的样式 优先级高于父组件 ，即：#test1 p[data-v-cf497b04] 高于 #test1[data-v-cf497b04] p</p><p>情形4：</p><p>父组件加上scoped，并且使用deep 穿透修改子组件样式，遵循权重规则，权重相同，显示父组件加scoped和deep的样式</p><p>情形5：</p><p>父组件不加scoped，子组件添加scoped且使用deep，遵循情形3、4原则， 当权重相同标签不同时，加date属性标签位置一样，后面的样式优先</p><p>样式作用域总结：</p><ol><li><p>通过单文件添加id，用作隔离</p></li><li><p>scoped 和不加scoped配合使用</p></li><li><p>在不使用deep 属性的情况下，父组件无法修改子组件样式，子组件也不能修改父组件样式。使用deep后，父组件修改子组件的样式只能在子组件实现，父组件可以在本组件内实现修改子组件样式。</p></li></ol><h5 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze"></a>Object.freeze</h5><p>Object.freeze会阻止修改现有的 property，也意味着响应系统无法再<em>追踪</em>变化。注意:冻结只是冻结里面的单个属性,引用地址还是可以更改</p><p>可用于长列表展示使用，或其他初始化就不会变的数据。</p><h5 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h5><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h5 id="递归组件"><a href="#递归组件" class="headerlink" title="递归组件"></a>递归组件</h5><p>递归组件必须设置name 和结束的阀值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 递归组件: 组件在它的模板内可以递归的调用自己，只要给组件设置name组件就可以了。</span><br><span class="line">// 设置那么House在组件模板内就可以递归使用了,不过需要注意的是，</span><br><span class="line">// 必须给一个条件来限制数量，否则会抛出错误: max stack size exceeded</span><br><span class="line">// 组件递归用来开发一些具体有未知层级关系的独立组件。比如：</span><br><span class="line">// 联级选择器和树形控件 </span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for=&quot;(item,index) in treeArr&quot;&gt;</span><br><span class="line">      子组件，当前层级值： &#123;&#123;index&#125;&#125; &lt;br/&gt;</span><br><span class="line">      &lt;!-- 递归调用自身, 后台判断是否不存在改值 --&gt;</span><br><span class="line">      &lt;tree :item=&quot;item.arr&quot; v-if=&quot;item.flag&quot;&gt;&lt;/tree&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // 必须定义name，组件内部才能递归调用</span><br><span class="line">  name: &#x27;tree&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 接收外部传入的值</span><br><span class="line">  props: &#123;</span><br><span class="line">     item: &#123;</span><br><span class="line">      type:Array,</span><br><span class="line">      default: ()=&gt;[]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h5><h5 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h5><p>使用 <code>is</code> attribute 来切换不同的组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure><h5 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h5><h5 id="require-context"><a href="#require-context" class="headerlink" title="require.context"></a>require.context</h5><p>​        webpack 的一个管理依赖的函数。require.context(directory, useSubdirectories = false, regExp = /^.//)</p><p>批量文件获取处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> files = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;@/components/home&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.vue$/</span>)</span><br><span class="line"><span class="keyword">const</span> modules = &#123;&#125;</span><br><span class="line">files.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = path.<span class="title function_">basename</span>(key, <span class="string">&#x27;.vue&#x27;</span>)</span><br><span class="line">  modules[name] = <span class="title function_">files</span>(key).<span class="property">default</span> || <span class="title function_">files</span>(key)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="attr">components</span>:modules</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进阶版</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="title class_">AsyncComponent</span>:<span class="function">()=&gt;</span>(&#123;</span><br><span class="line">      <span class="attr">component</span>:<span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;AsyncComponent&quot; */</span> <span class="string">&#x27;./Async&#x27;</span>),</span><br><span class="line">      <span class="attr">delay</span>:<span class="number">200</span>, <span class="comment">// 延迟几毫秒，默认200</span></span><br><span class="line">      <span class="attr">timeout</span>:<span class="number">3000</span>, <span class="comment">// 加载几毫米之后就超时，触发error组件</span></span><br><span class="line">      <span class="attr">loading</span>:<span class="title class_">LoadingComponent</span>, <span class="comment">// 组件未加载回来前显示</span></span><br><span class="line">      <span class="attr">error</span>:<span class="title class_">ErrorComponent</span> <span class="comment">// 组件超时时显示</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h5><ol><li><p>父传子属性：props</p></li><li><p>子触发父： $emit(event, data)</p></li><li><p>数据共享： vuex</p></li><li><p>attrs和listeners：</p><p>① 父级组件调用时传入属性，$attrs可以获取对象包含未在props中定义的值,  当子组件inheritAttrs设置为false时（默认true）, 父组件非props属性不会添加到子组件的根节点上</p><p>② 子组件需要调用父组件的方法解决:父组件的方法可以通过<em>v</em>−<em>o**n</em>=”listeners” </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;home @change=&quot;change&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">mounted() &#123;</span><br><span class="line">  console.log(this.$listeners) //即可拿到 change 事件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://cn.vuejs.org/v2/api/#provide-inject">provide / inject</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 父级组件提供 &#x27;foo&#x27;</span><br><span class="line">var Provider = &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    foo: &#x27;bar&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 子组件注入 &#x27;foo&#x27;</span><br><span class="line">var Child = &#123;</span><br><span class="line">  inject: [&#x27;foo&#x27;],</span><br><span class="line">  created () &#123;</span><br><span class="line">    console.log(this.foo) // =&gt; &quot;bar&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>$parent 和 $children (拿到一级父组件和子组件)</p></li><li><p>$refs (可拿到子组件的实例,就可以直接操作 data 和 methods)</p></li><li><p>$root （根实例）</p></li><li><p><strong>.sync / $emit(‘update: xxx’, X)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;home :title.sync=&quot;title&quot; /&gt;</span><br><span class="line">//编译时会被扩展为</span><br><span class="line">&lt;home :title=&quot;title&quot;  @update:title=&quot;val =&gt; title = val&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">// 所以子组件可以通过$emit 触发 update 方法改变</span><br><span class="line">mounted()&#123;</span><br><span class="line">  this.$emit(&quot;update:title&quot;, &#x27;这是新的title&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽， 父组件可访问子组件数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;todo-list&gt;</span><br><span class="line"> &lt;template v-slot:todo=&quot;slotProps&quot; &gt;</span><br><span class="line">   &#123;&#123;slotProps.user.firstName&#125;&#125;</span><br><span class="line"> &lt;/template&gt; </span><br><span class="line">&lt;/todo-list&gt; </span><br><span class="line">//slotProps 可以随意命名</span><br><span class="line">//slotProps 接取的是子组件标签slot上属性数据的集合所有v-bind:user=&quot;user&quot;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">&lt;slot name=&quot;todo&quot; :user=&quot;user&quot; :test=&quot;test&quot;&gt;</span><br><span class="line">    &#123;&#123; user.lastName &#125;&#125;</span><br><span class="line"> &lt;/slot&gt; </span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user:&#123;</span><br><span class="line">        lastName:&quot;Zhang&quot;,</span><br><span class="line">        firstName:&quot;yue&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      test:[1,2,3,4]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">// &#123;&#123; user.lastName &#125;&#125;是默认数据  v-slot:todo 当父页面没有(=&quot;slotProps&quot;)</span><br></pre></td></tr></table></figure></li></ol><ol start="11"><li><p>EventBus</p><p>声明一个全局Vue实例变量 EventBus , 把所有的通信数据，事件监听都存储到这个变量上。原理就是利用on和<em>o*</em>n*和emit 并实例化一个全局 vue 实现数据共享。但这种方式只适用于极小的项目 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 在 main.js</span><br><span class="line">Vue.prototype.$eventBus=new Vue()</span><br><span class="line"></span><br><span class="line">// 传值组件</span><br><span class="line">this.$eventBus.$emit(&#x27;eventTarget&#x27;,&#x27;这是eventTarget传过来的值&#x27;)</span><br><span class="line"></span><br><span class="line">// 接收组件</span><br><span class="line">this.$eventBus.$on(&quot;eventTarget&quot;,v=&gt;&#123;</span><br><span class="line">  console.log(&#x27;eventTarget&#x27;,v);//这是eventTarget传过来的值</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>路由传参，利用路由的 params 和query 实现</p></li><li><p>Vue.observable</p><p> 以作为最小化的跨组件状态存储器，用于简单的场景</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// 文件路径 - /store/store.js</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export const store = Vue.observable(&#123; count: 0 &#125;)</span><br><span class="line">export const mutations = &#123;</span><br><span class="line">  setCount (count) &#123;</span><br><span class="line">    store.count = count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label for=&quot;bookNum&quot;&gt;数 量&lt;/label&gt;</span><br><span class="line">            &lt;button @click=&quot;setCount(count+1)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123;count&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;button @click=&quot;setCount(count-1)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; store, mutations &#125; from &#x27;../store/store&#x27; // Vue2.6新增API Observable</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Add&#x27;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      return store.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    setCount: mutations.setCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h5 id="数据处理篇"><a href="#数据处理篇" class="headerlink" title="数据处理篇"></a>数据处理篇</h5><ol><li><p>watcher用法</p><p>立即执行 immediate</p><p>深度监听 deep</p></li><li><p>computed用法</p><p>① 在computed的第一个参数上都能结构出{$attrs,$route,$store,$listeners,$ref}等，可避免使用this问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">   haha(&#123;$attrs,$route,$store,$listeners,$ref&#125;)&#123;</span><br><span class="line">     // 还能结构很多属性，可自行打印康康</span><br><span class="line">     return </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② computed </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed () &#123;</span><br><span class="line">active() &#123;</span><br><span class="line">return function(val) &#123;</span><br><span class="line">return 10* val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="工程篇"><a href="#工程篇" class="headerlink" title="工程篇"></a>工程篇</h1><p>1.批量引入文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> context = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&quot;./api&quot;</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>);</span><br><span class="line">context.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  api = &#123; ...api, ...<span class="title function_">context</span>(e).<span class="property">default</span> &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自定义指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&#x27;preventReClick&#x27;, &#123;</span><br><span class="line">  inserted: function (el, binding) &#123;</span><br><span class="line">    el.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">      if (!el.disabled) &#123;</span><br><span class="line">        el.disabled = true</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          el.disabled = false</span><br><span class="line">        &#125;, binding.value || 3000)</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(el.disabled)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>element 篇</p><p>1.表格内校验表单</p><p>用form表单包裹table， 然后table内添加el-form-item 以及表单内容，</p><p> 正常添加校验条件 prop的值是String类型，值是能取值到要校验内容的表达是转换而来</p><p>注意此时prop的起点是table取值的该对象（数组乃是特殊的Object）</p><p>特殊校验 如：</p><p>校验有没有上传图片</p><p>1.rules 如常设置， 并在UI相对的prop指定变量</p><p>2.重置校验信息 this.$ref.XXX.clearValidate()</p><ol start="2"><li><p>【自动】批量注册组件</p><p>原理：</p></li></ol><p>   使用循环 Vue.component(name, component) 注册全局组件</p><p>   结合 require.context()</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> componentsContext = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;./components&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/index.vue$/</span>)</span><br><span class="line">componentsContext.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取文件中的 default 模块</span></span><br><span class="line">    <span class="keyword">const</span> componentConfig = <span class="title function_">componentsContext</span>(component).<span class="property">default</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(componentConfig.<span class="property">name</span>, componentConfig)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const component = require(&#x27;./main.vue&#x27;).default</span><br><span class="line">const constructor = Vue.extend(component)</span><br><span class="line"></span><br><span class="line">const exampleComponent1 = options =&gt; &#123;</span><br><span class="line">    options = options || &#123;&#125;</span><br><span class="line">    let instance = new constructor(&#123;</span><br><span class="line">        data: options</span><br><span class="line">    &#125;)</span><br><span class="line">    instance.vm = instance.$mount()</span><br><span class="line">    instance.dom = instance.vm.$el</span><br><span class="line">    document.body.appendChild(instance.dom)</span><br><span class="line">    return instance.vm</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    install: Vue =&gt; &#123;</span><br><span class="line">        Vue.prototype[`$$&#123;component.name&#125;`] = exampleComponent1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const componentsContext = require.context(&#x27;./components&#x27;, true, /index.(vue|js)$/)</span><br><span class="line">componentsContext.keys().forEach(component =&gt; &#123;</span><br><span class="line">    // 组件配置信息</span><br><span class="line">    const componentConfig = componentsContext(component).default</span><br><span class="line">    if (/.vue$/.test(component)) &#123;</span><br><span class="line">        Vue.component(componentConfig.name, componentConfig)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        Vue.use(componentConfig)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="iconfont"><a href="#iconfont" class="headerlink" title="iconfont"></a>iconfont</h1><p>1.</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>切换主题颜色</title>
      <link href="/2021/05/31/%E5%88%87%E6%8D%A2%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/"/>
      <url>/2021/05/31/%E5%88%87%E6%8D%A2%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="element-UI-切换主题颜色"><a href="#element-UI-切换主题颜色" class="headerlink" title="element-UI 切换主题颜色"></a>element-UI 切换主题颜色</h3><h4 id="主题颜色生产"><a href="#主题颜色生产" class="headerlink" title="主题颜色生产"></a>主题颜色生产</h4><h5 id="主题包下载"><a href="#主题包下载" class="headerlink" title="主题包下载"></a>主题包下载</h5><ol><li><a href="https://elementui.github.io/theme-chalk-preview/#/zh-CN">主题颜色包设置下载</a></li><li>将下载样式存放至项目style资源目录下，并在项目中引入</li></ol><h5 id="项目中修改主题scss颜色"><a href="#项目中修改主题scss颜色" class="headerlink" title="项目中修改主题scss颜色"></a>项目中修改主题scss颜色</h5><p>详情请参见<a href="https://element.eleme.cn/#/zh-CN/component/custom-theme">传送门</a></p><h5 id="命令行主题工具"><a href="#命令行主题工具" class="headerlink" title="命令行主题工具"></a>命令行主题工具</h5><p>详情请参见<a href="https://element.eleme.cn/#/zh-CN/component/custom-theme">传送门</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 主题生产到对应目录</span><br><span class="line">et -o src/assets/theme/red/theme/</span><br></pre></td></tr></table></figure><p>纯scss定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 新建一个customeTheme.scss</span><br><span class="line">$background-20a0ff: #20a0ff;</span><br><span class="line">$background-fa4f52: #fa4f52;</span><br><span class="line">$background-00a597: #00a597;</span><br><span class="line">$background-FEB84A: #FEB84A;</span><br><span class="line"> </span><br><span class="line">@mixin theme() &#123;</span><br><span class="line">   body.custom-20a0ff &amp; &#123;</span><br><span class="line">    color: #ffffff;</span><br><span class="line">    background: $background-20a0ff;</span><br><span class="line">  &#125;</span><br><span class="line">  body.custom-fa4f52 &amp; &#123;</span><br><span class="line">    color: yellowgreen;</span><br><span class="line">    background: $background-fa4f52;</span><br><span class="line">  &#125;</span><br><span class="line">  body.custom-00a597 &amp; &#123;</span><br><span class="line">    color: blueviolet;</span><br><span class="line">    background: $background-00a597;</span><br><span class="line">  &#125;</span><br><span class="line">  body.custom-FEB84A &amp; &#123;</span><br><span class="line">    color: palevioletred;</span><br><span class="line">    background: $background-FEB84A;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//    this.changeClass(document.body, &quot;custom-&quot; + themeValue);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 新建一个customeTheme.scss</span><br><span class="line">$background-20a0ff: #20a0ff;</span><br><span class="line">$background-fa4f52: #fa4f52;</span><br><span class="line">$background-00a597: #00a597;</span><br><span class="line">$background-FEB84A: #FEB84A;</span><br><span class="line"> </span><br><span class="line">@mixin theme() &#123;</span><br><span class="line"> </span><br><span class="line">  [custome = &quot;20a0ff&quot;] &amp; &#123;</span><br><span class="line">    color: #ffffff;</span><br><span class="line">    background: $background-20a0ff;</span><br><span class="line">  &#125;</span><br><span class="line">  [custome = &quot;fa4f52&quot;] &amp; &#123;</span><br><span class="line">    color: yellowgreen;</span><br><span class="line">    background: $background-fa4f52;</span><br><span class="line">  &#125;</span><br><span class="line">  [custome = &quot;00a597&quot;] &amp; &#123;</span><br><span class="line">    color: blueviolet;</span><br><span class="line">    background: $background-00a597;</span><br><span class="line">  &#125;</span><br><span class="line">  [custome = &quot;FEB84A&quot;] &amp; &#123;</span><br><span class="line">    color: palevioletred;</span><br><span class="line">    background: $background-FEB84A;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// window.document.documentElement.setAttribute(&#x27;custome&#x27;,themeValue);</span><br></pre></td></tr></table></figure><h4 id="动态换肤"><a href="#动态换肤" class="headerlink" title="动态换肤"></a>动态换肤</h4><ol><li><p>样式前添加类名，切换时body添加相应的类。</p><p>批量处理css文件统一添加类名。工具gulp、gulp-css-wrap。<a href="gulp-css-wrap工具的使用——[批量为css文件扩展命名空间]">传送门</a></p></li></ol><ol start="2"><li>当主题多时，动态加载css，思路如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var head = document.getElementsByTagName(&#x27;HEAD&#x27;).item(0);</span><br><span class="line">var style = document.createElement(&#x27;link&#x27;);</span><br><span class="line">style.href = &#x27;style.css&#x27;;</span><br><span class="line">style.rel = &#x27;stylesheet&#x27;;</span><br><span class="line">style.type = &#x27;text/css&#x27;;</span><br><span class="line">head.appendChild(style);</span><br></pre></td></tr></table></figure><p><strong>颜色处理：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 转成 rgba </span><br><span class="line">hexToRgba (hex, opacity = 0.3) &#123;</span><br><span class="line">    let color = []</span><br><span class="line">    let rgb = []</span><br><span class="line">    hex = hex.replace(/#/, &#x27;&#x27;)</span><br><span class="line">    for (let i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">      color[i] = &#x27;0x&#x27; + hex.substr(i * 2, 2)</span><br><span class="line">      rgb.push(parseInt(Number(color[i])))</span><br><span class="line">    &#125;</span><br><span class="line">    return `rgba($&#123;rgb.join(&#x27;,&#x27;)&#125;,$&#123;opacity&#125;)`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    实践示例一：</p><p><a href="https://www.cnblogs.com/moqiutao/p/13896314.html">原理</a></p><p><a href="https://github.com/hxlmqtily1314/setVue-element-ui-themeColor">源码</a></p><p><a href="https://blog.csdn.net/GoldenLegs/article/details/105387890">参考1</a></p><p><a href="https://blog.csdn.net/weixin_33971130/article/details/93327583">参考2</a></p><p><a href="https://shq5785.blog.csdn.net/article/details/100619715">方案三：webpack</a></p><p><a href="https://segmentfault.com/a/1190000016061608">参考</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> scss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typara上传图片到jithub</title>
      <link href="/2021/05/11/typara%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0jithub/"/>
      <url>/2021/05/11/typara%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0jithub/</url>
      
        <content type="html"><![CDATA[<p>1.token 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</p><p>2.<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a>  软件下载</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Q</title>
      <link href="/2021/05/11/Q/"/>
      <url>/2021/05/11/Q/</url>
      
        <content type="html"><![CDATA[<ol><li><img src="C:%5CUsers%5Cymshan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210511160856826.png" alt="image-20210511160856826"></li></ol><p>2.eslint</p><h1 id="provisional-headers-are-shown"><a href="#provisional-headers-are-shown" class="headerlink" title="provisional headers are shown"></a>provisional headers are shown</h1><p><a href="https://segmentfault.com/a/1190000018191614">https://segmentfault.com/a/1190000018191614</a></p><p><a href="https://juejin.cn/post/6844903727770370062">https://juejin.cn/post/6844903727770370062</a></p><p><a href="https://blog.csdn.net/huihuikuaipao_/article/details/100183521">https://blog.csdn.net/huihuikuaipao_/article/details/100183521</a></p><p>解决发布问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = &#123;</span><br><span class="line">    <span class="attr">range</span>: <span class="string">&#x27;start&#x27;</span>,</span><br><span class="line">    <span class="attr">constraint</span>: <span class="string">&#x27;end_time&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx</p><p>图标问题 </p><p>charset utf-8;<br>    source_charset utf-8;<br>    charset_types text/html text/xml text/plain text/vnd.wap.wml text/css application/javascript application/json application/rss+xml;</p><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220401150343264.png" alt="image-20220401150343264"></p><p> sha512-11VdfCH5HRQAsqarxCqsEE+2aj2xzJFPLxzi4zs0AERu2EK/ReRceBxeYvdyLVLNMyPHrpNejY8jsjssJtvjzA== integrity checksum failed when using sha512: wanted sha512-11VdfCH5HRQAsqarxCqsEE+2aj2xzJFPLxzi4zs0AERu2EK/ReRceBxeYvdyLVLNMyPHrpNejY8jsjssJtvjzA== but got sha512-PUC4JxiSogPk0fLPaQ35CP3GNG3vprUSTEdunGEjGBCFz6LKE/rN9upqTfTV3KLZ3gycgKwpxMX6wyPaW0nmEA==. (4176561 bytes)<br>npm WARN tarball tarball data for @grg/table-making@0.0.4 (sha512-fiLdU1nwNkBhUDmNCKzNSeEjO9eZzeZq5aNCIO1g0yzbyLA3Z1vKS2KNXDLK+n0IjPZAkaZd6rLWj47PY7Stog==) seems to be corrupted. Trying one more time.</p>]]></content>
      
      
      <categories>
          
          <category> Q </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从0开始搭建vue项目</title>
      <link href="/2021/05/08/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/"/>
      <url>/2021/05/08/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>步骤：</p><ol><li><p>初始化项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>生成packjson.js文件记录项目详细信息。</p></li></ol><ol start="2"><li><p>配置loader</p><p>webpack不能</p></li><li><p>安装使用element-ui插件</p><p>按需引用：借助 <a href="https://github.com/QingWei-Li/babel-plugin-component">babel-plugin-component</a>，我们可以只引入需要的组件，以达到减小项目体积的目的。</p><ol><li>npm install babel-plugin-component -D</li><li></li></ol></li></ol><p>常用的一些包：</p><p>webpack、webpack-cli、webpack-dev-server[实时重加载依赖]、</p><p>vue、vue-loader、 vue-template-compiler、[安装打包单文件vue依赖]</p><p>css-loader、less-loader、style-loader(将css注入到DOM)_、[打包css依赖]、vue-style-loader</p><p>file-loader、html-webpack-plugin、[打包images依赖]</p><p>babel-loader、@babel/core、 @babel/preset-env、[浏览器兼容性依赖]</p><p>url.loader、file-loader</p><ol><li><p>jiang 将css 代码从js中抽离 extract-text-webpack-plugin ：在webpack4中，建议用mini-css-extract-plugin替代</p></li><li><style>标签中支持@import 引入外部css文件</li><li><p>打包溯源 source-map</p></li></ol><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WARNING in configuration</span><br><span class="line">The &#x27;mode&#x27; option has not been set, webpack will fallback to &#x27;production&#x27; for this value. Set &#x27;mode&#x27; option to &#x27;development&#x27; or &#x27;production&#x27; to enable defaults for each environment.</span><br><span class="line">You can also set it to &#x27;none&#x27; to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/</span><br></pre></td></tr></table></figure><p>原因：<br>这个warning一般出现在webpack打包的时候，出现这个问题的原因是在启动webpack的时候没有定义环境</p><p>解决方案：</p><ol><li>webpack命令后面加上 –mode即可</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --mode &lt;环境变量&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>webpack.config.js文件中添加mode属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">mode : <span class="string">&#x27;development&#x27;</span>   <span class="comment">// development为开发者环境，production为生产环境变量 ，还有一个为none</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[vue-loader] vue-template-compiler must be installed as a peer dependency, or a compatible compiler implementation must be passed via options.</span><br><span class="line">Error: [vue-loader] vue-template-compiler must be installed as a peer dependency, or a compatible compiler implementation must be passed via options.</span><br></pre></td></tr></table></figure><p>原因：</p><p>vue-loader报错，需要安装相同vue版本 vue-template-compiler 依赖</p><p>vue-template-compiler 官网上解释</p><p>This package can be used to pre-compile Vue 2.0 templates into render functions to avoid runtime-compilation overhead and CSP restrictions. In most cases you should be using it with <a href="https://github.com/vuejs/vue-loader"><code>vue-loader</code></a>, you will only need it separately if you are writing build tools with very specific needs.</p><p>解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-template-compiler</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ERROR in ./src/App.vue?vue&amp;type=style&amp;index=0&amp;id=7ba5bd90&amp;scoped=true&amp;lang=css&amp; (./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&amp;type=style&amp;index=0&amp;id=7ba5bd90&amp;scoped=true&amp;lang=css&amp;) 25:0</span><br><span class="line">Module parse failed: Unexpected token (25:0)</span><br><span class="line">File was processed with these loaders:</span><br><span class="line"> * ./node_modules/vue-loader/lib/index.js</span><br><span class="line">You may need an additional loader to handle the result of these loaders.</span><br></pre></td></tr></table></figure><p>原因：</p><p>vue文件中没有解析css代码失败，需要安装相应的loader(转换器)</p><p>解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ERROR in ./src/assets/img/logo.png 1:0</span><br><span class="line">Module parse failed: Unexpected character &#x27;�&#x27; (1:0)</span><br><span class="line">You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders</span><br><span class="line">(Source code omitted for this binary file)</span><br></pre></td></tr></table></figure><p>原因：</p><p>解析png失败，安装对应的转换器</p><p>解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm install url-loader</span><br><span class="line"></span><br><span class="line">并且添加loader</span><br><span class="line">&#123;</span><br><span class="line">test: /\.(png|jpg|jepg)$/,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: &quot;url-loader&quot;,</span><br><span class="line">options: &#123;</span><br><span class="line">limit: 1000,</span><br><span class="line">name: &quot;[name].[ext]&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR in ./src/assets/img/logo.png</span><br><span class="line">Module build failed (from ./node_modules/url-loader/dist/cjs.js):</span><br><span class="line">Error: Cannot find module &#x27;file-loader&#x27;</span><br></pre></td></tr></table></figure><p>原因：</p><p>url-loader 是封装fiel-loader，依赖它，</p><p>解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-loader</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Cannot find module &#x27;webpack-cli/bin/config-yargs&#x27; </span><br></pre></td></tr></table></figure><p>原因：</p><p>webpack-cli版本和webpack-dev-server 版本发生冲突</p><p>解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack-cli 版本@4降级到@3</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot find element: #app</span><br></pre></td></tr></table></figure><p>解决方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">     template: &quot;./index.html&quot;,</span><br><span class="line">     filename: &quot;index.html&quot;,</span><br><span class="line">   &#125;),</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// webpack-dev-server 运行项目 图片出现问题</span><br><span class="line">&lt;img data-v-7ba5bd90=&quot;&quot; src=&quot;[object Module]&quot; alt=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure><p>原因：file-loader 的版本是 4.3.0 及以上，esModule 默认为true 改为false就好了</p><p>解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将url-loader options -esModule 设置为false</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u013368397/article/details/86467581">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习路径</title>
      <link href="/2021/05/08/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/"/>
      <url>/2021/05/08/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p>从工程的搭建，模块化的设计，api 的定制，请求的封装，本地开发模式的建立，工程上线的部署等等</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>css</title>
      <link href="/2021/05/06/css/"/>
      <url>/2021/05/06/css/</url>
      
        <content type="html"><![CDATA[<p>margin-top 父盒子会有margin</p><p>所有毗邻的两个或更多盒元素的margin将会合并为一个margin共享之。毗邻的定义为：同级或者嵌套的盒元素，并且它们之间没有非空内容、Padding或Border分隔。</p><p>解决方法：</p><p>1、修改父元素的高度，增加padding-top样式模拟（padding-top：1px；常用）<br>2、为父元素添加overflow：hidden；样式即可（完美）<br>3、为父元素或者子元素声明浮动（float：left；可用）<br>4、为父元素添加border（border:1px solid transparent可用）<br>5、为父元素或者子元素声明绝对定位6、给子级设置display:inline-block</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gitbook 初使用</title>
      <link href="/2021/04/15/gitbook-%E5%88%9D%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/04/15/gitbook-%E5%88%9D%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>安装 gitbook 插件<br>前提： 安装 node <a href="https://nodejs.org/en/download/">下载</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gitbook-cli</span><br></pre></td></tr></table></figure><ol start="2"><li><p>初始化<br>新建一个文件夹，并在此路径下 cmd 运行 gitbook init<br>得到 README.md 和 SUMMARY.md (目录页)</p></li><li><p>修改 SUMMARY.md 自动生产目录</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Summary</span><br><span class="line"></span><br><span class="line">* [前言](README.md)</span><br><span class="line">    * [前言](README.md)</span><br><span class="line">    * [第一章](Chapter1/README.md)</span><br><span class="line">        * [第1节：衣](Chapter1/衣.md)</span><br><span class="line">        * [第2节：食](Chapter1/食.md)</span><br><span class="line">        * [第3节：住](Chapter1/住.md)</span><br><span class="line">        * [第4节：行](Chapter1/行.md)</span><br><span class="line">    * [第二章](Chapter2/README.md)</span><br><span class="line">    * [第三章](Chapter3/README.md)</span><br><span class="line">    * [五章](Chapter4/五章.md)</span><br><span class="line">    * [sixzhang](Chapter5/six.md)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后运行 gitbook init 即可安装目录生产对应文件夹</p><ol start="4"><li><p>生产电子书<br>运行 gitbook build ，生产 _book 文件夹， 里面是转化后的 html 文件</p></li><li><p>生成项目并上传到 github 仓库的 gh-pages 分支<br>为了方便，制成脚本 deploy.sh, 执行 bash deploy.sh</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env sh</span><br><span class="line"></span><br><span class="line">echo &#x27;开始执行命令&#x27;</span><br><span class="line"># 生成静态文件</span><br><span class="line">echo &#x27;执行命令：gitbook build .&#x27;</span><br><span class="line">gitbook build .</span><br><span class="line"></span><br><span class="line"># 进入生成的文件夹</span><br><span class="line">echo &quot;执行命令：cd ./_book\n&quot;</span><br><span class="line">cd ./_book</span><br><span class="line"></span><br><span class="line"># 初始化一个仓库，仅仅是做了一个初始化的操作，项目里的文件还没有被跟踪</span><br><span class="line">echo &quot;执行命令：git init\n&quot;</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"># 保存所有的修改</span><br><span class="line">echo &quot;执行命令：git add -A&quot;</span><br><span class="line">git add -A</span><br><span class="line"></span><br><span class="line"># 把修改的文件提交</span><br><span class="line">echo &quot;执行命令：commit -m &#x27;deploy&#x27;&quot;</span><br><span class="line">git commit -m &#x27;deploy&#x27;</span><br><span class="line"></span><br><span class="line"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span><br><span class="line">echo &quot;执行命令：git push -f https://github.com/yulilong/book.git master:gh-pages&quot;</span><br><span class="line">git push -f https://github.com/yulilong/book.git master:gh-pages</span><br><span class="line"></span><br><span class="line"># 返回到上一次的工作目录</span><br><span class="line">echo &quot;回到刚才工作目录&quot;</span><br><span class="line">cd -</span><br></pre></td></tr></table></figure><ol start="6"><li>预览</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook serve</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初嘗微前端</title>
      <link href="/2020/12/28/%E5%88%9D%E5%98%97%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
      <url>/2020/12/28/%E5%88%9D%E5%98%97%E5%BE%AE%E5%89%8D%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现有的微前端解决方案：</p><ol><li><p>iframe</p><p>提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决<br>缺点</p></li></ol><p>主页面和 iframe 共享最大允许的 HTTP 链接数。<br>iframe 阻塞主页面加载。<br>浏览器的后退按钮无效<br>隔离性无法被突破，导致应用间上下文无法被共享 2. 服务端模板组合</p><p>通过 Nginx 服务器根据 url 路径动态设置要加载的模板：<br>优点</p><p>实现简单<br>技术栈独立<br>缺点</p><p>需要额外配置 Nginx<br>前后端分离不彻底</p><p>3.微前端框架 single-spa</p><p>single-spa 的实现原理并不难，从架构上来讲可以分为两部分：子应用和容器应用。</p><p>子应用与传统的单页应用的区别在于</p><ul><li>不需要 HTML 入口文件，</li><li>js 入口文件导出的模块，必须包括 bootstrap、mount 和 unmount 三个方法。</li></ul><p>容器应用主要负责注册应用，当 url 命中子应用的路由时激活并挂载子应用，或者当子应用不处于激活状态时，将子应用从页面中移除卸载。其核心方法有两个：</p><ul><li><code>registerApplication</code> 注册并下载子应用</li><li><code>start</code> 启动处于激活状态的子应用。</li></ul><p>优点</p><ul><li>纯前端解决方案</li><li>可以使用多种技术栈</li><li>完善的生态</li></ul><p>缺点</p><ul><li>上手成本高</li><li>需要改造现有应用</li><li>跨应用的联调变得复杂</li></ul><h4 id="qiankun"><a href="#qiankun" class="headerlink" title="qiankun"></a>qiankun</h4><h5 id="1-配置子应用要点"><a href="#1-配置子应用要点" class="headerlink" title="1.配置子应用要点"></a>1.配置子应用要点</h5><ol><li><p>导出相应的生命周期钩子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bootstrap 只会在微应用初始化的时候调用一次，下次重新进入时会直接调用 mount 钩子，不再重复触发 bootstrap</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">   <span class="comment">// 每次进入都会调用 mount 方法，通常我们在这里触发应用的渲染方法</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mount</span>(<span class="params">props</span>) &#123;&#125;</span><br><span class="line">   <span class="comment">// 应用每次 切出/卸载 会调用的方法,通常在这卸载微应用的应用实例</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params">props</span>) &#123;&#125;</span><br><span class="line">   <span class="comment">// 可选生命周期钩子，仅使用 loadMicroApp 方式加载微应用时生效</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">props</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置为应用的打包工具</p><p>// @TODO 导出为umd原因：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> packageName = <span class="built_in">require</span>(<span class="string">&#x27;./package.json&#x27;</span>).<span class="property">name</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">     <span class="attr">output</span>: &#123;</span><br><span class="line">       <span class="attr">library</span>: <span class="string">`<span class="subst">$&#123;packageName&#125;</span>-[name]`</span>,</span><br><span class="line">       <span class="attr">libraryTarget</span>: <span class="string">&#x27;umd&#x27;</span>,</span><br><span class="line">       <span class="attr">jsonpFunction</span>: <span class="string">`webpackJsonp_<span class="subst">$&#123;packageName&#125;</span>`</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure></li><li><p>子应用必须支持跨域</p><p>由于 qiankun 是通过 fetch 去获取子应用的引入的静态资源的，所以必须要求这些静态资源支持跨域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jsdevServer</span>: &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>路由</p><p>如果基站使用history模式，子站也是用相同的模式比较简单。</p><p>并且需要进行改造路由拼接上子服务激活路径！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">base</span>: <span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span> ? <span class="string">&quot;/subTemplate/&quot;</span> : <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>   // @TODO  其他路由模式的组合有待探索</p><h5 id="2-配置主应用要点"><a href="#2-配置主应用要点" class="headerlink" title="2. .配置主应用要点"></a>2. .配置主应用要点</h5><ol start="0"><li><p>初始化项目</p></li><li><p>安装qiankun</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install qiankun -s</span><br></pre></td></tr></table></figure></li><li><p>页面添加微应用加载节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;yourContainer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注册微应用并启动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;react app&#x27;</span>, <span class="comment">// app name registered</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:7100&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#yourContainer&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/yourActiveRule&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;child1&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8081&#x27;</span>, <span class="comment">// 默认会加载这个html 解析里面的js 动态执行（子应用必须支持跨域）</span></span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#child1&#x27;</span>, <span class="comment">// 容器名</span></span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/child1&#x27;</span> <span class="comment">// 激活路径</span></span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 启动默认应用</span></span><br><span class="line"><span class="title function_">setDefaultMountApp</span>(<span class="string">&#x27;/child1&#x27;</span>)</span><br><span class="line"><span class="title function_">start</span>(&#123; <span class="attr">prefetch</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><p>备注： 如果子应用是在子路由上加载，自应用上的路由都需要在主应用上注册！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 子应用自路由路由注册  采用通配符*批量注册</span><br><span class="line">[</span><br><span class="line">    // 若子应用/路由有设置，必须多加一个单独的路由</span><br><span class="line">&#123;</span><br><span class="line">          path: &quot;/subTemplate&quot;,</span><br><span class="line">          component: null,</span><br><span class="line">          name: &quot;subTemplatehello&quot;,</span><br><span class="line">          meta: &#123;</span><br><span class="line">            title: &quot;subTemplate&quot;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">          path: &quot;/subTemplate/*&quot;,</span><br><span class="line">          component: null,</span><br><span class="line">          name: &quot;subTemplatehello&quot;,</span><br><span class="line">          meta: &#123;</span><br><span class="line">            title: &quot;subTemplate&quot;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="* 疑难杂症"></a>* 疑难杂症</h4><ol><li><p>主项目多个子应用切换时，若出现加载出错，会导致页面加载出错</p><p>复现步骤，demo 将路由匹配404 删除</p></li><li><p><a href="https://qiankun.umijs.org/zh/cookbook">路由选择</a></p></li></ol><ol start="3"><li></li></ol><p><a href="https://blog.csdn.net/mingyuanyunlian/article/details/108766703?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-11.control&amp;dist_request_id=1619767681497_03396&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-11.control">https://blog.csdn.net/mingyuanyunlian/article/details/108766703?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-11.control&amp;dist_request_id=1619767681497_03396&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-11.control</a></p><h4 id="qiankun-API"><a href="#qiankun-API" class="headerlink" title="qiankun API"></a>qiankun API</h4><ol><li><p>registerMicroApps(apps  Array<RegistrableApp>, lifeCycles <object> ?) 注册微应用的基础配置信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">RegistrableApp = &#123;</span><br><span class="line">name: &#x27;&#x27;, // 必须，微应用的名称，唯一</span><br><span class="line">entry: &#x27;&#x27;, // 必须，微应用的访问地址</span><br><span class="line">container: &#x27;&#x27;, // 必须，挂载容器</span><br><span class="line">activeRule : &#x27;&#x27;, // 必须，激活路径</span><br><span class="line">loader: (loding:boolean) =&gt; void //loading 状态发生变化时会调用的方法</span><br><span class="line">props: &lt;object&gt; // 主应用需要传递给微应用的数据</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LifeCycles</span><br><span class="line">type Lifecycle = (app: RegistrableApp) =&gt; Promise&lt;any&gt;;</span><br><span class="line">beforeLoad - Lifecycle | Array&lt;Lifecycle&gt; - 可选</span><br><span class="line">beforeMount - Lifecycle | Array&lt;Lifecycle&gt; - 可选</span><br><span class="line">afterMount - Lifecycle | Array&lt;Lifecycle&gt; - 可选</span><br><span class="line">beforeUnmount - Lifecycle | Array&lt;Lifecycle&gt; - 可选</span><br><span class="line">afterUnmount - Lifecycle | Array&lt;Lifecycle&gt; - 可选</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>start(opts <object>?)  启动 qiankun</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">opts = &#123;</span><br><span class="line">prefetch: true, // 是否开启预加载</span><br><span class="line">sandbox: true, // 是否开启沙箱</span><br><span class="line">singular: true, // 是否为单实例场景</span><br><span class="line">fetch: () =&gt; &#123;&#125;, // 自定义的 fetch 方法</span><br><span class="line">getPublicPath : (entry: Entry) =&gt; string , // 参数是微应用的 entry 值。</span><br><span class="line">getTemplate : (tpl: string) =&gt; string , // </span><br><span class="line">getTemplate : (assetUrl: string) =&gt; boolean, // 指定部分特殊的动态加载的微应用资源（css/js) 不被 qiankun 劫持处理。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>setDefaultMountApp(appLink)  设置主应用启动后默认进入的微应用</p></li><li><p>runAfterFirstMounted(（）=&gt; void)  第一个微应用 mount 后需要调用的方法</p></li><li><p>addGlobalUncaughtErrorHandler((event) =&gt; void) 添加全局的未捕获异常处理器。</p></li><li><p>removeGlobalUncaughtErrorHandler((event) =&gt; void)  移除全局的未捕获异常处理器。</p></li><li><p>initGlobalState(state)</p></li></ol><p><strong>qiankun 接入 原生html/js</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Purehtml Example&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div style=&quot;display: flex; justify-content: center; align-items: center; height: 200px;&quot;&gt;</span><br><span class="line">    Purehtml Example</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;purehtml-container&quot; style=&quot;text-align:center&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script src=&quot;//localhost:7104/entry.js&quot; entry&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const render = $ =&gt; &#123;</span><br><span class="line">  $(&#x27;#purehtml-container&#x27;).html(&#x27;Hello, render with jQuery&#x27;);</span><br><span class="line">  return Promise.resolve();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(global =&gt; &#123;</span><br><span class="line">  global[&#x27;purehtml&#x27;] = &#123;</span><br><span class="line">    bootstrap: () =&gt; &#123;</span><br><span class="line">      console.log(&#x27;purehtml bootstrap&#x27;);</span><br><span class="line">      return Promise.resolve();</span><br><span class="line">    &#125;,</span><br><span class="line">    mount: () =&gt; &#123;</span><br><span class="line">      console.log(&#x27;purehtml mount&#x27;);</span><br><span class="line">      return render($);</span><br><span class="line">    &#125;,</span><br><span class="line">    unmount: () =&gt; &#123;</span><br><span class="line">      console.log(&#x27;purehtml unmount&#x27;);</span><br><span class="line">      return Promise.resolve();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(window);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 微前端 </tag>
            
            <tag> qiankun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise</title>
      <link href="/2020/11/13/promise/"/>
      <url>/2020/11/13/promise/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>食用nginx</title>
      <link href="/2020/09/25/%E9%A3%9F%E7%94%A8nginx/"/>
      <url>/2020/09/25/%E9%A3%9F%E7%94%A8nginx/</url>
      
        <content type="html"><![CDATA[<p>Nginx 是</p><ul><li>一种轻量级的web服务器</li><li>设计思想是事件驱动的异步非阻塞处理（类node.js）</li><li>占用内存少、启动速度快、并发能力强</li><li>使用C语言开发</li><li>扩展性好，第三方插件非常多</li><li>在互联网项目中广泛应用</li></ul><p>4大应用</p><ol><li><p>动静分离</p><p><img src="https://user-gold-cdn.xitu.io/2020/4/17/171867d175eae45f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="nginx"></p><p>请求静态资源：直接从 nginx 服务器所设定的根目录路径去取对应的资源</p><p>请求动态资源：转发给真实的后台（应用服务器，如图中的Tomcat）去处理。</p></li><li><p>反向代理</p><p>代理服务器就是位于发起请求的客户端与原始服务器端之间的一台跳板服务器，正向代理可以隐藏客户端，反向代理可以隐藏原始服务器。</p><p><strong>反向代理的作用</strong>：</p><ol><li>保障应用服务器的安全（增加一层代理，可以屏蔽危险攻击，更方便的控制权限）</li><li>实现负载均衡</li><li>实现跨域（号称是最简单的跨域方式）</li></ol></li><li><p>负载均衡</p><p><a href="https://www.cnblogs.com/alterem/p/11490367.html">负载均衡实际应用</a></p><p>随着业务的不断增长和用户的不断增多，一台服务已经满足不了系统要求了。这个时候就出现了服务器 <a href="https://www.cnblogs.com/bhlsheji/p/4026296.html">集群</a>。</p><p>在服务器集群中，Nginx 可以将接收到的客户端请求“均匀地”（严格讲并不一定均匀，可以通过设置权重）分配到这个集群中所有的服务器上。这个就叫做<strong>负载均衡</strong>。</p><p><img src="https://user-gold-cdn.xitu.io/2020/4/17/171862efada16376?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="负载均衡"></p><p><strong>负载均衡的作用</strong></p><ul><li>分摊服务器集群压力</li><li>保证客户端访问的稳定性</li></ul><p>前面也提到了，负载均衡可以解决分摊服务器集群压力的问题。除此之外，Nginx还带有<strong>健康检查</strong>（服务器心跳检查）功能，会定期轮询向集群里的所有服务器发送健康检查请求，来检查集群中是否有服务器处于异常状态。</p><p>一旦发现某台服务器异常，那么在这以后代理进来的客户端请求都不会被发送到该服务器上（直健康检查发现该服务器已恢复正常），从而保证客户端访问的稳定性。</p></li><li><p>正向代理</p><p>科学上网vpn（俗称<code>翻墙</code>）其实就是一个正向代理工具。</p></li></ol><h3 id="Nginx的Master-Worker模式"><a href="#Nginx的Master-Worker模式" class="headerlink" title="Nginx的Master-Worker模式"></a>Nginx的Master-Worker模式</h3><p><img src="https://pic4.zhimg.com/80/v2-b24eb2b29b48f59883232a58392ddae3_720w.jpg" alt=""></p><p>启动Nginx后，其实就是在80端口启动了Socket服务进行监听，如图所示，Nginx涉及Master进程和Worker进程。</p><p>Master进程的作用：<strong>读取并验证配置文件nginx.conf；管理worker进程；</strong></p><p>Worker进程的作用是：<strong>每一个Worker进程都维护一个线程（避免线程切换），处理连接和请求；注意Worker进程的个数由配置文件决定，一般和CPU个数相关（有利于进程切换），配置几个就有几个Worker进程。</strong></p><h2 id="Nginx配置文件结构"><a href="#Nginx配置文件结构" class="headerlink" title="Nginx配置文件结构"></a>Nginx配置文件结构</h2><ul><li>1、<strong>全局块</strong>：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li><li>2、<strong>events块</strong>：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li><li>3、<strong>http块</strong>：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li><li>4、<strong>server块</strong>：配置虚拟主机的相关参数，一个http中可以有多个server。</li><li>5、<strong>location块</strong>：配置请求的路由，以及各种页面的处理情况。</li><li>注释: #</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...              #全局块</span><br><span class="line"></span><br><span class="line">events &#123;         #events块</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http      #http块</span><br><span class="line">&#123;</span><br><span class="line">    ...   #http全局块</span><br><span class="line">    server        #server块</span><br><span class="line">    &#123; </span><br><span class="line">        ...       #server全局块</span><br><span class="line">        location [PATTERN]   #location块</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN] </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...     #http全局块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">########### 每个指令必须有分号结束。#################</span><br><span class="line">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><br><span class="line">#worker_processes 2;  #允许生成的进程数，默认为1</span><br><span class="line">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span><br><span class="line">error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">events &#123;</span><br><span class="line">    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on</span><br><span class="line">    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br><span class="line">    worker_connections  1024;    #最大连接数，默认为512</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   #文件扩展名与文件类型映射表</span><br><span class="line">    default_type  application/octet-stream; #默认文件类型，默认为text/plain</span><br><span class="line">    #access_log off; #取消服务日志    </span><br><span class="line">    log_format myFormat &#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;; #自定义格式</span><br><span class="line">    access_log log/access.log myFormat;  #combined为日志格式的默认值</span><br><span class="line">    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line">    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line"></span><br><span class="line">    upstream mysvr &#123;   </span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      server 192.168.10.121:3333 backup;  #热备</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https://www.baidu.com; #错误页</span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">        listen       4545;   #监听端口</span><br><span class="line">        server_name  127.0.0.1;   #监听地址       </span><br><span class="line">        location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">           #root path;  #根目录</span><br><span class="line">           #index vv.txt;  #设置默认页</span><br><span class="line">           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表</span><br><span class="line">           deny 127.0.0.1;  #拒绝的ip</span><br><span class="line">           allow 172.18.5.54; #允许的ip           </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：</p><ol><li><p>查看 nginx 进程情况  tasklist /fi “imagename eq nginx.exe”</p></li><li><p>启动 start nginx</p></li><li><p>关闭</p><p>(1)输入nginx命令  nginx -s stop(快速停止nginx)  或  nginx -s quit(完整有序的停止nginx)</p><p>(2)使用taskkill  taskkill /f /t /im nginx.exe</p></li><li><p>热更新：nginx -s reload</p></li><li><p><strong>注意事项：</strong></p><ol><li><p>location 路径问题：</p><p>window下 分隔符是\</p><p>linux下 分隔符是/</p><p>而\t,\r\n,\r恰好是转义字符</p><p>nginx配置文件是可以转义这些字符的,导致配置出错,出现了500问题</p></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vscode</title>
      <link href="/2020/08/04/vscode/"/>
      <url>/2020/08/04/vscode/</url>
      
        <content type="html"><![CDATA[<ol><li><p>语言切换<br>插件下载 chinese language pack 安装重启即可切换成中文，<br>ctl + shift + p （mac command + shift + p）输入 configure display language，进行切换。</p></li><li><p>常用快捷键<br>ctl + shift + p 命令面板<br>ctl + p 快速打开 （文件）<br>ctl + shift + n 新建窗口<br>command + option + l 格式化</p></li><li><p>vue 文件使用大纲非常清晰</p></li><li><p>集中管理 todo，使用 todo tree 插件</p></li><li><p>插件 live-server使用,  本地开发部署并且设置代理：</p><p><a href="https://www.cnblogs.com/moqiutao/p/14486683.html"><a href="https://www.cnblogs.com/moqiutao/p/14486683.html">web前端常用的五种方式搭建本地静态html页面服务器</a></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;liveServer.settings.donotShowInfoMsg&quot;: true,</span><br><span class="line">&quot;liveServer.settings.proxy&quot;: &#123;</span><br><span class="line">  &quot;enable&quot;: true,</span><br><span class="line">  &quot;baseUri&quot;: &quot;/SeNT-HTML&quot;,</span><br><span class="line">  &quot;proxyUri&quot;: &quot;http://10.1.45.49:9080/SeNT-HTML&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;liveServer.settings.CustomBrowser&quot;: &quot;chrome&quot;,</span><br><span class="line">&quot;liveServer.settings.port&quot;: 5500,</span><br><span class="line">&quot;liveServer.settings.host&quot;: &quot;localhost&quot;,</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为云开发者认证学习</title>
      <link href="/2020/07/26/%E5%8D%8E%E4%B8%BA%E4%BA%91%E5%BC%80%E5%8F%91%E8%80%85%E8%AE%A4%E8%AF%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/07/26/%E5%8D%8E%E4%B8%BA%E4%BA%91%E5%BC%80%E5%8F%91%E8%80%85%E8%AE%A4%E8%AF%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="华为云"><a href="#华为云" class="headerlink" title="华为云"></a>华为云</h1><h2 id="系统总览"><a href="#系统总览" class="headerlink" title="系统总览"></a>系统总览</h2><h3 id="架构原则"><a href="#架构原则" class="headerlink" title="架构原则"></a>架构原则</h3><p>弹性、分布式、高可用、自动化、自服务</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>单体架构：局限，不可隔离和自治</p><p>微服务架构：细粒度扩容；独立性和敏捷性更好，架构持续演进更容易</p><p>Serverless架构：（无服务器架构）更轻量化、更快弹性、更低成本</p><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>Kubernetes</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>功能集合</title>
      <link href="/2020/07/20/%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/"/>
      <url>/2020/07/20/%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ol><li><p><a href="文件链接" download='下载文件名'></a></p></li><li><iframe src="downloadUrl" ></li><li><p>window.open(downloadUrl, “_blank”)</p></li><li><p>ajax 下载</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先请求音频的链接,再把返回值转换成二进制,再根据他二进制对象生成新链接,再创建a标签,点击a标签</span></span><br><span class="line"><span class="comment">//这是vue里面的写的普通页面也差不多</span></span><br><span class="line">    <span class="variable language_">this</span>.$axios(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: row.<span class="property">src</span>,</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>  <span class="comment">//这个不能少,让response二进制形式,如果你按照网上教程不设置这个将返回值进行BLOB([])进行处理可能会出现解析错误</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> href = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(response.<span class="property">data</span>); <span class="comment">//根据二进制对象创造新的链接</span></span><br><span class="line">    <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    a.<span class="title function_">setAttribute</span>(<span class="string">&#x27;href&#x27;</span>, href);</span><br><span class="line">    a.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>, row.<span class="property">title</span>);</span><br><span class="line">    a.<span class="title function_">click</span>();</span><br><span class="line">    <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(href);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  getObjectURL (file) &#123;</span></span><br><span class="line"><span class="comment">//       let url = null;</span></span><br><span class="line"><span class="comment">//       if (window.createObjectURL != undefined) &#123; // basic</span></span><br><span class="line"><span class="comment">//         url = window.createObjectURL(file);</span></span><br><span class="line"><span class="comment">//       &#125; else if (window.webkitURL != undefined) &#123; // webkit or chrome</span></span><br><span class="line"><span class="comment">//         try &#123;</span></span><br><span class="line"><span class="comment">//           url = window.webkitURL.createObjectURL(file);</span></span><br><span class="line"><span class="comment">//         &#125; catch (error) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//       &#125; else if (window.URL != undefined) &#123; // mozilla(firefox)</span></span><br><span class="line"><span class="comment">//         try &#123;</span></span><br><span class="line"><span class="comment">//           url = window.URL.createObjectURL(file);</span></span><br><span class="line"><span class="comment">//         &#125; catch (error) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//       &#125;</span></span><br><span class="line"><span class="comment">//       return url;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/bb48b64db783">参考</a></p><p><a href="https://blog.csdn.net/qq_24607837/article/details/98196114">blob下载文件</a></p><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><ol><li><p>window.print</p><p>缺点：只能打印body的整个内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oldHtml = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;dialogContent&#x27;</span>).<span class="property">innerHTML</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">print</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = oldHtml</span><br></pre></td></tr></table></figure><p>这种用法不推荐  页面卡顿并且体验非常差， 发现vue打印弹窗使用这种方法 reload后 按钮生效了。</p></li><li><p>vue-print-nb</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1. 安装依赖</span><br><span class="line">cnpm i vue-print-nb -S</span><br><span class="line">2. 在main.js/index.js里面引入</span><br><span class="line">import Print from &#x27;vue-print-nb&#x27;</span><br><span class="line">Vue.use(Print)</span><br><span class="line">3. 在需要打印的位置使用</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dialogContent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.status === &#x27;条件&#x27; ? &#x27;标题一&#x27; : &#x27;标题二&#x27; &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-layout&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--内容--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">4. 打印</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-print</span>=<span class="string">&quot;&#x27;#dialogContent&#x27;&quot;</span>&gt;</span>打印<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>print.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 安装依赖</span><br><span class="line">cnpm install vuePlugs_printjs -S</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 引入</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Print</span> <span class="keyword">from</span> <span class="string">&#x27;@/plugins/print&#x27;</span>   <span class="comment">// 下载到本地地址</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Print</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 使用</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;print&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--打印内容--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;no-print&quot;</span>&gt;</span>不要打印我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- &lt;div class=&quot;do-not-print-me-xxx&quot;&gt;不要打印我&lt;/div&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a-button</span> @<span class="attr">click</span>=<span class="string">&quot;prints&quot;</span>&gt;</span>打印<span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    prints () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$print(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">print</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// this.$print(this.$refs.print,&#123;&#x27;no-print&#x27;:&#x27;.do-not-print-me-xxx&#x27;&#125;) // 自定义不打印class 使用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>预览文件</title>
      <link href="/2020/07/17/%E9%A2%84%E8%A7%88%E6%96%87%E4%BB%B6/"/>
      <url>/2020/07/17/%E9%A2%84%E8%A7%88%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ol><li>iframe -pdf</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe</span><br><span class="line">   :src=&quot;url&quot;</span><br><span class="line">   type=&quot;application/x-google-chrome-pdf&quot;</span><br><span class="line">   width=&quot;100%&quot;</span><br><span class="line">   height=&quot;100%&quot; /&gt;</span><br></pre></td></tr></table></figure><p>浏览器基于安全禁止了访问本地文件,并且 src 如果是文件流， 会直接下载下来，不是预览</p><ol start="2"><li>vue-pdf</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vue-pdf</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pdf <span class="keyword">from</span> <span class="string">&#x27;vue-pdf&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;pdf</span><br><span class="line">  :src=&quot;src&quot; // src需要展示的PDF地址</span><br><span class="line">  :page=&quot;currentPage&quot; // 当前展示的PDF页码</span><br><span class="line">  @num-pages=&quot;pageCount=$event&quot; // PDF文件总页码</span><br><span class="line">  @page-loaded=&quot;currentPage=$event&quot; // 一开始加载的页面</span><br><span class="line">  @loaded=&quot;loadPdfHandler&quot;&gt; // 加载事件</span><br><span class="line">&lt;/pdf&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>websocket</title>
      <link href="/2020/07/09/websocket/"/>
      <url>/2020/07/09/websocket/</url>
      
        <content type="html"><![CDATA[<h1 id="Websocket-是什么？"><a href="#Websocket-是什么？" class="headerlink" title="Websocket 是什么？"></a>Websocket 是什么？</h1><p>WebSocket协议是html5的一种通信协议，该协议兼容我们常用的浏览器</p><p>WebSocket 是一种在单个 TCP 连接上进行全双工通信的协议。<br>WebSocket 通信协议 诞生于 2011 年，WebSocket API 也被 W3C 定为标准。<br>Websocket 允许服务器向客户端推送数据，并且只需要完成一次握手，就能持续的进行双向数据传输<br> WS协议和WSS协议两个均是WebSocket协议的SCHEM，两者一个是非安全的，一个是安全的。也是统一的资源标志符。</p><p>WSS表示在TLS之上的WebSocket。WS一般默认是80端口，而WSS默认是443端口，大多数网站用的就是80和433端口</p><p>websocket分为握手和数据传输阶段，即进行了HTTP握手 + 双工的TCP连接。</p><h4 id="1-客户端和服务器如何完成握手"><a href="#1-客户端和服务器如何完成握手" class="headerlink" title="1.客户端和服务器如何完成握手"></a>1.客户端和服务器如何完成握手</h4><p>Websocket 通过 HTTP/1.1 协议的 101 状态码进行握手。<br>为了创建 Websocket 连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（handshaking）。</p><p><img src="C:%5CUsers%5Cymshan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200821160238248.png" alt="image-20200821160238248"></p><h4 id="2-API"><a href="#2-API" class="headerlink" title="2. API"></a>2. API</h4><h5 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h5><p>WebSocket 对象，用于创建和管理Websocket 连接</p><p>WebSocket(url [, protocols])   返回一个WebSocket 对象</p><h5 id="2-WenSocket-readyState"><a href="#2-WenSocket-readyState" class="headerlink" title="2. WenSocket.readyState"></a>2. WenSocket.readyState</h5><p>实例对象的当前状态</p><table><thead><tr><th>常量</th><th>value</th><th>意义</th></tr></thead><tbody><tr><td>WebSocket.CONNECTING</td><td>0</td><td>正在连接</td></tr><tr><td>WebSocket.OPEN</td><td>1</td><td>连接成功</td></tr><tr><td>WebSocket.CLOSING</td><td>2</td><td>正在关闭</td></tr><tr><td>WebSocket.CLOSED</td><td>3</td><td>已经关闭 || 连接失败</td></tr></tbody></table><h5 id="3-属性"><a href="#3-属性" class="headerlink" title="3. 属性"></a>3. 属性</h5><table><thead><tr><th>属性名</th><th>意义</th><th></th></tr></thead><tbody><tr><td>url</td><td>绝对路径</td><td></td></tr><tr><td>readyState</td><td>链接状态</td><td></td></tr><tr><td>onopen</td><td>连接成功的回调</td><td></td></tr><tr><td>onmessage</td><td>从服务器接受到信息的回调</td><td></td></tr><tr><td>onerror</td><td>连接失败的回调</td><td></td></tr><tr><td>onclose</td><td>关闭连接的回调</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h5 id="4-方法"><a href="#4-方法" class="headerlink" title="4. 方法"></a>4. 方法</h5><table><thead><tr><th>方法名</th><th>意义</th><th>备注</th></tr></thead><tbody><tr><td>WebSocket.close( [ code  [ ,   reason ]  ] )</td><td>关闭当前连接</td><td></td></tr><tr><td>WebSocket.send( data )</td><td>传输数据</td><td></td></tr></tbody></table><h5 id="5-事件"><a href="#5-事件" class="headerlink" title="5. 事件"></a>5. 事件</h5><p>通过addEventListener 监听，也可以在对象对应属性设置监听</p><table><thead><tr><th>事件</th><th>意义</th><th></th></tr></thead><tbody><tr><td>close</td><td>连接被关闭时触发</td><td></td></tr><tr><td>error</td><td>连接因错误而关闭时触发，例如无法发送数据时</td><td></td></tr><tr><td>message</td><td>收到数据时触发</td><td></td></tr><tr><td>open</td><td>连接成功时触发</td><td></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:8080&#x27;</span>);</span><br><span class="line">ws.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="string">&#x27;Hello Server!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">ws.<span class="title function_">addEventListener</span>(<span class="string">&quot;close&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> code = event.<span class="property">code</span>;</span><br><span class="line">  <span class="keyword">var</span> reason = event.<span class="property">reason</span>;</span><br><span class="line">  <span class="keyword">var</span> wasClean = event.<span class="property">wasClean</span>;</span><br><span class="line">  <span class="comment">// handle close event</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>· 即时聊天通信</p><p>· 多玩家游戏</p><p>· 在线协同编辑/编辑</p><p>· 实时数据流的拉取与推送</p><p>· 体育/游戏实况</p><p>· 实时地图位置</p><p>参考：<br><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">阮老师资料</a></p>]]></content>
      
      
      <categories>
          
          <category> websocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流</title>
      <link href="/2020/07/07/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
      <url>/2020/07/07/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>防抖和节流这两个针对的都是函数，都是为了限制函数的执行次数，只是应用场景不一样，实现方式也不同。而这里的函数，通常是事件的响应函数。</p><h1 id="什么是防抖-debounce"><a href="#什么是防抖-debounce" class="headerlink" title="什么是防抖(debounce)"></a>什么是防抖(debounce)</h1><p>防抖，是将一段时间内的函数调用视为同一”信号”，多次调用只是发生了”抖动”，应该被无视，停止调用后函数被真正的执行一次。 一般会给一个阀值表示”抖动”结束，如 1s 内函数不被触发。<br>去抖动，策略是当事件被触发时，设定一个周期延迟执行动作，<strong><u>若期间又被触发，则重新设定周期</u></strong>，直到周期结束，执行动作。</p><p><img src="https://img-blog.csdn.net/20180705005109564?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1cGlhbjE5ODk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/7" alt="策略示意图"></p><p>前缘 debounce，即执行动作在前，然后设定周期，周期内有事件被触发，不执行动作，且周期重新设定。</p><p><img src="https://img-blog.csdn.net/20180705005639201?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1cGlhbjE5ODk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="前缘debounce"></p><p><strong>区别：执行事件的时机</strong></p><h1 id="什么是节流-throttling"><a href="#什么是节流-throttling" class="headerlink" title="什么是节流(throttling)"></a>什么是节流(throttling)</h1><p>节流，是限制函数过于频繁地执行，根据时间、次数等降低函数执行的频次。节流并不是断流，函数还是会多次执行，只是执行次数要降低。</p><p>节流的策略是：固定周期内，只执行一次动作，若有新事件触发，不执行。周期结束后，又有事件触发，开始新的周期。 节流策略也分前缘和延迟两种。与 debounce 类似，延迟是指 周期结束后执行动作，前缘是指执行动作后再开始周期。</p><p><img src="https://img-blog.csdn.net/20180705012049136?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1cGlhbjE5ODk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="节流示意图"></p><p><img src="https://img-blog.csdn.net/20180705005639201?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1cGlhbjE5ODk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="前缘throttling"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> timeout = <span class="literal">null</span>; <span class="comment">//定义一个定时器</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout !== <span class="literal">null</span>)</span><br><span class="line">      <span class="comment">// ！</span></span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout); <span class="comment">//清除这个定时器</span></span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(fn, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 滚动事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="title function_">debounce</span>(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p><img src="https://pics0.baidu.com/feed/ac345982b2b7d0a2d84acabf8034200f4a369a77.png?token=144594ffdcf72be54883f4d7b7d4ab43&s=8EAC5D22818C4CE8465540C40300D0B2" alt="防抖和节流对比图"></p><p>在事件持续触发的情况下， 防抖是在某段时间内只执行一下， 而节流是根据一定的时间间隔执行。</p><p>参考：</p><p><a href="https://blog.csdn.net/hupian1989/article/details/80920324">csdn</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防抖 </tag>
            
            <tag> 节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理财学习</title>
      <link href="/2020/06/15/%E7%90%86%E8%B4%A2%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/06/15/%E7%90%86%E8%B4%A2%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>思想决定行为 行为养成习惯 习惯决定命运</p><h1 id="关键词汇"><a href="#关键词汇" class="headerlink" title="关键词汇"></a>关键词汇</h1><ol><li>财务自由<br>家庭非工资收入 &gt; 正常的生活总支出<br>非工资收入： 股息、房租、REITs 分行、股权</li></ol><p>实现财务自由的过程就是将工资收入转为投资收入的过程</p><ol start="2"><li><p>生钱资产<br>能持续给你带来静现金流入的东西<br>生钱资产越多，非工资收入越多</p></li><li><p>耗钱资产<br>能持续给你带来静现金流出的东西</p><p>如：已实现财务自由的人通过生钱资产维持耗钱资产</p></li><li><p>资产<br>拥有或控制的能够以货币计价的东西</p></li></ol><p>根据现金流流向不同分为： 生钱资产、耗钱资产、其他资产</p><p>严格控制耗钱资产的比例，将耗钱资产和其他资产转化为生钱资产</p><ol start="5"><li>财商<br>识别生钱资产、耗钱资产、其他资产并获得生钱资产的能力</li><li>净现金流</li></ol><p>某东西在一段时间内发生的现金流入和流出的差额<br>现金流入 - 现金流出 为正 为负 决定其为生钱资产还是耗钱资产</p><ol start="7"><li><p>负债<br>借来的未来需要偿还的东西<br>如： 房贷、车贷、消费贷</p><p>负债 购买生钱资产为 好负债 （生钱资产带来的现金流入能够覆盖负债带来的本息支出）<br>负债 购买耗钱资产为 坏负债</p><p>分辨好负债与好负债，调整比例</p></li><li><p>财务报表<br>能反应公司、家庭、个人的财务健康状况</p><p>财务报表分为： 资产负债表、损益表、现金流量表</p></li><li><p>收入<br>现金收入： 工资、 股息、房租、公司股权分红 ，有较强的确定性，是财务自由的重点<br>和 账面收入： 股票、房子上涨带来的账面收入，较强的不确定性</p></li><li><p>支出<br>支出减少你的钱儿增加别人的钱</p></li></ol><p>支出分为好支出： 能够带来更多收入的支出 如： 购买生钱资产<br>坏支出 如购买耗钱资产</p><ol start="11"><li>利率<br>资金使用的成本</li></ol><p>爸妈的资金： 成本一般为 0<br>银行资金： 成本相对比较低<br>民间借贷： 成本为银行的数倍<br>高利贷</p><ol start="12"><li>利息</li></ol><p>利息 = 本金 * 利率</p><p>利息收入是投资收入的一种，收益率一般比较低</p><ol start="13"><li><p>股息<br>上市公司给股票投资者的现金分红<br>公司利润好就分得多，，亏损则不分</p><p>好公司每年连续分红<br>股息是财务自由的主要收入之一</p></li><li><p>REITs 分红收入<br>持有 REITs 定期获得的收入</p><p>美国 REITs 每季度或没有分红一次<br>香港 REITS 每半年一次</p><p>和股息不同： 法律强制 REITs 每年把不低于 90%的额应税收入分配给投资者<br>REITS 可以看成房租收入：投资 REITs 间接投资房地产</p></li><li><p>房租收入<br>把房子租给别人获得的收入</p></li></ol><p>净租金收入 = 房租收入 - 房子发生的总支出</p><ol start="16"><li>账面收益</li></ol><p>资产市场价大于买入成本价</p><ol start="17"><li><p>投资<br>根据资金计划投入资金买卖生钱资产的行为</p></li><li><p>投资计划<br>包括： 投资目标、投资期限、投资金额、投资工具的选择、买入标准、卖出标准等等<br>是否有投资计划是投资和投机的关键区别之一。</p></li><li><p>投资者<br>根据资金计划投入资金买卖生钱资产的人</p></li><li><p>投机<br>投入资金赚差价的行为<br>投机 = 赌博</p></li><li><p>投机者<br>投入资金赚差价的人</p><p>炒股的人、 炒房的人与赌马的人没有区别，投机者是赌徒在投资领域的专业称呼</p></li><li><p>炒股 让钱越来越少的行为</p></li><li><p>炒房 让钱越来越少的行为</p></li><li><p>企业家<br>成功创造了一家有强大系统公司的人</p></li><li><p>有钱人<br>资产规模大的人</p></li><li><p>富人<br>生钱资产占总资产比例大于 80%的人</p></li><li><p>穷人<br>资产规模很小或者没有资产的人</p></li><li><p>有钱的穷人<br>资产规模大但生钱资产占比小于 30%的人</p></li><li><p>没钱的富人<br>掌握实现财务自由技能但是暂时还没有钱的人</p></li><li><p>风险<br>收益的不确定性和本金损失的可能性。风险主要是指不确定性<br>投机有风险，投资无风险。<br>投资本无风险，分不清生钱资产和耗钱资产的人才有风险的？？？</p></li><li><p>货币<br>通常被叫做钱，是交易的媒介。<br>现代货币基本都是新一货币，也叫法币。<br>信用货币和法币比钱更能表达货币的内涵。<br>货币的本质是央行发行的债券，他是央行的负债。（央行的资产负债表）</p><p>货币是政府的负债，负债之所以 有价值，是依靠政府的信用，政府有信用，货币就有价值。<br>政府的信用靠税收来保证，也就死靠财政来保障。<br>税收增长的速度远低于货币或者是债务增长的速度。货币就可能变成</p><p>没有内在价值的货币成为劣币</p><p>生钱资产称为良币</p><p>经济学有个规律： 劣币驱逐良币（同时存在两种货币， 良币会被少数人保存起来退出市场）</p></li><li><p>外币<br>外国货币。指本国货币以外的其他国家地区的货币 （美元，欧元，日元，英镑，瑞士法郎、澳元、加元、人民币）<br>比较强的安全性和稳定性，世界范围内认可度比较高</p></li><li><p>汇率<br>一种货币换另一种货币的比率<br>也是一种货币购买另一种货币的价格</p><p>汇率长期是波动的</p></li><li><p>时间<br>每个人最重要的资源，也是最公平的资源</p><p>财务自由的目的就是获得更多的可自由支配时间<br>财务自由不是财富而是重点是时间<br>社会中创造的所有价值归根结底都是时间价值</p></li><li><p>复利<br>在拿到利息后继续把利息投资，就是俗称利滚利<br>被称为世界第八大奇迹，复利最能体现时间的价值</p></li></ol><p>计算公式 S = p*（1+ i） n 次方</p><p>学习也是复利效应。坚持学习必能看到结果。</p><ol start="36"><li><p>有价证券<br>证明持有人拥有某种收益权力的凭证<br>比如： 股票是有价证券的一种，持有股票的人拥有上市公司的部分所有权<br>债券。</p></li><li><p>股票<br>股份公司发行的所有权凭证<br>比如参加股东大会，投票表决，参与公司重大决策，收取股息等。</p></li><li><p>REITs<br>房地产投资信托基金<br>是一种房地产资产证券化的工具</p><p>房地产投资门槛高，流动性差，交易成本高，不适合大部分投资者投资</p><p>REITs 本质还是房地产，投资者持有信托基金，信托基金持有房地产，持有等于间接持有房地产</p><p>REITs 大概 90%左右的收入来自房地产</p></li><li><p>债券<br>标准化的借条<br>借款人主要是政府、银行、大公司、风险和收益很小</p></li><li><p>抵押贷款<br>把资产抵押给别人向别人借钱，如不能偿还，别人有处置资产的权力</p></li><li><p>企业<br>以盈利为目的法人或者非法人组织</p><p>法人： 相当于你在法律层面上复制了一个虚构的你，它可以帮你行使权力和承担责任（民事责任，刑事责任不能承担）。</p><p>法人主要包括有限责任公司和股份有限公司。<br>非法人主要包括个人独资企业，合伙企业，企业的分支机构（分公司，办事处，代表处）等等</p><p>非法人不能独立承担民事责任，也就是不能隔离你的风险<br>非法人有税收上的优惠</p><p>至于选择法人实体还是非法人实体，要看自己的需求<br>可以组合运用实现风险隔离，税收筹划或者是其他特殊目的</p></li><li><p>公司<br>以营业为目的的法人企业<br>要想要更快的实现财务自由，一定要用好公司</p><p>公司股权的分红收入也是实现财务自由的主要收入之一</p></li><li><p>股市<br>股票集中交易的市场</p></li></ol><p>合法的把投机者的钱变成投资者，上市公司和政府的钱的地方</p><p>投资者赚取股利和价差： 上市公司可以增发获利， 政府获得税收</p><ol start="44"><li><p>楼市<br>房地产交易的市场<br>合法的把投机者的钱变成投资者，房产中介，银行和政府的钱的地方<br>投资者获得房租和价差，房产中介或得佣金， 银行获得利息，政府获得税收</p></li><li><p>税收<br>政府凭借权力强行征收的钱，保护费。呵呵呵<br>政府可以用税收的手段鼓励和抑制某种投资行为。</p><p>聪明的投资者会理利用政府的税收优惠政策为自己合法的增加收入</p></li></ol><h1 id="gt-购买生钱资产-创造生钱资产"><a href="#gt-购买生钱资产-创造生钱资产" class="headerlink" title="&gt;购买生钱资产 / 创造生钱资产"></a>&gt;购买生钱资产 / 创造生钱资产</h1><h1 id="通过财务报表读懂家庭财务状况"><a href="#通过财务报表读懂家庭财务状况" class="headerlink" title="通过财务报表读懂家庭财务状况"></a>通过财务报表读懂家庭财务状况</h1><p>1.分为 财务危机、财务安全、财务自由。<br>以 净现金流 的正负为标准。<br>净现金流 是决定资产价值的核心因素。</p><p>将负债划分为<br>生钱资产形成的负债<br>耗钱资产形成的负债<br>其他资产形成的负债<br>日常生活形成的负债</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-i18n</title>
      <link href="/2020/06/08/vue-i18n/"/>
      <url>/2020/06/08/vue-i18n/</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>import Vue from ‘vue’<br>import VueI18n from ‘vue-i18n’</p><p>Vue.use(VueI18n)</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>const i18n = new VueI18n({<br>locale: ‘CN’, // 语言标识<br>messages : {<br>en: {<br>message: {<br>hello: ‘hello world’<br>}<br>},<br>cn: {<br>message: {<br>hello: ‘你好、世界’<br>}<br>}<br>}<br>})</p><p>/<em>———使用语言包———–</em>/<br>const i18n = new VueI18n({<br>locale: ‘zh’, // 语言标识<br>//this.$i18n.locale // 通过切换 locale 的值来实现语言切换<br>messages: {<br>‘zh’: require(‘./common/lang/zh’), // 中文语言包<br>‘en’: require(‘./common/lang/en’) // 英文语言包<br>}<br>})</p><p>/_ eslint-disable no-new _/<br>new Vue({<br>el: ‘#app’,<br>i18n, //挂载到实例，一定得在这个位置，而不是 comonents 中<br>template: ‘<App/>‘,<br>components: {<br>App<br>}<br>})</p><p>上面的代码正式将 vue-i18n 引入 vue 项目中，创建一个 i18n 实例对象，方便全局调用。我们通过 this.$i18n.locale 来进行语言的切换。</p><p>在组件的 template 中，调用$t()方法<br>在组件的script中，调用this.$i18n.t()方法</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设备设施代码</title>
      <link href="/2020/05/06/%E8%AE%BE%E5%A4%87%E8%AE%BE%E6%96%BD%E4%BB%A3%E7%A0%81/"/>
      <url>/2020/05/06/%E8%AE%BE%E5%A4%87%E8%AE%BE%E6%96%BD%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<ol><li><p>postcss</p><p>是一个用 JavaScript 工具和插件转换 CSS 代码的工具</p><p>检验CSS、支持变量和混合，转化CSS3的新特性语法、行内图片等。</p><p>它的工作模式是<strong>接收样式源代码并交由编译插件处理</strong>，最后输出CSS。通过PostCSS包含的很多功能强大的插件，可以让我们使用更新的CSS特性，保证更好的浏览器兼容性。</p><p>postcss不能单独使用，配合构建工具使用。</p><p>使用：</p><p><strong>postcss.config.js</strong> 来对 Postcss 进行配置</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MVVM</title>
      <link href="/2020/04/26/MVVM/"/>
      <url>/2020/04/26/MVVM/</url>
      
        <content type="html"><![CDATA[<p>什么是MVVM<br>MVVM 是MOdle-view-viewModal的简写他是一种设计思想。</p><p>Modle是数据模型，负责数据的逻辑；</p><p>view是视图，负责将数据模型转化成UI展现出来；</p><p>viewModel是同步model和view的对象，是两者的桥梁纽带，负责监听模型数据的改变和控制视图行为、处理用户交互。</p><p>M-model js数据对象</p><p>V-view 界面</p><p>VM-viewModel 用户双向绑定数据与页面，通俗说是vm实例</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue 插件封装</title>
      <link href="/2020/04/21/vue-%E6%8F%92%E4%BB%B6%E5%B0%81%E8%A3%85/"/>
      <url>/2020/04/21/vue-%E6%8F%92%E4%BB%B6%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ol><li>使用必须在 new Vue 前，引入插件并使用 Vue.use(插件名， { // 参数})</li><li>开发封装：</li></ol><p>必须暴露 install 方法</p><p>必须暴露出去 export default XXX</p><h2 id="开发插件的几种方法"><a href="#开发插件的几种方法" class="headerlink" title="开发插件的几种方法"></a>开发插件的几种方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @params:Vue Vue构造器</span></span><br><span class="line"><span class="comment">// @params：options &#123;Object&#125; 对象-可选参数</span></span><br><span class="line"></span><br><span class="line">插件名.<span class="property">install</span> = <span class="keyword">function</span>(<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 0. 全局注册组件 (组件名，组件) 通常组件已经定义name属性并导出 可写为 Vue.component(PageGrid.name, PageGrid);</span></span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;PageGrid&#x27;</span>, <span class="title class_">PageGrid</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 添加【全局方法或属性】 vue-custom-element 【 Vue.全局方法名| 属性名】</span></span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property">myGlobalMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 逻辑...</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局资源 指令/过滤器/过渡等，如 vue-touch</span></span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span><br><span class="line">        bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">          <span class="comment">// 逻辑...</span></span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 注入组件选项   通过全局 mixin方法添加一些组件选项，如: vuex 【某个钩子 mixins，一些内容 】</span></span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">        <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">// 逻辑...</span></span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加【实例方法】   通过把它们添加到 Vue.prototype.方法名(一般用$区分开) 上实现</span></span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params">methodOptions</span>) &#123;</span><br><span class="line">        <span class="comment">// 逻辑...</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Eg</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyPlugin</span>.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (install.<span class="property">installed</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;Grid&#x27;</span>, <span class="title class_">Grid</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title class_">MyPlugin</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-ff56acf4816e518b99ff8b7f9077849c_1440w.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">toast.install = function (Vue) &#123;</span><br><span class="line">console.log(&#x27;use了&#x27;)</span><br><span class="line">// 1. 创建组件构造器</span><br><span class="line">const toastConstructor = Vue.extend(Toast)</span><br><span class="line">// 2. 使用组件构造器创建一个组件</span><br><span class="line"> const toast = new toastConstructor()</span><br><span class="line">// 3. 将组件手动挂载到一个元素上</span><br><span class="line">toast.$mount(document.createElement(&#x27;div&#x27;))</span><br><span class="line">// 4. 将节点插入到页面中，$el就是改组件的节点</span><br><span class="line">document.body.appendChild(toast.$el)</span><br><span class="line">// 5. 将组件加入到vue实例上</span><br><span class="line">Vue.prototype.$toast = toast</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="发布模块到-npm-仓库"><a href="#发布模块到-npm-仓库" class="headerlink" title="发布模块到 npm 仓库"></a>发布模块到 npm 仓库</h3><p>标准的包工程包括：</p><p>bin/</p><p>doc/</p><p>lib/</p><p>src/</p><p>index.js</p><p>package.js</p><h4 id="1-编写模块目录"><a href="#1-编写模块目录" class="headerlink" title="1.编写模块目录"></a>1.编写模块目录</h4><ol><li><p>npm init 编写自己模块的 package.json</p></li><li><p>创建 lib 目录，用于存放我模块(js文件)</p></li><li><p>根目录创建index.js 文件，引用我们写的模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports = require(&#x27;./lib/XXX&#x27;);</span><br></pre></td></tr></table></figure><p>*** 修改webpack.config.js</p><p>由于不是所有使用组件的人都是通过 npm 安装使用 import 引入组件的，还有很多人是通过 <code>&lt;script&gt;</code>标签的方式直接引入的，所以我们要将 libraryTarget 改为 umd 格式，同时我们要配置文件入口和出口</p><p><img src="https://img-blog.csdn.net/20180215230533618?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXBwbGVjaHVfTHU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="webpack.config.js"></p><p>***测试插件</p><p>在发正式包之前可以在本地先打一个包，然后测试下有没有问题，如果没问题再发布到npm上。<br>首先，打包到本地<br><code>npm run build</code><br><code>npm pack</code> （打包）<br>npm pack 之后，就会在当前目录下生成 一个tgz 的文件。<br>打开一个新的vue项目，在当前路径下执行(‘路径’ 表示文件所在的位置)</p><p>npm install 路径/XXX.tgz</p></li></ol><h4 id="2-上传到-npm-仓库"><a href="#2-上传到-npm-仓库" class="headerlink" title="2. 上传到 npm 仓库"></a>2. 上传到 npm 仓库</h4><ol><li>npm adduser</li><li>npm publish</li></ol><p>vue3</p><p><img src="../images/vue-%E6%8F%92%E4%BB%B6%E5%B0%81%E8%A3%85/image-20221231124014665.png" alt="image-20221231124014665"></p><p><img src="../images/vue-%E6%8F%92%E4%BB%B6%E5%B0%81%E8%A3%85/image-20221231124045151.png" alt="image-20221231124045151"></p><h4 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a><a href="https://www.cnblogs.com/best/p/10076782.html">模块化开发</a></h4><ol><li><p>函数封装</p></li><li><p>对象封装（外部可以随意修改内部成员）</p></li><li><p>立即执行函数表达式（IIFE）</p></li><li><p>模块化规范</p><ol><li><p>CommonJS（同步加载模块）</p><p>CommonJs 是服务器端模块的规范，Node.js采用了这个规范。一个单独的文件就是一个模块。加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象。</p></li><li><p>AMD [(Asynchromous Module Definition) 异步模块定义]（异步加载模块）</p><p>块支持对象 函数 构造器 字符串 JSON等各种类型的模块</p></li><li><p>CMD（Common Module Definition）通用模块定义</p></li><li><p>UMD(AMD和CommonJS的综合产物)</p><p>UMD先判断是否支持Node.js的模块（exports）是否存在，存在则使用Node.js模块模式。</p><p>在判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。</p></li><li><p>原生JS模块化（Native JS）</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读elemenyt el-tree 源码</title>
      <link href="/2020/04/21/%E9%98%85%E8%AF%BBelemenyt-el-tree-%E6%BA%90%E7%A0%81/"/>
      <url>/2020/04/21/%E9%98%85%E8%AF%BBelemenyt-el-tree-%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="el-tree-入口"><a href="#el-tree-入口" class="headerlink" title="el-tree 入口"></a><a href="https://github.com/ElemeFE/element/blob/dev/packages/tree/index.js">el-tree 入口</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Tree</span> <span class="keyword">from</span> <span class="string">&#x27;./src/tree.vue&#x27;</span>;</span><br><span class="line"><span class="comment">/* 这里使用的是全局注册组件的方法开发的插件 */</span></span><br><span class="line"><span class="title class_">Tree</span>.<span class="property">install</span> = <span class="keyword">function</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="title class_">Tree</span>.<span class="property">name</span>, <span class="title class_">Tree</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Tree</span>;</span><br></pre></td></tr></table></figure><h3 id="tree-vue"><a href="#tree-vue" class="headerlink" title="tree.vue"></a><a href="https://github.com/ElemeFE/element/blob/dev/packages/tree/src/tree.vue#L41">tree.vue</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">TreeStore</span> <span class="keyword">from</span> <span class="string">&#x27;./model/tree-store&#x27;</span>; </span><br><span class="line"><span class="keyword">import</span> &#123; getNodeKey, findNearestComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;./model/util&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElTreeNode</span> <span class="keyword">from</span> <span class="string">&#x27;./tree-node.vue&#x27;</span>; <span class="comment">// components: &#123; ElTreeNode &#125;,</span></span><br><span class="line"><span class="keyword">import</span> &#123;t&#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/locale&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/mixins/emitter&#x27;</span>; <span class="comment">// mixins: [emitter],</span></span><br><span class="line"><span class="keyword">import</span> &#123; addClass, removeClass &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/utils/dom&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-ssr</title>
      <link href="/2020/04/21/vue-ssr/"/>
      <url>/2020/04/21/vue-ssr/</url>
      
        <content type="html"><![CDATA[<p>ssr 服务端渲染</p><p>能很好的解决首页白屏的问题</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue单元测试</title>
      <link href="/2020/04/17/vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/04/17/vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>1. </p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域</title>
      <link href="/2020/04/15/%E8%B7%A8%E5%9F%9F/"/>
      <url>/2020/04/15/%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">广义的跨域：</span><br><span class="line">1. 资源跳转： A链接、重定向、表单提交</span><br><span class="line">2. 资源嵌入： &lt;link&gt;、&lt;script&gt;、&lt;img&gt;、&lt;frame&gt;等带src的dom标签，还有样式中background:url()、@font-face()等文件外链</span><br><span class="line">3. 脚本请求： js发起的ajax请求、dom和js对象的跨域操作等</span><br></pre></td></tr></table></figure><ol><li>需要跨域的原因</li></ol><p>跨域问题其实就是浏览器的同源策略所导致的。</p><p>「同源策略」是一个重要的安全策略，限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。不同源的客户端脚本在没有明确授权的情况下，不能读写对方的资源。</p><p>同源策略限制以下几种行为：</p><p>1.Cookie、LocalStorage 和 IndexDB 无法读取</p><p>2.DOM 和 Js对象无法获得</p><p>3.AJAX 请求不能发送</p><h1 id="跨域方案"><a href="#跨域方案" class="headerlink" title="跨域方案"></a>跨域方案</h1><h2 id="1-jsonp"><a href="#1-jsonp" class="headerlink" title="1. jsonp"></a>1. jsonp</h2><p>为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以【通过动态创建script，仅能用get方法】，再请求一个带参网址实现跨域通信。</p><p>jsonp是请求之后后台包装好一段json，并且把数据放在一个callback函数，返回一个js文件，动态引入这个文件，下载完成js之后，会去调用这个callback,通过这样访问数据。</p><p>JSONP主要就是利用了script标签没有跨域限制的这个特性来完成的，以及使用方法回调的原理.（缺点：只能实现get方法）。</p><p>流程：</p><p>1.前端定义解析函数（例如 jsonpCallback=function(){….}）</p><p>2.通过 params 形式包装请求参数，并且声明执行函数(例如 cb=jsonpCallback)</p><p>3.后端获取前端声明的执行函数（jsonpCallback），并以带上参数并调用执行函数的方式传递给前端。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基本用法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 前端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">jsonpCallback</span> = <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080/api/a.js?a=123&amp;cb=sonpCallback&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-document-domain-iframe跨域（用于主域相同，子域不同的跨域应用场景）"><a href="#2-document-domain-iframe跨域（用于主域相同，子域不同的跨域应用场景）" class="headerlink" title="2. document.domain + iframe跨域（用于主域相同，子域不同的跨域应用场景）"></a>2. document.domain + iframe跨域（用于主域相同，子域不同的跨域应用场景）</h2><p>需要共享的页面【都】设置相同的 document.domain<br>我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同。<br>例如：a.b.c.com 中某个文档的document.domain 可以设成a.b.c.com、b.c.com 、c.com中的任意一个</p><h2 id="3-location-hash-iframe跨域"><a href="#3-location-hash-iframe跨域" class="headerlink" title="3. location.hash + iframe跨域"></a>3. location.hash + iframe跨域</h2><p>实现原理： a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a.html：(http://www.demo1.com/a.html) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframe&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://www.demo2.com/b.html&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;iframe&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 向b.html传hash值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        iframe.<span class="property">src</span> = iframe.<span class="property">src</span> + <span class="string">&#x27;#user=admin&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 开放给同域c.html的回调方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">onCallback</span>(<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;data from c.html ---&gt; &#x27;</span> + res);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- b.html：(http://www.demo2.com/b.html) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframe&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://www.demo1.com/c.html&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;iframe&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听a.html传来的hash值，再传给c.html</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        iframe.<span class="property">src</span> = iframe.<span class="property">src</span> + location.<span class="property">hash</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- c.html：(http://www.demo1.com/c.html) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听b.html传来的hash值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 再通过操作同域a.html的js回调，将结果传回</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">parent</span>.<span class="title function_">onCallback</span>(<span class="string">&#x27;hello: &#x27;</span> + location.<span class="property">hash</span>.<span class="title function_">replace</span>(<span class="string">&#x27;#user=&#x27;</span>, <span class="string">&#x27;&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-cros"><a href="#4-cros" class="headerlink" title="4. cros"></a>4. cros</h2><p>跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin (domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器「不同的域、协议或端口」请求一个资源时，资源会发起一个「跨域 HTTP 请求」。</p><p>详见<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">跨域资源共享 CORS 详解</a></p><p>普通跨域请求：只服务端设置Access-Control-Allow-Origin: “XXX”即可，前端无须设置，若要带cookie请求：前后端都需要设置。</p><p>Access-Control-Allow-Credentials:true，发送http认证信息，withCredentials:true，设置带cookie</p><h2 id="5-Node-正向代理"><a href="#5-Node-正向代理" class="headerlink" title="5. Node 正向代理"></a>5. Node 正向代理</h2><p>引入：http-proxy-middleware</p><p>vue-cli高版本直接设置：proxy， 低版本设置：proxyTable，请求的时候不需要加上域名</p><h2 id="6-Nginx-反向代理"><a href="#6-Nginx-反向代理" class="headerlink" title="6. Nginx 反向代理"></a>6. Nginx 反向代理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">服务器设置：</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name local.test;</span><br><span class="line">        location /api &#123;</span><br><span class="line">            proxy_pass http://localhost:8080;</span><br><span class="line">        &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://localhost:8000;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Websocket"><a href="#7-Websocket" class="headerlink" title="7. Websocket"></a>7. Websocket</h2><p>websocket 本质上是没有使用HTTP 的响应头的，所以没有跨域的限制<br>客户端和服务器之间存在持久的连接，浏览器与服务器全双工通信，双向数据传输不限制跨域。</p><h2 id="8-window-postMessage"><a href="#8-window-postMessage" class="headerlink" title="8. window.postMessage"></a>8. window.postMessage</h2><p>Window.postMessage(message, targetOrigin, [transfer]);<br> 方法可以安全地实现跨源通信。通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为https），端口号（443为https的默认值），以及主机  (两个页面的模数 Document.domain设置为相同的值) 时，这两个脚本才能相互通信。window.postMessage() 方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全。</p><p> window.addEventListener(“message”, receiveMessage, false);<br>监听处理message 传递的数据<br>receiveMessage（e） {console.log(e.data)}</p><p>用途<br>1.页面和其打开的新窗口的数据传递</p><p>2.多窗口之间消息传递</p><p>3.页面与嵌套的 iframe 消息传递</p><h2 id="9-window-name-iframe来进行跨域"><a href="#9-window-name-iframe来进行跨域" class="headerlink" title="9. window.name+iframe来进行跨域"></a>9. window.name+iframe来进行跨域</h2><p>window的name属性特征：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB），即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面window.name都有读写的权限。</p><p>因此，在同一个窗口打开(同一个iframe)，可共享name的值，name 的值只能是字符串。<br>思路： iframe打开一个不同域的页面，并将要访问的数据放在window.name中,然后将iframe转为同域的页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// cnblogs.com/a.html</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//iframe载入data.html页面会执行此函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> ifr = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;iframe&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  ifr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//这个时候iframe和a.html已经处于同一源，可以互相访问</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> data = ifr.<span class="property">contentWindow</span>.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//获取iframe中的window.name，也就是data.html中给它设置的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(data);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  ifr.<span class="property">src</span> = <span class="string">&#x27;b.html&#x27;</span>;<span class="comment">//这里的b.html为随便一个页面，只要与a.html同源就行，目的是让a.html能够访问到iframe中的东西，否则访问不到</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span> = <span class="string">&quot;iframe&quot;</span> <span class="attr">src</span> = <span class="string">&quot;cnblogs.com/data.html&quot;</span> <span class="attr">style</span> = <span class="string">&quot;display:none&quot;</span> <span class="attr">onload</span> = <span class="string">&quot;getData()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考资料：</p><p><a href="https://segmentfault.com/a/1190000011145364">https://segmentfault.com/a/1190000011145364</a><br><a href="https://segmentfault.com/a/1190000022398875#item-3-6">https://segmentfault.com/a/1190000022398875#item-3-6</a><br><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html">http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a><br><a href="https://www.cnblogs.com/sdcs/p/8484905.html">https://www.cnblogs.com/sdcs/p/8484905.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端缓存</title>
      <link href="/2020/04/15/%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98/"/>
      <url>/2020/04/15/%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>前端缓存分为：HTTP缓存和浏览器缓存</p><p><img src="https://upload-images.jianshu.io/upload_images/13277068-efe830b68127838c.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt="avatar"></p><h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><ol><li>本地存储小容量</li></ol><table><thead><tr><th>类型</th><th>大小</th><th>说明</th></tr></thead><tbody><tr><td>Cookie</td><td>4K</td><td>主要用于用户信息的存储，Cookie的内容可以自动在请求的时候被传递给服务器。</td></tr><tr><td>LocalStorage</td><td>5M</td><td>数据将一直保存在浏览器内，直到用户清除浏览器缓存数据为止。</td></tr><tr><td>SessionStorage</td><td>5M</td><td>其他属性同LocalStorage，只不过它的生命周期同标签页的生命周期，当标签页被关闭时，SessionStorage也会被清除。</td></tr></tbody></table><ol start="2"><li>本地存储大容量<br>主要用在前端有大容量存储需求的页面上，例如，在线编辑浏览器或者网页邮箱。</li></ol><table><thead><tr><th>类型</th><th>大小</th><th>说明</th></tr></thead><tbody><tr><td>WebSql</td><td></td><td></td></tr><tr><td>IndexDB</td><td></td><td></td></tr></tbody></table><h2 id="往返缓存"><a href="#往返缓存" class="headerlink" title="往返缓存"></a>往返缓存</h2><pre><code>往返缓存又称为BFCache，是浏览器在前进后退按钮上为了提升历史页面的渲染速度的一种策略。该策略具体表现为，当用户前往新页面时，将当前页面的浏览器DOM状态保存到bfcache中；当用户点击后退按钮的时候，将页面直接从bfcache中加载，节省了网络请求的时间。</code></pre><h1 id="IndexDB"><a href="#IndexDB" class="headerlink" title="IndexDB"></a>IndexDB</h1><p>特点：IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），接近NOSQL</p><ol><li><p>键值对存储</p></li><li><p>异步：LocalStorage 属于同步</p></li><li><p>支持事务：有失败的操作数据库能回滚</p></li><li><p>同源限制</p></li><li><p>储存空间大：不小于250M</p></li><li><p>支持二进制存储：可以储存字符串、二进制数据（ArrayBuffer 对象和 Blob 对象）</p></li></ol><p>   概念</p><ul><li>数据库：IDBDatabase 对象</li><li>对象仓库：IDBObjectStore 对象</li><li>索引： IDBIndex 对象</li><li>事务： IDBTransaction 对象</li><li>操作请求：IDBRequest 对象</li><li>指针： IDBCursor 对象</li><li>主键集合：IDBKeyRange 对象</li></ul><ol><li><p>数据库</p><p>相关数据的容器</p></li><li><p>对象仓库</p><p>每个数据包含若干个仓库</p><p>类似于表格</p></li><li><p>数据记录</p><p>对象仓库报的的数据记录，类似数据库的行，只有逐渐和数据体两部分</p></li><li><p>索引</p><p>对象仓库里面，为不同的属性建立索引，为了加速数据检索</p></li><li><p>事务</p><p>数据记录的读写和删改，都要通过事务完成。事务对象提供<code>error</code>、<code>abort</code>和<code>complete</code>三个事件，用来监听操作结果。</p></li></ol><p>操作流程</p><ol><li><p>打开数据库 【open】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="variable language_">window</span>.<span class="property">indexedDB</span>.<span class="title function_">open</span>(databaseName, version);</span><br></pre></td></tr></table></figure></li><li><p>新建数据库 </p><p>新建数据库与打开数据库是同一个操作。如果指定的数据库不存在，就会新建。不同之处在于，后续的操作主要在upgradeneeded事件的监听函数里面完成，因为这时版本从无到有，所以会触发这个事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onupgradeneeded</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  db = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">  <span class="keyword">var</span> objectStore;</span><br><span class="line">  <span class="keyword">if</span> (!db.<span class="property">objectStoreNames</span>.<span class="title function_">contains</span>(<span class="string">&#x27;person&#x27;</span>)) &#123;</span><br><span class="line">    objectStore = db.<span class="title function_">createObjectStore</span>(<span class="string">&#x27;person&#x27;</span>, &#123; <span class="attr">keyPath</span>: <span class="string">&#x27;id&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建对象仓库以后，下一步可以新建索引。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onupgradeneeded</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  db = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">  <span class="keyword">var</span> objectStore = db.<span class="title function_">createObjectStore</span>(<span class="string">&#x27;person&#x27;</span>, &#123; <span class="attr">keyPath</span>: <span class="string">&#x27;id&#x27;</span> &#125;);</span><br><span class="line">  objectStore.<span class="title function_">createIndex</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  objectStore.<span class="title function_">createIndex</span>(<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新增数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> request = db.<span class="title function_">transaction</span>([<span class="string">&#x27;person&#x27;</span>], <span class="string">&#x27;readwrite&#x27;</span>)</span><br><span class="line">    .<span class="title function_">objectStore</span>(<span class="string">&#x27;person&#x27;</span>)</span><br><span class="line">    .<span class="title function_">add</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">email</span>: <span class="string">&#x27;zhangsan@example.com&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  request.<span class="property">onsuccess</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据写入成功&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据写入失败&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(</span><br></pre></td></tr></table></figure></li><li><p>读取数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">read</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> transaction = db.<span class="title function_">transaction</span>([<span class="string">&#x27;person&#x27;</span>]);</span><br><span class="line">   <span class="keyword">var</span> objectStore = transaction.<span class="title function_">objectStore</span>(<span class="string">&#x27;person&#x27;</span>);</span><br><span class="line">   <span class="keyword">var</span> request = objectStore.<span class="title function_">get</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   request.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;事务失败&#x27;</span>);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   request.<span class="property">onsuccess</span> = <span class="keyword">function</span>(<span class="params"> event</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (request.<span class="property">result</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Name: &#x27;</span> + request.<span class="property">result</span>.<span class="property">name</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Age: &#x27;</span> + request.<span class="property">result</span>.<span class="property">age</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Email: &#x27;</span> + request.<span class="property">result</span>.<span class="property">email</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;未获得数据记录&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">read</span>();</span><br></pre></td></tr></table></figure></li><li><p>遍历数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> objectStore = db.<span class="title function_">transaction</span>(<span class="string">&#x27;person&#x27;</span>).<span class="title function_">objectStore</span>(<span class="string">&#x27;person&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   objectStore.<span class="title function_">openCursor</span>().<span class="property">onsuccess</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> cursor = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (cursor) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Id: &#x27;</span> + cursor.<span class="property">key</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Name: &#x27;</span> + cursor.<span class="property">value</span>.<span class="property">name</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Age: &#x27;</span> + cursor.<span class="property">value</span>.<span class="property">age</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Email: &#x27;</span> + cursor.<span class="property">value</span>.<span class="property">email</span>);</span><br><span class="line">       cursor.<span class="title function_">continue</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有更多数据了！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">readAll</span>();</span><br></pre></td></tr></table></figure></li><li><p>更新数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> request = db.<span class="title function_">transaction</span>([<span class="string">&#x27;person&#x27;</span>], <span class="string">&#x27;readwrite&#x27;</span>)</span><br><span class="line">    .<span class="title function_">objectStore</span>(<span class="string">&#x27;person&#x27;</span>)</span><br><span class="line">    .<span class="title function_">put</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span>, <span class="attr">email</span>: <span class="string">&#x27;lisi@example.com&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  request.<span class="property">onsuccess</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据更新成功&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据更新失败&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">update</span>();</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> request = db.<span class="title function_">transaction</span>([<span class="string">&#x27;person&#x27;</span>], <span class="string">&#x27;readwrite&#x27;</span>)</span><br><span class="line">    .<span class="title function_">objectStore</span>(<span class="string">&#x27;person&#x27;</span>)</span><br><span class="line">    .<span class="title function_">delete</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  request.<span class="property">onsuccess</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据删除成功&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">remove</span>();</span><br></pre></td></tr></table></figure></li><li><p>使用索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectStore.createIndex(&#x27;name&#x27;, &#x27;name&#x27;, &#123; unique: false &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> transaction = db.<span class="title function_">transaction</span>([<span class="string">&#x27;person&#x27;</span>], <span class="string">&#x27;readonly&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> store = transaction.<span class="title function_">objectStore</span>(<span class="string">&#x27;person&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> index = store.<span class="title function_">index</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> request = index.<span class="title function_">get</span>(<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"></span><br><span class="line">request.<span class="property">onsuccess</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = e.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入了解vue</title>
      <link href="/2020/04/12/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3vue/"/>
      <url>/2020/04/12/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3vue/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ustbhuangyi.github.io/vue-analysis/v2/prepare/">参考1</a></p><ol><li>vue 工作机制</li></ol><p>上图一张<br><a href="https://blog.csdn.net/RedLoVE0908/article/details/99749359">资料:Vue的内部运行机制</a><br><img src="https://img-blog.csdnimg.cn/20190819185138874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlZExvVkUwOTA4,size_16,color_FFFFFF,t_70" alt="avatar"><br><img src="https://cn.vuejs.org/images/lifecycle.png" alt="avatar"></p><ol start="2"><li>响应式原理实现<br>全靠Object.defineProperty（ES6，ES5无法shim的特性，因此不支持IE8及以下）,转换成getter/setter</li></ol><p>Object.defineProperty(obj, prop, descriptor)<br>直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>obj</td><td>要定义属性的对象。</td></tr><tr><td>prop</td><td>要定义或修改的属性的名称或 Symbol 。</td></tr><tr><td>descriptor</td><td>要定义或修改的属性描述符。</td></tr></tbody></table><table><thead><tr><th>descriptor属性</th><th>说明</th></tr></thead><tbody><tr><td>configurable</td><td>该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认为 false。</td></tr><tr><td>enumerable</td><td>当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中。默认为 false。</td></tr><tr><td>value</td><td>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。</td></tr><tr><td>writable</td><td>当且仅当该属性的 writable 键值为 true 时，属性的值，也就是上面的 value，才能被赋值运算符改变。默认为 false。</td></tr><tr><td>get</td><td>属性的 getter 函数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。默认为 undefined。</td></tr><tr><td>set</td><td>属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。</td></tr><tr><td>默认为 undefined。</td><td></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">options</span>) &#123; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_data</span> = options.<span class="property">data</span>; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">observer</span>(<span class="variable language_">this</span>.<span class="property">_data</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">observer</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!value || <span class="keyword">typeof</span> value !== <span class="string">&quot;object&quot;</span>) &#123; <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//  对于data 逐个设置getter和setter</span></span><br><span class="line">     <span class="title class_">Object</span>.<span class="title function_">keys</span>(value).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123; </span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">defineReactive</span>(value, key, value[key]); </span><br><span class="line">       &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123; </span><br><span class="line">      <span class="comment">//  </span></span><br><span class="line">       <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">         <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">/* 属性可枚举 */</span>, </span><br><span class="line">         <span class="attr">configurable</span>: <span class="literal">true</span> <span class="comment">/* 属性可被修改或删除 */</span>,</span><br><span class="line">          <span class="title function_">get</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> val; &#125;,</span><br><span class="line">          <span class="title function_">set</span>(<span class="params">newVal</span>) &#123; </span><br><span class="line">            <span class="keyword">if</span> (newVal === val) <span class="keyword">return</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">cb</span>(newVal);</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>依赖收集与追踪</li></ol><p><img src="https://img-blog.csdnimg.cn/20190819190253771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlZExvVkUwOTA4,size_16,color_FFFFFF,t_70" alt="avatar"></p><p>在get中执行dep.depend()进行依赖绑定<br>在set中执行dep.notify()通知观察者进行视图更新<br>nextTick的异步更新策略<br>在响应式更新数据的过程中，如果一个数据的值在一段时间内频繁更新了很多次，会依次触发响应式setter-&gt;Dep-&gt;Watcher-&gt;update-&gt;patch,所以引入nextTick的异步更新策略，实现一个queue队列，会在下一个tick去执行一次上面的响应式更新操作，大大优化了性能。</p><p>使用到nextTick 的场景：<br>$nextTick(callback)。这里的回调函数（callback）将在数据更新完成，视图更新完毕之后被调用。</p><p>1.Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中.</p><p>原因： created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。<br>2.在数据变化后要执行的某个操作，而这个操作【需要使用随数据改变而改变的DOM结构的时候】，这个操作都应该放进Vue.nextTick()的回调函数中。更新数据后，想要使用js对新的视图进行操作时<br>3.在使用某些第三方插件时 ，这些插件需要【dom动态变化后重新应用该插件】，这时候就需要使用$nextTick()来重新应用插件的方法。</p><ol start="4"><li>编译<br>1 parse：（解析）利用正则将模板转换成抽象语法树（AST）；<br>2 optimize： （标记静态节点做优化）标记静态节点，以后update的时候，diff算法可以跳过静态节点<br>3 generate：（转成字符串）将抽象语法树（AST）转成字符串，供render去渲染DOM</li></ol><p>render function被渲染的时候，会对data对象进行数据读取，会触发getter函数，从而把data里面的属性进行依赖收集，依赖收集的目的是将这些属性放到观察者（Watcher）的观察队列中，一旦我们对data里面的属性进行修改时，就会触发setter函数，setter告诉观察者数据变化，需要重新渲染视图，观察者调用update来更新视图。</p><p>在update的时候，会执行【patch】，将新旧VNode传进去，通过diff算法算出差异，局部更新视图，做到最优化。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex</title>
      <link href="/2020/04/12/Vuex/"/>
      <url>/2020/04/12/Vuex/</url>
      
        <content type="html"><![CDATA[<p>状态管理：即共享数据管理<br>核心概念</p><ol><li>store</li><li>state // 数据中心</li><li>mutations // 操作数据</li><li>Actions // 触发操作，执行动作，改变数据</li></ol><p>状态管理模式</p><p>0.安装<br>1.vuex 依赖Promise ，必要时npm install es6-promise –save</p><p>1.概念<br>1.1定义 ： 专为vue.js应用程序开发的状态管理模式。集中式存储管理应用的所有组件的状态【共享的变量=&gt;全局变量】,并以相应的规则保证状态以一种可预测的方式发生变化【方法统一】。</p><p>1.2 应用场景： 单页面应用不同组件的数据流通。【vuex state存放的数据是当前页面初始化生成的一个实例。刷新页面数据重新生成】</p><p>对于简单的应用，使用 global event bus 即可。</p><p>1.3：基础概念：</p><p>1.3.0 store 仓库，实质是一个容器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>1.3.1 state  单一状态树 【实质是一个json对象？而且是应用唯一的】,响应式的.在计算属性返回即可.</p><p>1.3.2 getters 对state中数据的一种过滤，加强属性。</p><p>1.3.3 actions 对于state数据的修改动作在这里提交，提交即触发mutation修改数据</p><p>1.3.4 mutations 更改vuex的store中的状态的唯一方法 ，只能执行同步操作。获取状态兑现： state= $store.state ，store .commit触发状态变化.[改变变量必须要用提交mution方法,不能直接修改state里的值]</p><p>1.3.5 module 模块化 </p><p>2.核心（统一在store.js里面设置）<br>2.1 state </p><p>注意: 并不是所有的状态都放到vuex中进行管理,严格于单个组件的状态应作为组件的局部状态.</p><p>获取store.js的state值赋给模板的data值：<br>2.1.1获取vuex的状态</p><p> 计算属性返回<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> const Counter = &#123;</span><br><span class="line">  template: `&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      return store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>注意: 1.众组件频繁导入store. 解决方法: 在根实例注册store选项,这样子组件就可以用this.$store访问</p><p>2.1.2 mapState 辅助函数</p><p>当获取多个状态时,逐个声明为计算属性先得重复冗余</p><p>解决方法:</p><p>mapState 辅助生成计算属性,返回的是一个对象. 【需要先import】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 在单独构建的版本中辅助函数为 Vuex.mapState</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  computed: mapState(&#123;</span><br><span class="line">    // 箭头函数可使代码更简练</span><br><span class="line">    count: state =&gt; state.count,</span><br><span class="line">    // 计算属性的名称和state子节点名称相同, 可简写</span><br><span class="line">    // 映射 this.count 为 store.state.count</span><br><span class="line">    //&#x27;count&#x27;</span><br><span class="line">    // 传字符串参数 &#x27;count&#x27; 等同于 `state =&gt; state.count`</span><br><span class="line">    countAlias: &#x27;count&#x27;,</span><br><span class="line">    // 为了能够使用 `this` 获取局部状态，必须使用常规函数</span><br><span class="line">    countPlusLocalState (state) &#123;</span><br><span class="line">      return state.count + this.localCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>2.1.3 对象展开运算符</p><p>将mapState 返回的对象和局部计算属性混合使用.[即将多个对象合并为一个]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  localComputed () &#123; /* ... */ &#125;,</span><br><span class="line">  // 使用对象展开运算符将此对象混入到外部对象中</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br>3.1 Getter ()</p><p>可认同为store的计算属性,即从store中派生出来一些状态.gett而的返回值会根据他的依赖被缓存起来.</p><p>3.1.1 getter接受state 作为第一个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; id: 1, text: &#x27;...&#x27;, done: true &#125;,</span><br><span class="line">      &#123; id: 2, text: &#x27;...&#x27;, done: false &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: state =&gt; &#123;</span><br><span class="line">      return state.todos.filter(todo =&gt; todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>3.1.2  通过属性访问</p><p>getter 会暴露为 store.getters对象,可以通过属性进行访问.</p><p>Getter 也可以接受其他 getter 作为第二个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  // ...</span><br><span class="line">  doneTodosCount: (state, getters) =&gt; &#123;</span><br><span class="line">    return getters.doneTodos.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>3.1.3 组件中使用,类似使用state</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  doneTodosCount () &#123;</span><br><span class="line">    return this.$store.getters.doneTodosCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;﻿​</span><br></pre></td></tr></table></figure><p><br>3.1.4 通过方法访问</p><p>getter 可以放回一个函数,实现给getter传参,而且通过方法去调用时,每次都会进行调用,不缓存结果.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  // ...</span><br><span class="line">  getTodoById: (state) =&gt; (id) =&gt; &#123;</span><br><span class="line">    return state.todos.find(todo =&gt; todo.id === id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//调用</span><br><span class="line">store.getters.getTodoById(2) // -&gt; &#123; id: 2, text: &#x27;...&#x27;, done: false &#125;</span><br></pre></td></tr></table></figure><p></p><p>3.1.5 mapGetters  辅助函数</p><p>将store 中的getter 函数映射到局部计算属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  computed: &#123;</span><br><span class="line">  // 使用对象展开运算符将 getter 混入 computed 对象中</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      doneCount: &#x27;doneTodosCount&#x27;</span><br><span class="line">      &#x27;anotherGetter&#x27;,</span><br><span class="line">       // 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>4.1mutation（存放改变state的状态的方法）</p><p>VUEX 提供commit 方法来修改状态</p><p>每个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">   increment (state,n) &#123;</span><br><span class="line">     // 变更状态</span><br><span class="line">     state.count++；</span><br><span class="line">   //   state.count +=n;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> // 调用</span><br><span class="line"> store.commit(&#x27;increment&#x27;,10)</span><br><span class="line"> </span><br><span class="line"> store.commit(&#123;</span><br><span class="line">     type： &#x27;increment&#x27;,</span><br><span class="line">     params： 10</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p><br>mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)</p><p>4.1.1 提交 载荷 payload</p><p>store.commint传入额外的参数,即mutation的荷载</p><p>参数可以是单个,也可以是一个对象</p><p>4.1.2  对象风格的提交方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">store.commit(&#123;</span><br><span class="line">  type: &#x27;increment&#x27;,//将提交的放在一个对象中</span><br><span class="line">  amount: 10</span><br><span class="line">&#125;)﻿​</span><br></pre></td></tr></table></figure><p><br>4.1.3 mutation 遵守vue的相应规则</p><p>1.初始化所需属性</p><p>2.对象添加舒心更需要用</p><p>vue.set(obj, ‘XXX’,  123) 或者 新对象替换老对象state.obj = { … state.obj , XXX: 123}  </p><p>4.1.4 使用常量替代Mutation事件类型(事件名称)</p><p>方法: 用单独的文件 将事件类型替代为 const 常量,暴露出去.</p><pre><code>而后在store.js 中用常量名作为函数名.</code></pre><p>4.1.5 mutation 必需是同步函数</p><p>因为异步函数的回调是不可追踪的.</p><p>4.1.6 组件中提交Mutation</p><p>你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，</p><p>或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。</p><p>为使调用提交方法与组件的方法一样，可以将他到处重塑。（先import mapMutiations）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapMutations &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      &#x27;increment&#x27;, // 将 `this.increment()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span><br><span class="line"></span><br><span class="line">      // `mapMutations` 也支持载荷：</span><br><span class="line">      &#x27;incrementBy&#x27; // 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&#x27;incrementBy&#x27;, amount)`</span><br><span class="line">    ]),</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      add: &#x27;increment&#x27; // 将 `this.add()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;﻿​</span><br></pre></td></tr></table></figure><p>2.5  Action</p><p>action  提交的是mutation 不直接更改状态(mutation是同步的，Action是异步的mutation)</p><p>可包含任意异步操作</p><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象（作为参数！），因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。context 对象为什么不是 store 实例本身了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">context &#123;</span><br><span class="line">    commit: ƒ boundCommit(type, payload, options)</span><br><span class="line">    dispatch: ƒ boundDispatch(type, payload)</span><br><span class="line">    getters: &#123;…&#125;</span><br><span class="line">    rootGetters: &#123;…&#125;</span><br><span class="line">    rootState: &#123;__ob__: Observer&#125;</span><br><span class="line">    state: &#123;…&#125;</span><br><span class="line">&#125;﻿​</span><br></pre></td></tr></table></figure><p><br>2.5.1 分发Action [触发]</p><p>Action 通过 store.dispatch 方法触发,处理 action处理函数返回的promise,并且返回promise</p><p>store.dispatch(‘increment’)<br><br>Actions 支持同样的载荷方式和对象方式进行分发：</p><p>```<br>// 以载荷形式分发<br>store.dispatch(‘incrementAsync’, {<br>  amount: 10<br>})</p><p>// 以对象形式分发<br>store.dispatch({<br>  type: ‘incrementAsync’,<br>  amount: 10<br>})﻿</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">2.5.2调用异步API 和分发多重mutation</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">actions: &#123;</span><br><span class="line">  checkout (&#123; commit, state &#125;, products) &#123;</span><br><span class="line">    // 把当前购物车的物品备份起来</span><br><span class="line">    const savedCartItems = [...state.cart.added]</span><br><span class="line">    // 发出结账请求，然后乐观地清空购物车</span><br><span class="line">    commit(types.CHECKOUT_REQUEST)</span><br><span class="line">    // 购物 API 接受一个成功回调和一个失败回调</span><br><span class="line">    shop.buyProducts(</span><br><span class="line">      products,</span><br><span class="line">      // 成功操作</span><br><span class="line">      () =&gt; commit(types.CHECKOUT_SUCCESS),</span><br><span class="line">      // 失败操作</span><br><span class="line">      () =&gt; commit(types.CHECKOUT_FAILURE, savedCartItems)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;﻿​</span><br></pre></td></tr></table></figure><p>2.5.3组件中分发action</p><p>你在组件中使用 this.$store.dispatch(‘xxx’) 分发 action，</p><p>或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapActions &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line">      &#x27;increment&#x27;, // 将 `this.increment()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span><br><span class="line">      // `mapActions` 也支持载荷：</span><br><span class="line">      &#x27;incrementBy&#x27; // 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch(&#x27;incrementBy&#x27;, amount)`</span><br><span class="line">    ]),</span><br><span class="line">    ...mapActions(&#123;</span><br><span class="line">      add: &#x27;increment&#x27; // 将 `this.add()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>2.5.4 组合action</p><p>利用 async / await，我们可以如下组合 action：</p><p>```<br>// 假设 getData() 和 getOtherData() 返回的是 Promise</p><p>actions: {<br>  async actionA ({ commit }) {<br>    commit(‘gotData’, await getData())<br>  },<br>  async actionB ({ dispatch, commit }) {<br>    await dispatch(‘actionA’) // 等待 actionA 完成<br>    commit(‘gotOtherData’, await getOtherData())<br>  }<br>}</p><p>一个 <code>store.dispatch</code> 在不同模块中可以触发多个 action 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">2.6 Module</span><br><span class="line"></span><br><span class="line">将store对象切割成模块,每个模块拥有自己的state mutation action getter (嵌套子模块)</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">const moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a // -&gt; moduleA 的状态</span><br><span class="line">store.state.b // -&gt; moduleB 的状态﻿​</span><br></pre></td></tr></table></figure><p>2.6.1 模块的局部状态</p><p>对于某块内部的mutation 和getter,接收的第一个参数是模块的局部状态对象.</p><p>对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState</p><p>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：</p><p>```<br>const moduleA = {<br>  state: { count: 0 },<br>  mutations: {<br>    increment (state) {<br>      // 这里的 <code>state</code> 对象是模块的局部状态<br>      state.count++<br>    }<br>  },<br>  getters: {<br>    doubleCount (state) {<br>      return state.count * 2<br>    }<br>  },<br>  actions: {<br>    //   局部状体通过context.state暴露出来<br>    incrementIfOddOnRootSum ({ state, commit, rootState }) {<br>      if ((state.count + rootState.count) % 2 === 1) {<br>        commit(‘increment’)<br>      }<br>    },<br>    getters: {<br>    sumWithRootCount (state, getters, rootState) {<br>      return state.count + rootState.count<br>    }<br>  }<br>  }<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line"> 2.6.2 命名空间</span><br><span class="line"></span><br><span class="line"> 模块内部的action mutation getter 注册在全局命名空间.</span><br><span class="line"></span><br><span class="line">模块可设置自己的命名空间,添加namespace: true,会自动根据注册路径调整命名.</span><br><span class="line"></span><br><span class="line"> 启用了命名空间的 getter 和 action 会收到局部化的 getter，dispatch 和 commit</span><br><span class="line"></span><br><span class="line"> 2.6.3  在带命名空间的模块内访问全局内容（Global Assets） </span><br><span class="line"></span><br><span class="line">如果你希望使用全局 state 和 getter，rootState 和 rootGetter 会作为第三和第四参数传入 getter，也会通过 context 对象的属性传入 action。</span><br><span class="line"></span><br><span class="line">若需要在全局命名空间内分发 action 或提交 mutation，将 &#123; root: true &#125; 作为第三参数传给 dispatch 或 commit 即可。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">2.6.4  在带命名空间的模块注册全局 action</span><br><span class="line"></span><br><span class="line"> 在带命名空间的模块注册全局 action，你可添加 root: true，并将这个 action 的定义放在函数 handler 中.</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">modules: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      namespaced: true,</span><br><span class="line">      actions: &#123;</span><br><span class="line">        someAction: &#123;</span><br><span class="line">          root: true,</span><br><span class="line">          handler (namespacedContext, payload) &#123; ... &#125; // -&gt; &#x27;someAction&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2.6.5 带命名空间的绑定函数</p><p>当使用 mapState, mapGetters, mapActions 和 mapMutations 这些函数来绑定带命名空间的模块时,可以将模块的空间名称字符串作为第一个参数传递给map.. 函数，这样所有绑定都会自动将该模块作为上下文.</p><p>通过使用 createNamespacedHelpers 创建基于某个命名空间辅助函数。它返回一个对象，对象里有新的绑定在给定命名空间值上的组件绑定辅助函数</p><p>2.7 插件</p><h5 id="vuex数据持久化"><a href="#vuex数据持久化" class="headerlink" title="vuex数据持久化"></a>vuex数据持久化</h5><ol><li>使用vuex-along插件，解决刷新问题， store数据没有保留问题。 <strong><a href="https://www.npmjs.com/package/vuex-along">vuex-along - 持久化存储 state 的 vuex 扩展</a></strong></li></ol><ol start="2"><li>其他插件 import persistedState from ‘vuex-persistedstate’   ….  plugins: [persistedState()]</li></ol><p><strong>数据清理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">window.clearVuexAlong(local = true, session = true):void;</span><br><span class="line">clearVuexAlong() // localStorage 和 sessionStorage 都会被清理</span><br><span class="line">clearVuexAlong(true,false) // 只清理 localStorage</span><br><span class="line">clearVuexAlong(false,true) // 只清理 sessionStorage</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vuexAlong <span class="keyword">from</span> <span class="string">&#x27;vuex-along&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createVuexAlong <span class="keyword">from</span> <span class="string">&#x27;vuex-along&#x27;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    menu,</span><br><span class="line">    user</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// plugins: [createVuexAlong]</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">createVuexAlong</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="comment">// 设置保存的集合名字，避免同站点下的多项目数据冲突</span></span><br><span class="line">      <span class="attr">local</span>: &#123;</span><br><span class="line">        <span class="attr">list</span>: [ <span class="comment">// 需要监听的属性名或模块名的字符串列表</span></span><br><span class="line">          <span class="string">&#x27;user.currentMenu&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;user.userMsg&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">isFilter</span>: <span class="literal">true</span> <span class="comment">// 过滤 list 中的字段而非保存, 标识除list 以外</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">session</span>: &#123;</span><br><span class="line">        <span class="attr">list</span>: [</span><br><span class="line">        ] <span class="comment">// 保存 sessionStorage</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue/cli</title>
      <link href="/2020/04/12/vue-cli/"/>
      <url>/2020/04/12/vue-cli/</url>
      
        <content type="html"><![CDATA[<p>快速搭建项目</p><ol><li>安装 cli2.0</li></ol><p>前提： node  npm </p><p>npm install webpack -g   //全局安装webpack</p><p>npm install vue-cli -g</p><p>淘宝镜像：</p><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></p><p>使用：</p><p>建立项目之后 vue init webpack 项目名</p><p>进入项目目录（ 有 mode_modules）</p><p>cnpm install  &gt; npm run dev</p><p> 项目结构：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> |-- build                            // 项目构建(webpack)相关代码</span><br><span class="line">|   |-- build.js                     // 生产环境构建代码</span><br><span class="line">|   |-- check-version.js             // 检查node、npm等版本</span><br><span class="line">|   |-- utils.js                     // 构建工具相关</span><br><span class="line">|   |-- vue-loader.conf.js           // webpack loader配置</span><br><span class="line">|   |-- webpack.base.conf.js         // webpack基础配置</span><br><span class="line">|   |-- webpack.dev.conf.js          // webpack开发环境配置,构建开发本地服务器</span><br><span class="line">|   |-- webpack.prod.conf.js         // webpack生产环境配置</span><br><span class="line">|-- config                           // 项目开发环境配置</span><br><span class="line">|   |-- dev.env.js                   // 开发环境变量</span><br><span class="line">|   |-- index.js                     // 项目一些配置变量</span><br><span class="line">|   |-- prod.env.js                  // 生产环境变量</span><br><span class="line">|   |-- test.env.js                  // 测试脚本的配置</span><br><span class="line">|-- src                              // 源码目录</span><br><span class="line">|   |-- components                   // vue所有组件</span><br><span class="line">|   |-- router                       // vue的路由管理</span><br><span class="line">|   |-- App.vue                      // 页面入口文件 （页面级Vue组件）</span><br><span class="line">|   |-- main.js                      // 程序入口文件，加载各种公共组件</span><br><span class="line">|-- static                           // 静态文件，比如一些图片，json数据等</span><br><span class="line">|-- test                             // 测试文件</span><br><span class="line">|   |-- e2e                          // e2e 测试</span><br><span class="line">|   |-- unit                         // 单元测试</span><br><span class="line">|-- .babelrc                         // ES6语法编译配置【转换成ES5】</span><br><span class="line">|-- .editorconfig                    // 定义代码格式【编码、缩进】</span><br><span class="line">|-- .eslintignore                    // eslint检测代码忽略的文件（夹）</span><br><span class="line">|-- .eslintrc.js                     // 定义eslint的plugins,extends,rules</span><br><span class="line">|-- .gitignore                       // git上传需要忽略的文件格式</span><br><span class="line">|-- .postcsssrc                      // postcss配置文件</span><br><span class="line">|-- README.md                        // 项目说明，markdown文档</span><br><span class="line">|-- index.html                       // 访问的页面</span><br><span class="line">|-- package.json                     // 项目基本信息,项目开发包依赖信息等，scripts【npm命令配置】-dependencies【 项目运行时所依赖的模块】-  devDependencies- 【项目开发所依赖的模块】</span><br><span class="line">|-- node_modules                     //依赖的node工具包目录【安装依赖后出现】</span><br></pre></td></tr></table></figure></p><ol start="2"><li>升级到3.0版本<br>卸载 2.0 npm uninstall vue-cli -g</li></ol><p>安装 npm install -g @vue/cli</p><p> .vue.config.js 配置<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"> const webpack = require(&quot;webpack&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: process.env.NODE_ENV === &quot;production&quot; ? &quot;&quot; : &quot;./&quot;, //部署路径(相对路径), 非默认</span><br><span class="line">  // outputDir: &quot;dist&quot;, // 构建文件目录</span><br><span class="line">  assetsDir: &quot;public&quot;, // 构建后静态资源目录(js、css、img、fonts),非默认</span><br><span class="line">  indexPath: &quot;index.html&quot;,</span><br><span class="line">  pages: &#123;</span><br><span class="line">    index: &#123;</span><br><span class="line">      entry: &quot;src/main.js&quot;, // page入口文件</span><br><span class="line">      template: &quot;public/index.html&quot;, // 模板来源</span><br><span class="line">      filename: &quot;index.html&quot;, // 在 dist/index.html 的输出</span><br><span class="line">      title: &quot;XXX系统&quot;, // 当使用 title 选项时，,template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br><span class="line">      chunks: [&quot;chunk-vendors&quot;, &quot;chunk-common&quot;, &quot;index&quot;] // 在这个页面中包含的块，默认情况下会包含,提取出来的通用 chunk 和 vendor chunk</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  lintOnSave: process.env.NODE_ENV !== &quot;production&quot;, // 开发环境下,每次保存lint代码</span><br><span class="line">  productionSourceMap: true, // 生产环境是否生成 sourceMap 文件</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: &quot;0.0.0.0&quot;,</span><br><span class="line">    port: &quot;8080&quot;,</span><br><span class="line">    https: false,</span><br><span class="line">    hotOnly: false,</span><br><span class="line">    open: true, //自动启动浏览器</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      // &quot;&quot;: &#123;</span><br><span class="line">      //   target: &quot;&quot;,</span><br><span class="line">      //   ws: true,</span><br><span class="line">      //   changeOrigin: true</span><br><span class="line">      // &#125;</span><br><span class="line">      &quot;/index.php&quot;: &#123;</span><br><span class="line">        // target: &#x27;http://wholesale.linli580.com.cn&#x27;,</span><br><span class="line">        // target: &#x27;http://wholesale.linli580.com.cn&#x27;,</span><br><span class="line">        // target: &#x27;http://wholesale.linli580.com.cn&#x27;,</span><br><span class="line">        target: &quot;http://apiv2.linli580.com.cn/wholesale&quot;,</span><br><span class="line">        // target: &#x27;http://mall.linli580.com.cn&#x27;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        secure: false</span><br><span class="line">        // pathRewrite: &#123;</span><br><span class="line">        //   &#x27;^/index.php&#x27;: &#x27;&#x27; //需要rewrite重写</span><br><span class="line">        // &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;/api&quot;: &#123;</span><br><span class="line">        // target: &#x27;http://wholesale.linli580.com.cn&#x27;,</span><br><span class="line">        // target: &#x27;http://wholesale.linli580.cn&#x27;,</span><br><span class="line">        target: &quot;http://wholesale.linli580.com.cn&quot;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        secure: false</span><br><span class="line">        // pathRewrite: &#123;</span><br><span class="line">        //   &#x27;^/index.php&#x27;: &#x27;&#x27; //需要rewrite重写</span><br><span class="line">        // &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;/admin&quot;: &#123;</span><br><span class="line">        // target: &#x27;http://wholesale.linli580.com.cn&#x27;,</span><br><span class="line">        target: &quot;http://wholesale.linli580.com.cn&quot;,</span><br><span class="line">        // target: &#x27;http://mall.linli580.com.cn&#x27;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        secure: false</span><br><span class="line">        // pathRewrite: &#123;</span><br><span class="line">        //   &#x27;^/index.php&#x27;: &#x27;&#x27; //需要rewrite重写</span><br><span class="line">        // &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      new webpack.ProvidePlugin(&#123;</span><br><span class="line">        &quot;window.Quill&quot;: &quot;quill/dist/quill.js&quot;,</span><br><span class="line">        Quill: &quot;quill/dist/quill.js&quot;</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    //不进行任何 schema 验证的对象，因此它可以用来传递任何第三方插件选项</span><br><span class="line">  &#125;</span><br><span class="line">  // configureWebpack: config =&gt; &#123;</span><br><span class="line">  //   if (process.env.NODE_ENV === &quot;production&quot;) &#123;</span><br><span class="line">  //     // 生产环境配置</span><br><span class="line">  //     console.log(config);</span><br><span class="line">  //   &#125; else &#123;</span><br><span class="line">  //     // 开发环境配置</span><br><span class="line">  //     console.log(config);</span><br><span class="line">  //   &#125;</span><br><span class="line">  // &#125;</span><br><span class="line">&#125;;</span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>devDependencies与dependencies的区别：</p><p>​    devDependencies里面的插件只用于开发环境，不用于生产环境，即辅助作用，打包的时候需要，打包完成就不需要了。而dependencies是需要发布到生产环境的，自始至终都在</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p><a href="https://www.cnblogs.com/zhangruiqi/p/9062005.html">参考</a></p><p>1.</p><p>1.commander.js  node.js命令行界面的完整解决方案</p><p>未完待续……</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue搭建多页面应用</title>
      <link href="/2020/04/11/vue%E6%90%AD%E5%BB%BA%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8/"/>
      <url>/2020/04/11/vue%E6%90%AD%E5%BB%BA%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>vue搭建多页面应用示例：<br>vue-cli2.0版本：<br><a href="https://github.com/yeminshan/multipage-by-vue-cli2.0">https://github.com/yeminshan/multipage-by-vue-cli2.0</a></p><p>vue-cli3.0版本：<br><a href="https://github.com/yeminshan/multipage_by_vue-cli3.0">https://github.com/yeminshan/multipage_by_vue-cli3.0</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue渲染函数&amp;jsx</title>
      <link href="/2020/04/10/vue%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0-jsx/"/>
      <url>/2020/04/10/vue%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0-jsx/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue渲染函数-amp-jsx"><a href="#Vue渲染函数-amp-jsx" class="headerlink" title="Vue渲染函数 &amp; jsx"></a>Vue渲染函数 &amp; jsx</h1><h2 id="vue关于渲染几个概念理解"><a href="#vue关于渲染几个概念理解" class="headerlink" title="vue关于渲染几个概念理解"></a>vue关于渲染几个概念理解</h2><h3 id="1-节点"><a href="#1-节点" class="headerlink" title="1.节点"></a>1.节点</h3><h3 id="2-树-DOM树"><a href="#2-树-DOM树" class="headerlink" title="2.树[DOM树]"></a>2.树[DOM树]</h3><h3 id="3-虚拟节点Vnode"><a href="#3-虚拟节点Vnode" class="headerlink" title="3.虚拟节点Vnode"></a>3.虚拟节点Vnode</h3><h2 id="渲染函数"><a href="#渲染函数" class="headerlink" title="渲染函数"></a>渲染函数</h2><p>createEleme方法实质是创建节点描述 [createNodeDescription]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @returns &#123;VNode&#125; 虚拟节点</span></span><br><span class="line"><span class="title function_">createElement</span>(</span><br><span class="line">  <span class="comment">// 参数1</span></span><br><span class="line">  <span class="comment">// &#123;String | Object | Function&#125;</span></span><br><span class="line">  <span class="comment">// 一个 HTML 标签字符串，组件选项对象，或者</span></span><br><span class="line">  <span class="comment">// 解析上述任何一种的一个 async 异步函数，必要参数。</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">  <span class="comment">// 参数2</span></span><br><span class="line">  <span class="comment">// &#123;Object&#125;</span></span><br><span class="line">  <span class="comment">// 一个包含模板相关属性的数据对象</span></span><br><span class="line">  <span class="comment">// 这样，您可以在 template 中使用这些属性。可选参数。</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// (详情见下一节)</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 参数3</span></span><br><span class="line">  <span class="comment">// &#123;String | Array&#125;</span></span><br><span class="line">  <span class="comment">// 子节点 (VNodes)，由 `createElement()` 构建而成，</span></span><br><span class="line">  <span class="comment">// 或使用字符串来生成“文本节点”。可选参数。</span></span><br><span class="line">  [</span><br><span class="line">    <span class="string">&#x27;先写一些文字&#x27;</span>,</span><br><span class="line">    <span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;一则头条&#x27;</span>),</span><br><span class="line">    <span class="title function_">createElement</span>(<span class="title class_">MyComponent</span>, &#123;</span><br><span class="line">      <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">someProp</span>: <span class="string">&#x27;foobar&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">) </span><br></pre></td></tr></table></figure><p>数据对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 和`v-bind:class`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或字符串和对象组成的数组</span></span><br><span class="line">  <span class="string">&#x27;class&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 和`v-bind:style`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或对象组成的数组</span></span><br><span class="line">  <span class="attr">style</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="attr">fontSize</span>: <span class="string">&#x27;14px&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 正常的 HTML 特性</span></span><br><span class="line">  <span class="attr">attrs</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 组件 props</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">myProp</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// DOM 属性</span></span><br><span class="line">  <span class="attr">domProps</span>: &#123;</span><br><span class="line">    <span class="attr">innerHTML</span>: <span class="string">&#x27;baz&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件监听器基于 `on`</span></span><br><span class="line">  <span class="comment">// 所以不再支持如 `v-on:keyup.enter` 修饰器</span></span><br><span class="line">  <span class="comment">// 需要手动匹配 keyCode。</span></span><br><span class="line">  <span class="attr">on</span>: &#123;</span><br><span class="line">    <span class="attr">click</span>: <span class="variable language_">this</span>.<span class="property">clickHandler</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 仅对于组件，用于监听原生事件，而不是组件内部使用</span></span><br><span class="line">  <span class="comment">// `vm.$emit` 触发的事件。</span></span><br><span class="line">  <span class="attr">nativeOn</span>: &#123;</span><br><span class="line">    <span class="attr">click</span>: <span class="variable language_">this</span>.<span class="property">nativeClickHandler</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义指令。注意，你无法对 `binding` 中的 `oldValue`</span></span><br><span class="line">  <span class="comment">// 赋值，因为 Vue 已经自动为你进行了同步。</span></span><br><span class="line">  <span class="attr">directives</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;my-custom-directive&#x27;</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">      <span class="attr">expression</span>: <span class="string">&#x27;1 + 1&#x27;</span>,</span><br><span class="line">      <span class="attr">arg</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">      <span class="attr">modifiers</span>: &#123;</span><br><span class="line">        <span class="attr">bar</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 作用域插槽格式</span></span><br><span class="line">  <span class="comment">// &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class="line">  <span class="attr">scopedSlots</span>: &#123;</span><br><span class="line">    <span class="attr">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> <span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>, props.<span class="property">text</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果组件是其他组件的子组件，需为插槽指定名称</span></span><br><span class="line">  <span class="attr">slot</span>: <span class="string">&#x27;name-of-slot&#x27;</span>,</span><br><span class="line">  <span class="comment">// 其他特殊顶层属性</span></span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;myKey&#x27;</span>,</span><br><span class="line">  <span class="attr">ref</span>: <span class="string">&#x27;myRef&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jsx写法"><a href="#jsx写法" class="headerlink" title="jsx写法"></a>jsx写法</h2><p>React发明了JSX，利用HTML语法来创建虚拟DOM。当遇到 “&lt;”，JSX就当HTML解析，遇到 “{“ 就当JavaScript解析。 因此用一般模板写变量用 “{}”,中间是javascript表达式。特别注意render里面的指向问题！在组件里面使用也要带this的。</p><p><a href="https://github.com/vuejs/jsx#installation">JSX 如何映射到 JavaScript</a></p><h3 id="vue如何支持jsx写法"><a href="#vue如何支持jsx写法" class="headerlink" title="vue如何支持jsx写法"></a>vue如何支持jsx写法</h3><p>在Vue 文件中引入 jsx 文件！ 需要配置webpack，令其支持处理jsx文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">// 对src和test文件夹下的.js文件使用babel-loader将es6+的代码转成es5</span></span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line"><span class="attr">loader</span>:<span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line"><span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line"><span class="attr">include</span>: [<span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>), <span class="title function_">resolve</span>(<span class="string">&#x27;test&#x27;</span>), <span class="title function_">resolve</span>(<span class="string">&#x27;node_modules/webpack-dev-server/client&#x27;</span>)],</span><br><span class="line"><span class="attr">use</span>: &#123;</span><br><span class="line">    <span class="attr">loader</span>:<span class="string">&#x27;babel-loader?cacheDirectory=true&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="1-基础使用"><a href="#1-基础使用" class="headerlink" title="1.基础使用"></a>1.基础使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vue.<span class="title function_">component</span>(<span class="string">&#x27;jsxDemo&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>jsxdemo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-v-if-v-else"><a href="#2-v-if-v-else" class="headerlink" title="2.v-if / v-else"></a>2.v-if / v-else</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三元表达式写法</span></span><br><span class="line">vue.<span class="title function_">component</span>(<span class="string">&#x27;jsxDemo&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;a=== 1 ? &#x27;a&#x27; : &#x27;b&#x27;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 复杂的</span></span><br><span class="line">vue.<span class="title function_">component</span>(<span class="string">&#x27;jsxDemo&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> text</span><br><span class="line">    <span class="keyword">if</span> a === <span class="number">1</span> text = a</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> a === <span class="number">2</span> text = b</span><br><span class="line">    <span class="keyword">else</span> text = c</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-v-for-（渲染重复的样式-转化为数组）"><a href="#3-v-for-（渲染重复的样式-转化为数组）" class="headerlink" title="3.v-for （渲染重复的样式,转化为数组）"></a>3.v-for （渲染重复的样式,转化为数组）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vue.<span class="title function_">component</span>(<span class="string">&#x27;jsxDemo&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [a, b, c]</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            this.arr.map(i =&gt; (<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;i&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>))</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-v-model-语法糖-即传值value-事件绑定input监听）"><a href="#4-v-model-语法糖-即传值value-事件绑定input监听）" class="headerlink" title="4.v-model 语法糖(即传值value+事件绑定input监听）)"></a>4.v-model 语法糖(即传值value+事件绑定input监听）)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vue.<span class="title function_">component</span>(<span class="string">&#x27;jsxDemo&#x27;</span>, &#123;</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">input</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">text</span>=e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.text&#125;</span> <span class="attr">onInput</span>=<span class="string">&#123;this.input&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-自定义组件-直接引入使用"><a href="#5-自定义组件-直接引入使用" class="headerlink" title="5.自定义组件 直接引入使用"></a>5.自定义组件 直接引入使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">HelloWolrd</span> <span class="keyword">from</span> <span class="string">&#x27;./HelloWorld&#x27;</span></span><br><span class="line">vue.<span class="title function_">component</span>(<span class="string">&#x27;jsxDemo&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">HelloWolrd</span>/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="6-事件-native-on-事件"><a href="#6-事件-native-on-事件" class="headerlink" title="6.事件 (native)on-事件"></a>6.事件 (native)on-事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vue.<span class="title function_">component</span>(<span class="string">&#x27;jsxDemo&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">onClick</span>=<span class="string">&#123;functionName&#125;</span> <span class="attr">nativeOnClick</span>=<span class="string">&#123;functionName&#125;</span> <span class="attr">on-click</span>=<span class="string">&quot;functionName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-class，-style"><a href="#7-class，-style" class="headerlink" title="7. class， style"></a>7. class， style</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vue.<span class="title function_">component</span>(<span class="string">&#x27;jsxDemo&#x27;</span>, &#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#123;&#123;XX:XX&#125;&#125;</span> <span class="attr">class</span>=<span class="string">&#123;[</span>&quot;<span class="attr">XX1</span>&quot;, &#123;&quot;<span class="attr">XXX3</span>&quot;<span class="attr">:</span> <span class="attr">true</span>&#125;]&#125; <span class="attr">style</span>=<span class="string">&#123;&#123;XXX:</span> <span class="attr">XX</span>&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="8-JSX中的函数式组件"><a href="#8-JSX中的函数式组件" class="headerlink" title="8.JSX中的函数式组件"></a>8.JSX中的函数式组件</h3><p><a href="https://juejin.im/post/5affa64df265da0b93488fdd#heading-9" title="参考资料">jsx函数式组件</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="comment">// context.data就是你在父组件给子组件增加的属性</span></span><br><span class="line"><span class="comment">//  ...省略无关代码</span></span><br><span class="line"> <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">data</span>=<span class="string">&#123;this.data&#125;</span> <span class="attr">class</span>=<span class="string">&quot;large&quot;</span>/&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//Item.vue组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">functional</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;item&quot;</span>,</span><br><span class="line">      <span class="title function_">render</span>(<span class="params">h,context</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span> &#123;<span class="attr">...context.data</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;context.props.data&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="9-slot-之深度复制"><a href="#9-slot-之深度复制" class="headerlink" title="9.slot 之深度复制"></a>9.slot 之深度复制</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">vnodes, createElement</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">cloneVNode</span> (vnode) &#123;</span><br><span class="line">    <span class="keyword">const</span> clonedChildren = vnode.<span class="property">children</span> &amp;&amp; vnode.<span class="property">children</span>.<span class="title function_">map</span>(<span class="function"><span class="params">vnode</span> =&gt;</span> <span class="title function_">cloneVNode</span>(vnode));</span><br><span class="line">    <span class="keyword">const</span> cloned = <span class="title function_">createElement</span>(vnode.<span class="property">tag</span>, vnode.<span class="property">data</span>, clonedChildren);</span><br><span class="line">    cloned.<span class="property">text</span> = vnode.<span class="property">text</span>;</span><br><span class="line">    cloned.<span class="property">isComment</span> = vnode.<span class="property">isComment</span>;</span><br><span class="line">    cloned.<span class="property">componentOptions</span> = vnode.<span class="property">componentOptions</span>;</span><br><span class="line">    cloned.<span class="property">elm</span> = vnode.<span class="property">elm</span>;</span><br><span class="line">    cloned.<span class="property">context</span> = vnode.<span class="property">context</span>;</span><br><span class="line">    cloned.<span class="property">ns</span> = vnode.<span class="property">ns</span>;</span><br><span class="line">    cloned.<span class="property">isStatic</span> = vnode.<span class="property">isStatic</span>;</span><br><span class="line">    cloned.<span class="property">key</span> = vnode.<span class="property">key</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cloned;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clonedVNodes = vnodes.<span class="title function_">map</span>(<span class="function"><span class="params">vnode</span> =&gt;</span> <span class="title function_">cloneVNode</span>(vnode))</span><br><span class="line">  <span class="keyword">return</span> clonedVNodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-作用域插槽"><a href="#10-作用域插槽" class="headerlink" title="10.作用域插槽"></a>10.作用域插槽</h3><p>子组件中通过 {this.$scopedSlots.test({ user: this.user })} 指定插槽的名称是 test，并将 user 传递给父组件。父组件在书写子组件标签的时候，通过 scopedSlots 值指定插入的位置是 test，并在回调函数获取到子组件传入的 user 值<br>注意：作用域插槽是写在子组件标签中的，类似属性。而不是像具名插槽放在标签内部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#123;<span class="comment">/* 具名插槽 作用域插槽 父组件调用时添加scopedSlots属性*/</span>&#125;</span><br><span class="line">  &lt;myComponent &#123;</span><br><span class="line">    ...&#123;</span><br><span class="line">      <span class="attr">scopedSlots</span>: &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="function">(<span class="params">&#123;user&#125;</span>) =&gt;</span> (</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&gt;</span><br><span class="line">  &lt;/myComponent&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;this.$scopedSlots.test(&#123;</span></span><br><span class="line"><span class="language-xml">        user: this.user</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-其他常见指令"><a href="#11-其他常见指令" class="headerlink" title="11.其他常见指令"></a>11.其他常见指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">  &#123;/* 指令 */&#125;</span><br><span class="line">  &#123;/* v-model */&#125;</span><br><span class="line">  &lt;div&gt;&lt;input vModel=&#123;this.newTodoText&#125; /&gt;&lt;/div&gt;</span><br><span class="line">  &#123;/* v-model 以及修饰符 */&#125;</span><br><span class="line">  &lt;div&gt;&lt;input vModel_trim=&#123;this.tirmData&#125; /&gt;&lt;/div&gt;</span><br><span class="line">  &#123;/* v-on 监听事件 */&#125;</span><br><span class="line">  &lt;div&gt;&lt;input vOn:input=&#123;this.inputText&#125; /&gt;&lt;/div&gt;</span><br><span class="line">  &#123;/* v-on 监听事件以及修饰符 */&#125;</span><br><span class="line">  &lt;div&gt;&lt;input vOn:click_stop_prevent=&#123;this.inputText&#125; /&gt;&lt;/div&gt;</span><br><span class="line">  &#123;/* v-html */&#125;</span><br><span class="line">  &lt;p domPropsInnerHTML=&#123;html&#125; /&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后 还是官方文档极度舒适<br><a href="https://github.com/vuejs/jsx#installation">vue/jsx</a></p><h3 id="神奇问题组合"><a href="#神奇问题组合" class="headerlink" title="神奇问题组合"></a>神奇问题组合</h3><p>el-form jsx 使用 model={this.ruleForm} 不生效<br>控制台报错 vue.runtime.esm.js:619 [Vue warn]: Invalid handler for event “input”: got undefined</p><p>原因：jsx源码中没有转换 :model 属性， 所以需要将这个属性使用 prop传入子组建内</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form ref=&quot;form&quot; status-icon props=&#123;&#123;this.form&#125;&#125;&gt;&lt;/el-form&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> jsx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> jsx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zeplin使用</title>
      <link href="/2020/04/08/zeplin%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/04/08/zeplin%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>使用步骤：</p><ol><li>安装zeplin 和ps插件</li><li>打卡psd 图片，将图层转成画板，打开ps zeplin 插件可见 export seleted aborad to zeplin，确认，选择导出项目（command + E）</li><li>要切的图标切片 </li><li>导出</li></ol><p><a href="https://ms-yip.github.io/2023/02/01/常用链接备份/">https://ms-yip.github.io/2023/02/01/常用链接备份/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式</title>
      <link href="/2020/04/06/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/04/06/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前端常见的设计模式主要有以下几种："><a href="#前端常见的设计模式主要有以下几种：" class="headerlink" title="前端常见的设计模式主要有以下几种："></a>前端常见的设计模式主要有以下几种：</h2><ol><li>单例模式</li><li>工厂模式</li><li>策略模式</li><li>代理模式</li><li>观察者模式</li><li>模块模式</li><li>构造函数模式</li><li>混合模式</li></ol><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>定义：是保证一个类只有一个实例，并且提供一个访问它的全局访问点。<br>适用于： 一些对象只需要一个，比如线程池、全局缓存、浏览器中的window对象、登录浮窗等。<br>用一个变量标识当前是否已经为某个类创建过对象，如果是，则在下一次获取这个类的实例时，直接返回之前创建的对象。</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>定义：对象间的一种一对多的依赖关系。</p><p>也叫发布订阅模式，当一个对象的状态发生变化时，所有依赖于他的对象都将得到通知。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>重温OOP</title>
      <link href="/2020/04/06/%E9%87%8D%E6%B8%A9OOP/"/>
      <url>/2020/04/06/%E9%87%8D%E6%B8%A9OOP/</url>
      
        <content type="html"><![CDATA[<h2 id="OOA"><a href="#OOA" class="headerlink" title="OOA"></a>OOA</h2><p>Object-Oriented Analysis （面向对象分析）</p><p>只是对需求中描述的问题，进行模块化的处理，描述问题的本质，区别每个问题的不同点相同点，确定问题中的对象。</p><h2 id="OOD"><a href="#OOD" class="headerlink" title="OOD"></a>OOD</h2><p>是管理程序内部各部分的相互依赖。为了达到这个目标，OOD要求将程序分成块，每个块的规模应该小到可以管理的程度，然后分别将各个块隐藏在接口（interface）的后面，只通过接口相互交流。</p><h2 id="什么叫OOP"><a href="#什么叫OOP" class="headerlink" title="什么叫OOP"></a>什么叫OOP</h2><p>Object Oriented Programming （面向对象的编程）</p><p>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护 .</p><p>缺点：性能比面向过程差</p><h2 id="面向对象的三大特性："><a href="#面向对象的三大特性：" class="headerlink" title="面向对象的三大特性："></a>面向对象的三大特性：</h2><ol><li>封装<br>隐藏对象的属性和实现细节，仅对外提供公共访问方式，将变化隔离，便于使用，提高复用性和安全性。</li><li>继承<br>提高代码复用性；继承是多态的前提。子类继承父类的所有属性和行为。</li><li>多态<br>父类或接口定义的引用变量可以指向子类或具体实现类的实例对象。提高了程序的拓展性。</li></ol><h2 id="五大基本原则："><a href="#五大基本原则：" class="headerlink" title="五大基本原则："></a>五大基本原则：</h2><ol><li><p>单一职责原则SRP(Single Responsibility Principle)<br>类的功能要单一，不能包罗万象，跟杂货铺似的。</p></li><li><p>开放封闭原则OCP(Open－Close Principle)<br>一个模块对于拓展是开放的，对于修改是封闭的，想要增加功能热烈欢迎，想要修改，哼，一万个不乐意。</p></li><li><p>里式替换原则LSP(the Liskov Substitution Principle LSP)<br>子类可以替换父类出现在父类能够出现的任何地方。比如你能代表你爸去你姥姥家干活。哈哈~~</p></li><li><p>依赖倒置原则DIP(the Dependency Inversion Principle DIP)<br>高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。抽象不应该依赖于具体实现，具体实现应该依赖于抽象。就是你出国要说你是中国人，而不能说你是哪个村子的。比如说中国人是抽象的，下面有具体的xx省，xx市，xx县。你要依赖的是抽象的中国人，而不是你是xx村的。</p></li><li><p>接口分离原则ISP(the Interface Segregation Principle ISP)<br>设计时采用多个与特定客户类有关的接口比采用一个通用的接口要好。就比如一个手机拥有打电话，看视频，玩游戏等功能，把这几个功能拆分成不同的接口，比在一个接口里要好的多。</p></li></ol><h2 id="代码抽象化三大原则"><a href="#代码抽象化三大原则" class="headerlink" title="代码抽象化三大原则"></a>代码抽象化三大原则</h2><ol><li>DRY 原则<br>DRY，是 Don’t repeat yourself 的缩写，中文为：不要重复自己。</li></ol><p>软件工程名著《The Pragmatic Programmer》首先提出了这个原则。</p><p>DRY 原则：系统的每一个功能都应该有唯一的实现。</p><ol start="2"><li>YAGNI 原则<br>YAGNI，是 You aren’t gonna need it 的缩写，中文为：你不会需要它的。<br>这是”极限编程”提倡的原则。</li></ol><p>YAGNI 原则：你自以为有用的功能，实际上都是用不到的，保持最核心的功能即可。</p><ol start="3"><li>Rule Of Three 原则<br>Rule Of Three 原则，又称“三次原则”。<br>实际上 DRY 原则和 YAGNI 原则是有些矛盾的，前者讲究“抽象化”，后者推崇“快和省”。<br>因此才出现了 Rule Of Three 原则（三次原则）</li></ol><p>Rule Of Three 原则：<br>1、当某个功能只出现 1 ~ 2 次时，就不需要做抽象化了，费时费力。</p><p>2、当某个功能出现 3 次及以上时，再进行抽象化，封装下写成通用的方法。</p><h2 id="谈谈耦合"><a href="#谈谈耦合" class="headerlink" title="谈谈耦合"></a>谈谈耦合</h2><h3 id="耦合分类"><a href="#耦合分类" class="headerlink" title="耦合分类"></a>耦合分类</h3><p>耦合按从强到弱的顺序可分为以下几种类型：</p><p>非直接耦合：两模块间没有直接关系，之间的联系完全是通过主模块的控制和调用来实现的<br>数据耦合：指两个模块之间有调用关系，传递的是简单的数据值，相当于高级语言的值传递<br>标记耦合：指两个模块之间传递的是数据结构，如高级语言中的数组名、记录名、文件名等这些名字即标记，其实传递的是这个数据结构的地址<br>控制耦合：一指一个模块调用另一个模块时，传递的是控制变量（如开关、标志等），被调模块通过该控制变量的值有选择地执行块内某一功能<br>外部耦合：一组模块都访问 同一全局简单变量 而不是同一全局数据结构，而且不是通过参数传递该全局变量的信息<br>公共耦合：一组模块都访问 同一个公共数据环境。该公共数据环境可以是全局数据结构、共享的通信区、内存的公共覆盖区等。<br>内容耦合：这是最高程度的耦合，也是最差的耦合。当一个模块直接使用另一个模块的内部数据，或通过非正常入口而转入另一个模块内部。</p><h3 id="如何降低耦合（解耦合）"><a href="#如何降低耦合（解耦合）" class="headerlink" title="如何降低耦合（解耦合）"></a>如何降低耦合（解耦合）</h3><ol><li>【少使用类的继承】，多用接口隐藏实现的细节。 Java面向对象编程引入接口除了支持多态外， 隐藏实现细节也是其中一个目的。</li><li>模块的【功能化分尽可能的单一】，道理也很简单，功能单一的模块供其它模块调用的机会就少。（其实这是高内聚的一种说法，高内聚低耦合一般同时出现，为了限制篇幅，我们将在以后的版期中讨论）。<br>遵循一个定义只在一个地方出现。</li><li>少使用全局变量。</li><li>类属性和方法的声明少用public，多用private关键字，</li><li>多用设计模式，比如采用MVC的设计模式就可以降低界面与业务逻辑的耦合度。</li><li>尽量不用“硬编码”的方式写程序，同时也尽量避免直接用SQL语句操作数据库。</li><li>最后当然就是避免直接操作或调用其它模块或类（内容耦合）；如果模块间必须存在耦合，原则上尽量使用数据耦合，少用控制耦合，</li><li>限制公共耦合的范围，避免使用内容耦合。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react初尝</title>
      <link href="/2020/04/05/react%E5%88%9D%E5%B0%9D/"/>
      <url>/2020/04/05/react%E5%88%9D%E5%B0%9D/</url>
      
        <content type="html"><![CDATA[<ol><li>子组件修改状态，通过父组件传入一个函数，子组件需要的时候调传入的函数，区别于vue 是双向数据绑定，react 是单向数据绑定，所有的操作其实是父组件比较关心</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Router</title>
      <link href="/2020/03/29/Vue-Router/"/>
      <url>/2020/03/29/Vue-Router/</url>
      
        <content type="html"><![CDATA[<p>路由管理器。<br>组件映射到路由，告诉路由在哪里渲染这些组件。</p><h2 id="安装-amp-引入"><a href="#安装-amp-引入" class="headerlink" title="安装&amp;引入"></a>安装&amp;引入</h2><pre><code>// ①下载引入&lt;script src=&quot;/path/vue-router.js&quot;&gt;&lt;/script&gt;// ②npm 安装引入使用npm install vue-router (--save)//router/index.js 添加import Vue from &apos;vue&apos;import VueRouter from &apos;vue-router&apos;Vue.use(VueRouter)   // 全局使用Router，安装</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--用于导航的组件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--to 的值是index文件配置的path--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;router-link :to=&quot;...&quot;&gt; === $router.push(...)  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/foo&quot;</span>&gt;</span>Go to Foo <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>﻿​</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/Bar&quot;</span>&gt;</span>Go to Bar <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--模块将在下面渲染--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.要先定义组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Foo</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;foo&lt;/div&gt;&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Bar</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;bar&lt;/div&gt;&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.定义路由</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Foo</span> ，</span><br><span class="line">  children：[&#123;  <span class="comment">//子路由</span></span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">component</span>:<span class="variable constant_">XXX</span>;</span><br><span class="line">  &#125;]&#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Bar</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 导出router 实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    ...whiteList,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Main</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">hasAddDynamicMenuRoutes</span>: <span class="literal">false</span> <span class="comment">// 是否动态添加路由</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出router 实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    ...whiteList,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Main</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">hasAddDynamicMenuRoutes</span>: <span class="literal">false</span> <span class="comment">// 是否动态添加路由</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入路由router 到vue实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router   <span class="comment">//把router里的参数导出</span></span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="路由传参数"><a href="#路由传参数" class="headerlink" title="路由传参数"></a>路由传参数</h3><ol><li>name<br>index(routes)配置时添加name属性。</li></ol><p>模板中使用 $router.name的形式接受（对象形式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt; &#123;&#123;$route.name&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>router-link to属性 传参 （要设置那么属性，对象形式） 这里的name要与路由表对应页面配置的一致</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:xxx,params:&#123;key:value&#125;&#125;&quot;</span>&gt;</span>valueString<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收</span></span><br><span class="line">&#123;&#123;$route.<span class="property">params</span>.<span class="property">key</span>&#125;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>vue-router利用url传递参数<br>在配置文件已冒号的形式传递参数，导航是不需要冒号</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/params/:newsId/:newsTitle&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Params</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  正则表达式在url传递的应用</span></span><br><span class="line">&#123;<span class="attr">path</span>:<span class="string">&#x27;/params/:newsId(\\d+)/:newsTitle&#x27;</span>,&#125;</span><br><span class="line"><span class="comment">// 接收： </span></span><br><span class="line">&lt;p&gt;新闻标题: &#123;&#123;$route.<span class="property">params</span>.<span class="property">newsId</span>&#125;&#125;&lt;/p&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/params/198/jspang website is very good&quot;</span>&gt;</span>params<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>4.路由传参<br>{ path: ‘page/:id’, props: true, component: page }<br>{ path: ‘page/:id’, props: {‘newId’: ‘11’}, component: page }<br>// 注意 要在路由上设置 props：true,组件可接收params，否则只能从$route里面拿<br>export default {<br>  props: [‘id’]<br>}</p><h2 id="命名视图（单页面多路由）"><a href="#命名视图（单页面多路由）" class="headerlink" title="命名视图（单页面多路由）"></a>命名视图（单页面多路由）</h2><p>一个页面展示多个 router-view 命名那么属性，不设置默认default</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> &gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float:left;width:50%;height:300px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float:right;width:50%;height:300px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>:<span class="title class_">Hello</span>,</span><br><span class="line">        <span class="attr">left</span>:<span class="title class_">Hi1</span>,</span><br><span class="line">        <span class="attr">right</span>:<span class="title class_">Hi2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="redirect-重定向"><a href="#redirect-重定向" class="headerlink" title="redirect 重定向"></a>redirect 重定向</h2><p>// 转发和重定向<br>// 转发是服务器行为，服务器在内部完成请求处理和转发动作。<br>// 服务器传递的是容器内的request，传输的信息不回丢失<br>// 重定向是浏览器行,重定向可以访问自己web应用以外的资源，重定向过程中传输的信息会丢失！！<br>// 有数据请求转发，没有重定向<br>路径不一致,但是打开的是同一个组件</p><ol><li><p>只需将component换成redirect参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Hello</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/params/:newsId(\\d+)/:newsTitle&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="title class_">Params</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/goParams/:newsId(\\d+)/:newsTitle&#x27;</span>,</span><br><span class="line">      <span class="attr">redirect</span>:<span class="string">&#x27;/params/:newsId(\\d+)/:newsTitle&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>起别名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/hi1&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Hi1</span>,</span><br><span class="line">    <span class="attr">alias</span>:<span class="string">&#x27;/jspang&#x27;</span>   <span class="comment">// 别名不能为path的字段（重复）</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// 跳转直接写别名</span></span><br><span class="line">&lt;router-link to=<span class="string">&quot;/jspang&quot;</span>&gt;jspang&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="路由的过度动画"><a href="#路由的过度动画" class="headerlink" title="路由的过度动画"></a>路由的过度动画</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">想在路由跳转的时候有过渡动画,在&lt;router-view&gt;标签外添加&lt;transition&gt;标签,并给它一个name属性</span><br><span class="line"></span><br><span class="line">这样组件过渡过程中就有四个类名进行切换.他们分别是</span><br><span class="line"></span><br><span class="line">[name]-enter                                   进入过渡开始状态</span><br><span class="line"></span><br><span class="line">[name]-enter-active                       进入过渡结束状态</span><br><span class="line"></span><br><span class="line">[name]-leave                                   离开过渡开始状态</span><br><span class="line"></span><br><span class="line">[name]-leave-active                       离开过渡结束状态</span><br><span class="line"></span><br><span class="line">过渡模式  mode in-out</span><br><span class="line"></span><br><span class="line">过渡模式的mode：</span><br><span class="line">in-out:新元素先进入过渡，完成之后当前元素过渡离开。</span><br><span class="line">out-in:当前元素先进行过渡离开，离开完成后新元素过渡进入。</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>路由配置的mode</p><p>export default new Router({<br>    mode:’history’||’hash’,//history 如正常的path,hash增加了#/等无意义的字符排列<br>  routes: [<br>    {<br>      path: ‘/‘,<br>      component: Hello<br>    },{<br>      path:’/params/:newsId(\d+)/:newsTitle’,<br>      component:Params<br>    },{<br>      path:’/goParams/:newsId(\d+)/:newsTitle’,<br>      redirect:’/params/:newsId(\d+)/:newsTitle’<br>    }]<br>})<br>404 页面的设置:<br>{<br>   path:’*’,<br>   component:Error //404页面<br>}</p><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>页面内部有导航复用<br>声明路由时，children里面声明数组即可</p><p>注意子路由的占位</p><h2 id="路由中的钩子"><a href="#路由中的钩子" class="headerlink" title="路由中的钩子"></a>路由中的钩子</h2><ol><li>路由配置文件中的钩子函数</li></ol><p>只有beforeEnter<br>{<br>      path:’/params/:newsId(\d+)/:newsTitle’,<br>      component:Params,<br>      beforeEnter:(to,from,next)=&gt;{<br>        console.log(‘我进入了params模板’);<br>        console.log(to);// to||form是一个对象,是一个路径信息<br>        console.log(from);<br>        next();//路由的控制参数,常用 next(true[跳转]||false[不跳转])||next({path:’/‘})<br>},</p><ol start="2"><li>模板中的钩子函数</li></ol><p>这样可以监控到路由进入和路由的离开<br>export default {<br>  name: ‘params’,<br>  data () {<br>    return {<br>      msg: ‘params page’<br>    }<br>  },<br>  beforeRouteEnter:(to,from,next)=&gt;{<br>    console.log(“准备进入路由模板”);<br>    next();<br>  },<br>  beforeRouterUpdate(to, from, next) =&gt; {<br>  // 组件实例会被复用时调用<br>  }<br>  beforeRouteLeave: (to, from, next) =&gt; {<br>    console.log(“准备离开路由模板”);<br>    next();<br>  }<br>}</p><p>1.导航被触发<br>2.调用全局的beforeEach守卫<br>3.在重用的组件里调用beforeRouterUpdate守卫<br>4.在路由配置里调用beforeEnter<br>5.在被激活的组件里嗲用beforeRouterEnter<br>6.调用全局的beforeResolve 守卫<br>7.导航被确认<br>8.调用全局的afterEach钩子<br>9.触发DOM更新</p><h2 id="编程式的导航"><a href="#编程式的导航" class="headerlink" title="编程式的导航"></a>编程式的导航</h2><p>// 编程式的导航<br>调用 this.$router.push(‘/xxxx’)<br>？？ this.$router.repalce<br>// 注意： 使用path，params不生效<br>// query 带查询参数 即 =&gt; ？…<br>router.push({name:’user’,params:{userId: 123}})<br>router.push({path: ‘register’, query: { plan:’private’}})<br>router.push({ path: <code>/user/$&#123;userId&#125;</code> }) // -&gt; /user/123</p><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>异步组件<br>什么是懒加载：</p><p>原理：先将img标签中的src链接设为同一张图片（空白图片 或者为空），将其真正的图片地址存储再img标签的自定义属性中（比如data-src）。当js监听到该图片元素进入可视窗口时，即将自定义属性中的地址存储到src属性中，达到懒加载的效果。<br>这样做能防止页面一次性向服务器响应大量请求导致服务器响应慢，页面卡顿或崩溃等问题。</p><p>{path: ‘home’, component: ()=&gt; import(‘./components/Login’)}</p><h1 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h1><ol><li><p>重复跳转报错问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalPush = <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span></span><br><span class="line"><span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> <span class="title function_">push</span> (location) &#123;</span><br><span class="line">  <span class="keyword">return</span> originalPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> originalReplace = <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">replace</span></span><br><span class="line"><span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">replace</span> = <span class="keyword">function</span> <span class="title function_">replace</span> (location) &#123;</span><br><span class="line">  <span class="keyword">return</span> originalReplace.<span class="title function_">call</span>(<span class="variable language_">this</span>, location).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>动态数据加载引入组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const asyncComponentHook = (url) =&gt; () =&gt; &#123;</span><br><span class="line">  return import(`../views/modules$&#123;url&#125;.vue`).catch((e) =&gt; &#123;</span><br><span class="line">    return import(&#x27;@/views/common/404.vue&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 工厂函数执行 resolve 回调</span><br><span class="line">Vue.component(&#x27;async-webpack-example&#x27;, function (resolve) &#123;</span><br><span class="line">  // 这个特殊的 `require` 语法将会告诉 webpack</span><br><span class="line">  // 自动将你的构建代码切割成多个包, 这些包</span><br><span class="line">  // 会通过 Ajax 请求加载</span><br><span class="line">  require([&#x27;./my-async-component&#x27;], resolve)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 工厂函数返回 Promise</span><br><span class="line">Vue.component(</span><br><span class="line">  &#x27;async-webpack-example&#x27;,</span><br><span class="line">  // 这个 `import` 函数会返回一个 `Promise` 对象。</span><br><span class="line">  () =&gt; import(&#x27;./my-async-component&#x27;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 工厂函数返回一个配置化组件对象</span><br><span class="line">const AsyncComponent = () =&gt; (&#123;</span><br><span class="line">  // 需要加载的组件 (应该是一个 `Promise` 对象)</span><br><span class="line">  component: import(&#x27;./MyComponent.vue&#x27;),</span><br><span class="line">  // 异步组件加载时使用的组件</span><br><span class="line">  loading: LoadingComponent,</span><br><span class="line">  // 加载失败时使用的组件</span><br><span class="line">  error: ErrorComponent,</span><br><span class="line">  // 展示加载时组件的延时时间。默认值是 200 (毫秒)</span><br><span class="line">  delay: 200,</span><br><span class="line">  // 如果提供了超时时间且组件加载也超时了，</span><br><span class="line">  // 则使用加载失败时使用的组件。默认值是：`Infinity`</span><br><span class="line">  timeout: 3000</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>动态添加路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addRoute</span>(<span class="attr">route</span>: <span class="title class_">RouteConfig</span>): <span class="function">() =&gt;</span> <span class="keyword">void</span></span><br><span class="line"><span class="title function_">addRoute</span>(<span class="attr">parentName</span>: string, <span class="attr">route</span>: <span class="title class_">RouteConfig</span>): <span class="function">() =&gt;</span> <span class="keyword">void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// params1 路由name</span></span><br><span class="line"><span class="comment">// params2 单个路由信息</span></span><br><span class="line">router.<span class="title function_">addRoute</span>(<span class="string">&#x27;main&#x27;</span>, route)</span><br></pre></td></tr></table></figure></li></ol><h1 id="skill"><a href="#skill" class="headerlink" title="skill"></a>skill</h1><ol><li>未避免路由复用相同组件，可在router-view 添加key 属性</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> Vue-Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序入门</title>
      <link href="/2020/03/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8/"/>
      <url>/2020/03/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>特点：</p><ol><li>小程序封装的比较好且简单。（1.支付  2.云开发）</li><li>跨端开发 （支付宝小程序、头条、百度小程序、taro React uni-app Vue）</li></ol><h2 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h2><p>项目结构：<br>app.json   小程序的全局配置<br>app.js   入应用口</p><p>注意：wxss 尺寸加了rpx ，注意实际的应用哦</p><p>APP函数 程序注册，调用注册小程序实例，绑定生命周期回调函数、错误监听和页面不存在监听函数等，App 实例，是全部页面共享的。参数<object><br>Page函数 页面注册,小程序每个页面都需要注册。指定页面的初始数据、生命周期回调、事件处理函数参数<object>behaviors = vue-mixins<br>Component函数构造复杂页面，区别于page方法是函数放在methods里面<br>getApp方法，获取全局唯一的 App 实例<br>getCurrentPages方法，获取 当前页面栈</p><h2 id="微信的路由方法："><a href="#微信的路由方法：" class="headerlink" title="微信的路由方法："></a>微信的路由方法：</h2><pre><code>wx.navigateTo 跳转新页面wx.redirectTo  重定向wx.navigateBack 返回wx.switchTab  切换页面wx.reLaunch 重启动</code></pre><p>组件方式：<br>    <navigator open-type="XXX"/></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>  冒泡事件：bind<br>  非冒泡事件：catch<br>  互斥事件（一个节点只执行一个这样的事件）：mut-bind</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue项目mock数据方案</title>
      <link href="/2020/03/24/vue%E9%A1%B9%E7%9B%AEmock%E6%95%B0%E6%8D%AE%E6%96%B9%E6%A1%88/"/>
      <url>/2020/03/24/vue%E9%A1%B9%E7%9B%AEmock%E6%95%B0%E6%8D%AE%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Webpack-mock数据"><a href="#Webpack-mock数据" class="headerlink" title="Webpack mock数据"></a>Webpack mock数据</h1><p>原理：<br>webpack devserver中有一个设置可用来模拟接口返回数据：</p><pre><code>devServer.beforefunctionProvides the ability to execute custom middleware prior to all other middleware internally within the server. This could be used to define custom handlers, for example:before(app)&#123;  app.get(&apos;/some/path&apos;, function(req, res) &#123;    res.json(&#123; custom: &apos;response&apos; &#125;);  &#125;);&#125;</code></pre><p>使用webpack devserver before实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下设置只针对开发环境，因此可在webpack.dev.config.js 设置(vuecli2.0+)</span></span><br><span class="line"><span class="comment">// 原理是devserver 运行的小型服务中间件设置路由</span></span><br><span class="line"></span><br><span class="line">devServer.<span class="title function_">before</span>(<span class="params">app, server, compiler</span>) &#123;</span><br><span class="line">  <span class="comment">// app.use(cors()) // 其他的中间件</span></span><br><span class="line">  app.<span class="title function_">get</span>(<span class="string">&#x27;/jiankong/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">                  res.<span class="title function_">json</span>(<span class="string">&quot;XXXXX&quot;</span>)</span><br><span class="line">                &#125;),</span><br><span class="line">  app.<span class="title function_">post</span>(<span class="string">&#x27;/chaxun/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">                  res.<span class="title function_">json</span>(<span class="string">&quot;XXXXX&quot;</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 真实案例</span><br><span class="line">before (app) &#123;</span><br><span class="line">app.get(&#x27;/api/vue/queue/getQueueDetail&#x27;, (req, res) =&gt; &#123; res.json(&#123;code: &#x27;100&#x27;&#125;) &#125;)</span><br><span class="line">app.post(&#x27;/api/vue/queue/window/info&#x27;, (req, res) =&gt; &#123; res.json(&quot;/api/vue/queue/window/info&quot;) &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>评价：这个比较麻烦，因为每一次添加mock规则都要重新跑一次webpack-dev-server</p><h1 id="mockjs"><a href="#mockjs" class="headerlink" title="mockjs"></a>mockjs</h1><h4 id="1-项目使用插件拦截返回Mock数据"><a href="#1-项目使用插件拦截返回Mock数据" class="headerlink" title="1. 项目使用插件拦截返回Mock数据"></a>1. 项目使用插件拦截返回Mock数据</h4><p>1.安装mockjs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mockjs --save-dev</span><br></pre></td></tr></table></figure><p>2.引入mock规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可在在main.js引入，在vue搭建的多页面项目中，千万要注意，入口文件可能不叫main.js，不要犯糊涂了！（在这里被坑了哭）</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Mock</span> = <span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>mock.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入mockjs</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Mock</span> = <span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mockDate = &#123;</span><br><span class="line">        <span class="attr">articles</span>: <span class="string">&#x27;XXXXX&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// Mock.mock( url, methods [ /post|get/i | post | get] , 返回的mob数据)；// /post|get/i 匹配post和get模式 也可以用&#x27;post&#x27;或&#x27;get&#x27;</span></span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;/api&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, mockDate);</span><br></pre></td></tr></table></figure></li></ol><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>Mock.mock( rurl?, rtype?, template|function( options ) )</td><td></td></tr><tr><td>Mock.mock( template )</td><td>根据数据模板生成模拟数据。</td></tr><tr><td>Mock.mock( rurl, template )</td><td>记录数据模板。当拦截到匹配 <code>rurl</code> 的 Ajax 请求时，将根据数据模板 <code>template</code> 生成模拟数据，并作为响应数据返回。</td></tr><tr><td>Mock.mock( rurl, function( options ) )</td><td>记录用于生成响应数据的函数。当拦截到匹配 <code>rurl</code> 的 Ajax 请求时，函数 <code>function(options)</code> 将被执行，并把执行结果作为响应数据返回。</td></tr><tr><td>Mock.mock( rurl, rtype, template )</td><td>记录数据模板。当拦截到匹配 <code>rurl</code> 和 <code>rtype</code> 的 Ajax 请求时，将根据数据模板 <code>template</code> 生成模拟数据，并作为响应数据返回</td></tr><tr><td>Mock.mock( rurl, rtype, function( options ) )</td><td>记录用于生成响应数据的函数。当拦截到匹配 <code>rurl</code> 和 <code>rtype</code> 的 Ajax 请求时，函数 <code>function(options)</code> 将被执行，并把执行结果作为响应数据返回。</td></tr></tbody></table><ol start="4"><li>将mock.js 引入main.js</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(url); // Eg: url = &quot;../src/mock/mock&quot;</span><br></pre></td></tr></table></figure><ol start="5"><li>请求接口</li></ol><p><strong>注意：这里的url必须和mock设置的url一致。</strong></p><p>如：Mock.mock(‘<a href="http://10.1.1.11/8081/list&#39;)，那么请求的url必须是http://10.1.1.11/8081/list。">http://10.1.1.11/8081/list&#39;)，那么请求的url必须是http://10.1.1.11/8081/list。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.get(url)</span><br><span class="line">.then(function (res) &#123;</span><br><span class="line">   console.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function (err) &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>评价 ：此方法的被拦截接口不能在network中体现出来</strong></p><h4 id="2-node开启服务，使用mock生产数据"><a href="#2-node开启服务，使用mock生产数据" class="headerlink" title="2. node开启服务，使用mock生产数据"></a>2. node开启服务，使用mock生产数据</h4><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">let express = require(&#x27;express&#x27;); // 引入express</span><br><span class="line">let Mock = require(&#x27;mockjs&#x27;); // 引入mock</span><br><span class="line">const cors = require(&#x27;cors&#x27;); // 允许跨域</span><br><span class="line">const list = require(&#x27;./list&#x27;); // 接口返回的数据</span><br><span class="line"></span><br><span class="line">let app = express(); //实例化express</span><br><span class="line"></span><br><span class="line">// 允许跨域</span><br><span class="line">app.use(function (req, res, next) &#123;</span><br><span class="line">  res.header(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span><br><span class="line">  res.header(&#x27;Access-Control-Allow-Methods&#x27;, &#x27;PUT, GET, POST, DELETE, OPTIONS&#x27;);</span><br><span class="line">  res.header(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;X-Requested-With&#x27;);</span><br><span class="line">  res.header(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;Content-Type&#x27;);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line">app.use(cors());</span><br><span class="line"></span><br><span class="line">app.use(&#x27;/api/api1&#x27;, function (req, res) &#123;</span><br><span class="line">  res.json(list.jiankong);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(&#x27;/api/api2&#x27;, function (req, res) &#123;</span><br><span class="line">  res.json(</span><br><span class="line">    Mock.mock(&#123;</span><br><span class="line">      status: 200,</span><br><span class="line">      &#x27;dataSource|1-9&#x27;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &#x27;key|+1&#x27;: 1,</span><br><span class="line">          &#x27;mockTitle|1&#x27;: [&#x27;肆无忌惮&#x27;],</span><br><span class="line">          &#x27;mockContent|1&#x27;: [</span><br><span class="line">            &#x27;角色精湛主题略荒诞&#x27;,</span><br><span class="line">            &#x27;理由太短 是让人不安&#x27;,</span><br><span class="line">            &#x27;疑信参半 却无比期盼&#x27;,</span><br><span class="line">            &#x27;你的惯犯 圆满&#x27;,</span><br><span class="line">            &#x27;别让纠缠 显得 孤单&#x27;,</span><br><span class="line">          ],</span><br><span class="line">          &#x27;mockAction|1&#x27;: [&#x27;下载&#x27;, &#x27;试听&#x27;, &#x27;喜欢&#x27;],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(&#x27;9033&#x27;, () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;监听端口 9033&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>评价：任何改动都需要重启服务</strong></p><h1 id="API统一管理平台-mock"><a href="#API统一管理平台-mock" class="headerlink" title="API统一管理平台- mock"></a>API统一管理平台- mock</h1><p>详情请参考：YApi ： <a href="https://zhuanlan.zhihu.com/p/79046814">https://zhuanlan.zhihu.com/p/79046814</a></p><p>类似工具还有 ：</p><ul><li><p>Apifox：<a href="https://www.apifox.cn/">https://www.apifox.cn/</a></p></li><li><p>easy Mock ：<a href="https://mock.presstime.cn/login">https://mock.presstime.cn/login</a></p></li></ul><h2 id="利用Swagger-mock数据"><a href="#利用Swagger-mock数据" class="headerlink" title="利用Swagger mock数据"></a>利用Swagger mock数据</h2><p>原理：Swagger UI地址的Network，发现有个api-docs文件，解析接口，并在本地生成对应的mock数据源。再结合使用node开启服务提高接口的mock功能。</p><p>实现：</p><p>请参考：<a href="https://juejin.cn/post/6844903623776796680">利用swagger文档同步本地mock</a></p><p>参考源码地址：<a href="https://github.com/zzf03680147/synchronizeSwagger">https://github.com/zzf03680147/synchronizeSwagger</a></p><h2 id="node部署使用swagger"><a href="#node部署使用swagger" class="headerlink" title="node部署使用swagger"></a><a href="https://eminoda.github.io/2019/08/06/swagger-use-in-frontend/">node部署使用swagger</a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>提高网页加载速度</title>
      <link href="/2020/03/21/%E6%8F%90%E9%AB%98%E7%BD%91%E9%A1%B5%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6/"/>
      <url>/2020/03/21/%E6%8F%90%E9%AB%98%E7%BD%91%E9%A1%B5%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<ol><li>尽可能的减少HTTP的请求</li></ol><p>将同类资源合并成一个文件如图片 css文件</p><ol start="2"><li><p>使用CDN（内容分发： 在各地部署副本服务器）</p></li><li><p>添加 expire /cache-Control控制缓存机制</p></li></ol><p>服务器发送应答的时候添加了一个时间值，本机根据时间值判断是否过期而发送http请求</p><ol start="4"><li>启用Gzip 压缩</li></ol><p>文本内容 进行文本压缩 html php js css xml txt，减少传输大小</p><ol start="5"><li>将css 文件放在页面最上面</li></ol><p>解决禁止页面的显示 ，重画（闪烁问题）</p><ol start="6"><li>将Script文件放在文件最下面</li></ol><p>html 加载的顺序： html-head-meta-title-style-link- script-body-div-img-页面加载完毕</p><ol start="7"><li><p>避免css中使用Expressions（避免在css中加入js代码）</p></li><li><p>把js、css放在外部文件中</p></li><li><p>减小DNS查询 （缓存，单域还是多域）</p></li><li><p>压缩js、css （减少文件体积、空格、格式符、注释，简写方法名、参数名）</p></li><li><p>避免重定向 【301（永久重定向）移动到另外的位置 302找到了不在原始地址（暂时重定向）】</p></li><li><p>移除重复的脚本</p></li><li><p>配置实体标签【对比有没有修改，没有修改就用缓存】</p></li><li><p>使用Ajax请求（异步的js和xml）分批加载和局部更新</p></li></ol><p>插件Yslow 使用火狐支持最好  基于firebug</p><p>对网站分析 给建议、规则 -&gt; 优化</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SEO</title>
      <link href="/2020/03/21/SEO/"/>
      <url>/2020/03/21/SEO/</url>
      
        <content type="html"><![CDATA[<p>1.简介</p><p>SEO 搜索引擎优化</p><p>分类：</p><p>白帽SEO  ：</p><p>内容上的SEO</p><p>网站标题 关键字 描述</p><p>合理设置Robot.txt</p><p>增加外链引用</p><p>提交网站地图</p><p>网站i结构布局优化：</p><p>合理规划站点结构（扁平化结构）</p><p>1.控制首页链接数量（要有 100左右）</p><p>2.扁平化的目录层次（跳转3次能狗到达网站任何的位置）</p><p>3.导航SEO优化（面包屑网站组织清晰）</p><p>4.分页 首页 上页 页列表 下页 尾页</p><p>5.网站加载速度 （控制页面大小）</p><p>网页 代码优化</p><p>title</p><p>meta keywords</p><p>meta description （每页不同）</p><p>语义化代码 h1 ul ol dl em</p><p>a 要加 title  table 加 caption img加alt  strong  em （强调）</p><p>重要代码在前</p><p>重要内容不要用js 输出</p><p>少用iframe框架</p><p>谨慎使用display： none （爬虫会忽略）</p><p>标签尽量少</p><p> 外链的a标签 加上 rel=“nofollow”</p><p>黑帽SEO </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>内存机制</title>
      <link href="/2020/03/21/%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/03/21/%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>内存模型 分：栈 、堆、池（一般归为栈）</p><p>栈：变量 =》 基础数据类型（NUM、String、Null、 Undefined、Boolean）</p><p>复制—》重新分配空间</p><p>堆：复杂对象 =》引用数据类型 （操作对象的引用）</p><p>复制后 —》实际操作都是同一个对象</p><p>池：常量</p><p>生命周期</p><p>内存分配：声明变量、函数、对象 （分配）</p><p>内存使用：使用函数、变量读写内存</p><p>内存回收：垃圾回收机制回收不再使用的内存</p><p>typeof(null) //object </p><p>typeof(undefined) //undefined</p><p>构造函数和立即执行函数的声明周期是什么：</p><p>函数表达式必须等到Javascirtp引擎执行到它所在行时，才会从上而下一行一行地解析函数表达式。</p><p>函数声明提升：以把函数声明放在调用它的语句后。</p><p>立即执行函数：在函数表达式后面紧跟一个小括号（），函数会立即执行，两大要点是：表达式、括号（）；</p><p>( function(){…} )() 或 </p><p>( function (){…} () )  </p><p>内存回收机制</p><p>回收不在使用的内存！（不存在引用了！）</p><p>内存泄露： 不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。</p><p>&lt;— 两个对象相互引用，即使不在使用垃圾机制也不进行回收！（一般与DOM元素绑定）</p><p>浏览器 过去 使用引用计算算法</p><p>现在 使用标记清楚算法（清楚从根开始无法到达的对象）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack简单认识</title>
      <link href="/2020/03/21/webpack/"/>
      <url>/2020/03/21/webpack/</url>
      
        <content type="html"><![CDATA[<h3 id="模块化演进"><a href="#模块化演进" class="headerlink" title="模块化演进"></a>模块化演进</h3><p>模块化发展：</p><ol><li>文件划分：</li></ol><p>每个功能及其相关状态数据各自单独放到不同的 JS 文件中，约定每个文件是一个独立的模块。使用某个模块将这个模块引入到页面中，一个 script 标签对应一个模块，然后直接调用模块中的成员（变量 / 函数）。</p><p>如 a.js b.js。</p><p>缺点：</p><p>模块直接在全局工作，大量模块成员污染全局作用域；<br>没有私有空间，所有模块内的成员都可以在模块外部被访问或者修改；<br>一旦模块增多，容易产生命名冲突；<br>无法管理模块与模块之间的依赖关系；<br>在维护的过程中也很难分辨每个成员所属的模块。</p><ol start="2"><li>命名空间方式：</li></ol><p>每个模块只暴露一个全局对象，所有模块成员都挂载到这个全局对象中，具体做法是在第一阶段的基础上，通过将每个模块“包裹”为一个全局对象的形式实现，这种方式就好像是为模块内的成员添加了“命名空间”，所以我们又称之为命名空间方式。</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">moduleA = &#123;</span><br><span class="line">method1: function () &#123;</span><br><span class="line">    console.log(&#x27;moduleA#method1&#x27;)</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">moduleA.method1()</span><br></pre></td></tr></table></figure><ol start="3"><li>IIFE (立即执行函数):</li></ol><p>每个模块成员都放在立即执行函数的私有作用域中，需要暴露给外部成员通过挂载到全局对象上。</p><p>这种方式带来了私有成员的概念，私有成员只能在模块成员内通过闭包的形式访问，这就解决了前面所提到的全局作用域污染和命名冲突的问题。</p><p>如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> public = <span class="string">&#x27;moduleA&#x27;</span>,</span><br><span class="line"><span class="keyword">const</span> private = <span class="string">&#x27;modulePrivate&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">methods</span> () &#123;</span><br><span class="line"><span class="keyword">return</span> public</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">moduleA</span> = &#123;</span><br><span class="line"><span class="attr">methods</span>: methods</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><ol start="4"><li>IIFE 依赖参数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">$</span>) &#123; <span class="comment">// 参数表明模块的依赖，在立即执行函数传入参数</span></span><br><span class="line"><span class="keyword">let</span> public = <span class="string">&#x27;moduleA&#x27;</span>,</span><br><span class="line"><span class="keyword">const</span> private = <span class="string">&#x27;modulePrivate&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">methods</span> () &#123;</span><br><span class="line"><span class="keyword">return</span> public</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">moduleA</span> = &#123;</span><br><span class="line"><span class="attr">methods</span>: methods</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(jQuery)</span><br></pre></td></tr></table></figure><h3 id="模块化规范的出现"><a href="#模块化规范的出现" class="headerlink" title="模块化规范的出现"></a>模块化规范的出现</h3><h4 id="1-commonjsJs（同步加载模块）"><a href="#1-commonjsJs（同步加载模块）" class="headerlink" title="1. commonjsJs（同步加载模块）"></a>1. commonjsJs（同步加载模块）</h4><p>广泛使用的 javascript 模块化规范， 为 Node.js 创建的模块化系统，node.js 采用这种方式得以流行。<br>缺点：<font color='red'>不适合直接运行在浏览器环境下</font></p><p><strong>moduel.exports 导出</strong></p><p><strong>require 函数导入</strong></p><h4 id="2-AMD（Asynchronous-Module-Definition-异步模块定义规范）"><a href="#2-AMD（Asynchronous-Module-Definition-异步模块定义规范）" class="headerlink" title="2. AMD（Asynchronous Module Definition 异步模块定义规范）"></a>2. AMD（Asynchronous Module Definition 异步模块定义规范）</h4><p>异步加载依赖模块，可直接在浏览器运行，但是 javascript 运行环境没有原生支持，需要倒入 AMD 库</p><p><strong>在 Node.js 环境中，我们遵循 CommonJS 规范来组织模块。</strong>（CommonJS 属于内置模块系统）<br><strong>在浏览器环境中，我们遵循 ES Modules 规范。</strong></p><p>Node 环境也会逐渐趋向于 ES Modules 规范。语言层面实现的模块化。</p><h4 id="3-umd"><a href="#3-umd" class="headerlink" title="3. umd"></a>3. umd</h4><p>严格上说，umd不能算是一种模块规范，因为它没有模块定义和调用，这是AMD和CommonJS（服务端模块化规范)的结合体，保证模块可以被amd和commonjs调用。</p><h4 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h4><p>语言层面上实现模块化，浏览器和 nodejs 支持改规范</p><h4 id="样式文件的模块化如-SCSS"><a href="#样式文件的模块化如-SCSS" class="headerlink" title="样式文件的模块化如 SCSS"></a>样式文件的模块化如 SCSS</h4><h3 id="新语言"><a href="#新语言" class="headerlink" title="新语言"></a>新语言</h3><h4 id="ES6-js-下一代标准"><a href="#ES6-js-下一代标准" class="headerlink" title="ES6 js 下一代标准"></a>ES6 js 下一代标准</h4><h4 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h4><p>js 超集，可被编译成 ES5，ES6 标准，支持 ES6 所有功能和静态类型检查。缺点：无法直接在浏览器和 node 环境运行</p><h4 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h4><p>js 超集，比 ts 灵活</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>构建的主要工作：代码转换，文件优化，代码分割，模块合并，自动刷新，代码校验，自动发布。</p><h4 id="常用构建工具"><a href="#常用构建工具" class="headerlink" title="常用构建工具"></a>常用构建工具</h4><h5 id="Npm-Script"><a href="#Npm-Script" class="headerlink" title="Npm Script"></a>Npm Script</h5><p>任务执行者，是 npm 内置功能，通过 package.json 中 scripts 定义任务。底层通过调用 shell 运行脚本。无需安装其他依赖，缺点：太简单。</p><h5 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h5><p>进化版的 npm script，集成度不高，无法开箱即用</p><h5 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a><a href="http://cw.hubwiz.com/card/c/562089cb1bc20c980538e25b/1/1/1/">Gulp</a></h5><p>基于流自动化构建工具，灵活好用，可单独构建，亦可搭配其他工具使用。缺点和 Grunt 一致。</p><h5 id="Fis3"><a href="#Fis3" class="headerlink" title="Fis3"></a>Fis3</h5><p>百度优秀国产构建工具，功能强大，集成各种 web 所需构建功能，但是官方不再维护且不支持最新版本 nodejs</p><h5 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h5><p>专注于构建模块化项目，缺点只能用于模块化项目。</p><h5 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h5><p>类似 webpack，但不如 webpack 完善</p><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p>解决的问题： 在项目中更高效地管理和维护项目中的每个资源。</p><ol><li>具备编译代码的能力，新特性的代码转换为能够兼容大多数环境的代码，解决我们所面临的环境兼容问题</li><li>散落的模块再打包到一起，这样就解决了浏览器频繁请求模块文件的问题。开发阶段才需要模块化的文件划分!</li><li>支持不同种类的前端模块类型,样式、图片、字体等所有资源文件都作为模块使用</li></ol><p>核心：loader 机制和插件机制</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>npm i -D webpack@&lt;version&gt;npm i --save-dev webpack@&lt;version&gt;npm i -g webpack // 全局</code></pre><p>非全局安装成功后可以一下命令查看版本</p><pre><code>node_modules/webpack/bin/webpack.js -vnode_modules/.bin/webpack -v // 安装后bin文件夹里会多了一个webpack可执行文件的软链</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>webpack 执行构建，如果根目录存在 webpack.config.js，默认会读取里面的配置,否则使用默认配置。注意配置至少定义入口文件和输出文件。没有配置 webpack.config.js 文件也可执行。</p><pre><code>node_modules/webpack/bin/webpack.js &lt;入口文件名&gt; &lt;输出文件名&gt;node_modules/.bin/webpack &lt;入口文件名&gt; &lt;输出文件名&gt;</code></pre><p>此时生成打包后文件会出现在根目录下。</p><h2 id="webpack-核心概念"><a href="#webpack-核心概念" class="headerlink" title="webpack 核心概念"></a>webpack 核心概念</h2><p>webpack 从 entry 递归解析出所有依赖的 module，根据配置的 loader 进行转换，安装 Entry 进行分组，每个分组一个 Chunk，最后将 chunk 转换成文件输出</p><ol><li><p>Entry<br>入口，webpack 构建的第一步。</p></li><li><p>Modules<br>模块，webpack 中一切皆可视为模块，webpack 会从入口递归找出所有依赖模块。配置处理模块的规则，</p></li><li><p>Chunk<br>代码块，用于代码分割合并，一个 chunk 可以由多个模块生成。</p></li><li><p>Loader<br>转换器</p></li><li><p>Plugin<br>扩展插件</p></li><li><p>Output<br>输出结果</p></li><li><p>mode</p><p>模式 node development production</p></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置 webpack 方式：</p><ol><li>通过 js 描述文件，如：webpack.config.js</li><li>webpack 可执行文件命令行传参 如：webpack–devtool source-map</li></ol><h3 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h3><p>配置模块入口，必填。<br>入口文件的路径可以是<strong>相对路径</strong>，webpack 寻找相对路径文件以 context 为根目录，context 默认值为执行启动 webpack 时所在的当前工作目录，且 context 必须是一个绝对路径的字符串。</p><p>修改 context 方式：</p><ol><li><p>配置文件设置</p><p>module.export = {<br>context: path.resolve(__dirname, ‘app’)<br>}</p></li><li><p>启动命令带参</p><p>webpack –context XXX</p></li></ol><table><thead><tr><th>类型</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>Sting</td><td>单一入口，输出 Chunk 名称为 main</td><td>entry：’index.js’</td></tr><tr><td>Array&lt;String&gt;</td><td>单一入口，仅会输出最后一个 Chunk，名称为 main</td><td>entry: [‘index.js’, ‘home.js’]</td></tr><tr><td>Object</td><td>多入口,每个入口生成一个 Chunk，Chunk 名称为 Object‘ s key name</td><td>entry: {<br> index: ‘index.js’,<br> home: ‘home.js’<br> }</td></tr></tbody></table><p>动态配置入口,函数动态返回入口配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">entry：() =&gt; &#123;</span><br><span class="line"><span class="comment">// 同步</span></span><br><span class="line">  <span class="comment">// return &#123;</span></span><br><span class="line">  <span class="comment">//   <span class="doctag">XXX:</span> &#x27;XXXX&#x27;,</span></span><br><span class="line">  <span class="comment">//   <span class="doctag">XXX:</span> &#x27;XXXX&#x27;,</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 异步</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span> ( <span class="function">(<span class="params">resolve</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(&#123;</span><br><span class="line">      <span class="attr">XXX</span>: <span class="string">&#x27;XXXX&#x27;</span>,</span><br><span class="line">      <span class="attr">XXX</span>: <span class="string">&#x27;XXXX&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>内资变量表</p><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>chunk 唯一标识，从 0 开始</td></tr><tr><td>name</td><td>chunk 名称</td></tr><tr><td>hash</td><td>chunk 唯一标识 hash 值,长度可指定，默认[hash:20]</td></tr><tr><td>chunkhash</td><td>chunk 内容的 hash,长度可指定，默认[hash:20]</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Output 对象类型</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// chunkFilename: &#x27;XX&#x27;, // 配置没入口的chunk输出文件名</span></span><br><span class="line">    <span class="comment">// filename: &#x27;bundle.js&#x27;, // &lt;输出文件名&gt; 配置单一入口时</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name]_[chunkhash:8].js&#x27;</span>, <span class="comment">//  &lt;输出文件名&gt; 配置多入口时</span></span><br><span class="line">    <span class="attr">path</span>: __dirname + <span class="string">&#x27;/home/proj/cdn/assets/[hash]&#x27;</span>, <span class="comment">// &lt;输出文件时存放的本地目录&gt; 必须时String类型的绝对路径</span></span><br><span class="line">    <span class="comment">// path: path.resolve(__dirname, &#x27;dist_[hash]&#x27;)可使用node 的path模块获取绝对路径</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;http://cdn.example.com/assets/[hash]/&#x27;</span>, <span class="comment">// &lt;发布到线上异步资源URL前缀，相对路径，默认&#x27;&#x27;&gt; 谨慎使用很容易出错</span></span><br><span class="line">    : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>output 其他常用属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>crossOriginLoading</td><td>anonymous,默认值。加载脚本不会带上用户的 Cookies<br>use-credentials 会带上 Cookies</td><td>jsonp 原理引入 script 加载异步资源，用于设置异步引入标签的 crossorigin 值</td></tr><tr><td>library</td><td>字符串</td><td>导出库的名称，常与 libraryTarget 一起使用</td></tr><tr><td>libraryTarget</td><td>字符串枚举值，[‘var’, ‘commonjs’, ‘commonjs2’, ‘this’, ‘window’, ‘global’]详情见<a href="https://webpack.docschina.org/configuration/output/#output-librarytarget">官网</a></td><td>何种方式导出库</td></tr><tr><td>libraryExport</td><td></td><td>只有在 libraryTarget 设置为 commonjs 和 commonjs2 才有意义</td></tr></tbody></table><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><table><thead><tr><th>Module 属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>noParse</td><td>RegExp,[RegExp],function</td><td>设置让 webpack 忽略的无需模块化的文件，且被忽略文件不应该有模块化语句，如 require，import，define</td></tr><tr><td>rules</td><td>Array</td><td>创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)。<br>每个规则可以分为三部分 - 条件(condition)，结果(result)和嵌套规则(nested rule)<br>test、include、exclude 选中应用 loader 的文件，指出字符串，正则，数组<br>use 设置应用 loader 数组，默认从右往左执行。enfore 设置执行顺序的最前 pre 和最后 post。</td></tr></tbody></table><p>webpack 内置了对 js 的解析功能，parser 支持更细粒度地配置模块语法解析，其与 noParse 区别在于，前者精确到语法层面，后者只控制到文件。</p><p><font color='gray' size='3' bgcolor=#FF4500>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块.</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="attr">use</span>:[<span class="string">&#x27;babel-loader&#x27;</span>],</span><br><span class="line">    <span class="attr">parser</span>:&#123;</span><br><span class="line">      <span class="attr">amd</span>: <span class="literal">false</span>, <span class="comment">// 禁用AMD</span></span><br><span class="line">      <span class="attr">system</span>: <span class="literal">false</span>, <span class="comment">// 禁用system</span></span><br><span class="line">      <span class="attr">commonjs</span>:<span class="literal">false</span>, <span class="comment">// 禁用commonjs</span></span><br><span class="line">      <span class="attr">harmony</span>: <span class="literal">false</span>，<span class="comment">// 禁用ES6 import / export</span></span><br><span class="line">      <span class="attr">requireInclude</span>: <span class="literal">false</span>, <span class="comment">// 禁用require.include</span></span><br><span class="line">      <span class="attr">requireEnsure</span>:<span class="literal">false</span>, <span class="comment">// 禁用require.ensure</span></span><br><span class="line">      <span class="attr">requireContext</span>: <span class="literal">false</span>, <span class="comment">// 禁用require.context</span></span><br><span class="line">      <span class="attr">browserify</span>: <span class="literal">false</span>, <span class="comment">// 禁用browerify</span></span><br><span class="line">      <span class="attr">requirejs</span>: <span class="literal">false</span> <span class="comment">// 禁用requirejs</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [ <span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>], <span class="comment">// 先安装 npm install css-loader --save-dev  Loader，执行顺序是从后往前执行的!!!!!!</span></span><br><span class="line">   &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Resolve"><a href="#Resolve" class="headerlink" title="Resolve"></a>Resolve</h2><p>设置 webpack 如何去寻找依赖的模块</p><table><thead><tr><th>resolve 属性</th><th>示例</th><th>说明</th><th></th></tr></thead><tbody><tr><td>alias</td><td>alias:{commponents: ‘./src/commonents’}</td><td>配置别名来映射导入路径</td><td></td></tr><tr><td>mainFields</td><td>mainFields:[‘browser’, ‘main’]</td><td>优先采用多分第三方模块的那块代码</td><td></td></tr><tr><td>extensions</td><td>extensions:[‘.ts’, ‘.js’, ‘.json’]</td><td>导入语句没有后缀时，配置后缀匹配列表</td><td></td></tr><tr><td>modules</td><td>modules: [‘../src/components’, ‘node_modules’]</td><td>去那些目录寻找第三方模块，默认 node_modules</td><td></td></tr><tr><td>descriptonFiles</td><td>descriptonFiles:[‘package.json’]</td><td>配置描述第三方模块的描述，默认 package.json</td><td></td></tr><tr><td>enforceExtension</td><td>enforceExtension:true</td><td>是否需要带后缀</td><td></td></tr><tr><td>enforeModuleExtension</td><td>enforeModuleExtension: false</td><td>与 enforceExtension 相似，但只对 node_modules 下的模块生效</td><td></td></tr></tbody></table><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>pligins 接收一个数组，数组每项都是一个要使用的 plugin 的示例，难点在于 plugin 本身的配置。</p><h2 id="DevServer"><a href="#DevServer" class="headerlink" title="DevServer"></a>DevServer</h2><p>用于改变 DevServer 的默认行为。只有通过 DevServer 启动 Webpack 时，配置文件的 devserver 才生效。</p><table><thead><tr><th>DevServer 配置</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>hot</td><td>模块热替换功能，不刷新页面，自动实时预览</td><td></td></tr><tr><td>inline</td><td>若果想实时预览就开启</td><td></td></tr><tr><td>historyApiFallback</td><td>单页面应用针对命中路由返回对应 html 文件</td><td>historyApiFallback:true, // 都返回 index.html<br>historyApiFallback:{rewrites: [{from: ‘/^/user/‘, to: ‘/user.html’},<br>{from: ‘/^/game/‘, to: ‘/game.html}]}</td></tr><tr><td>contentBase</td><td>DevServer HTTP 服务器的文件根目录，默认当前执行目录</td><td>contentBase:path.join(__dirname, ‘public’)</td></tr><tr><td>headers</td><td>在 http 响应中注入 http 头</td><td>headers: {‘X-for’: ‘cus’}</td></tr><tr><td>host</td><td>DevServer 服务监听的地址</td><td></td></tr><tr><td>port</td><td>DevServer 服务监听的端口，默认 8080，被占用沿用下一个</td><td></td></tr><tr><td>allowedHosts</td><td>配置白名单列表,只有 http 请求的 host 在列表中才能得到正常返回</td><td>allowedHosts:[‘host.com//单个’, ‘.host2.com//匹配多个’]</td></tr><tr><td>disableHostCheck</td><td>是否关闭用于 DNS 重新绑定的 http 请求的 host 检查，默认只接受本地请求，通过 IP 地址访问，需要关闭 host 检查</td><td></td></tr><tr><td>https</td><td>是否启用 https，devServer 默认 HTTP 服务，HTTP2 和 Service Worker 必须运行在 https</td><td></td></tr><tr><td>clientLogLevel</td><td>客户端日志等级，枚举值 none、warnin、info、error 取其一，默认 info（所有类型日志）</td><td></td></tr><tr><td>compress</td><td>是否启用 Gzip，默认 false</td><td></td></tr><tr><td>open</td><td>浏览器打开开发网页，默认 false，devServer.openPage 配置指定 URL 页面</td><td></td></tr></tbody></table><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><table><thead><tr><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>target</td><td>针对不同运行环境的代码</td></tr><tr><td>devtool</td><td>如何生成 source map,默认 false，开启：devtool: ‘source-map’</td></tr><tr><td>wath</td><td>支持监听文件更新， 默认关闭</td></tr><tr><td>watchOptions</td><td>文件更显监听配置 poll 每秒询问次数</td></tr><tr><td>enternals</td><td>不用被打包的模块</td></tr><tr><td>resolveLoader</td><td>如何寻找 loader</td></tr></tbody></table><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// entry 表示 入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。</span></span><br><span class="line">  <span class="comment">// 类型可以是 string | object | array</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./app/entry&quot;</span>, <span class="comment">// 只有1个入口，入口只有1个文件</span></span><br><span class="line">  <span class="attr">entry</span>: [<span class="string">&quot;./app/entry1&quot;</span>, <span class="string">&quot;./app/entry2&quot;</span>], <span class="comment">// 只有1个入口，入口有2个文件</span></span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="comment">// 有2个入口</span></span><br><span class="line">    <span class="attr">a</span>: <span class="string">&quot;./app/entry-a&quot;</span>,</span><br><span class="line">    <span class="attr">b</span>: [<span class="string">&quot;./app/entry-b1&quot;</span>, <span class="string">&quot;./app/entry-b2&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如何输出结果：在 Webpack 经过一系列处理后，如何输出最终想要的代码。</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出文件存放的目录，必须是 string 类型的绝对路径。</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出文件的名称</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>, <span class="comment">// 完整的名称</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>, <span class="comment">// 当配置了多个 entry 时，通过名称模版为不同的 entry 生成不同的文件名称</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[chunkhash].js&quot;</span>, <span class="comment">// 根据文件内容 hash 值生成文件名称，用于浏览器长时间缓存文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布到线上的所有资源的 URL 前缀，string 类型</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;/assets/&quot;</span>, <span class="comment">// 放到指定目录下</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 放到根目录下</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;https://cdn.example.com/&quot;</span>, <span class="comment">// 放到 CDN 上去</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导出库的名称，string 类型</span></span><br><span class="line">    <span class="comment">// 不填它时，默认输出格式是匿名的立即执行函数</span></span><br><span class="line">    <span class="attr">library</span>: <span class="string">&quot;MyLibrary&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导出库的类型，枚举类型，默认是 var</span></span><br><span class="line">    <span class="comment">// 可以是 umd | umd2 | commonjs2 | commonjs | amd | this | var | assign | window | global | jsonp ，</span></span><br><span class="line">    <span class="attr">libraryTarget</span>: <span class="string">&quot;umd&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否包含有用的文件路径信息到生成的代码里去，boolean 类型</span></span><br><span class="line">    <span class="attr">pathinfo</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 附加 Chunk 的文件名称</span></span><br><span class="line">    <span class="attr">chunkFilename</span>: <span class="string">&quot;[id].js&quot;</span>,</span><br><span class="line">    <span class="attr">chunkFilename</span>: <span class="string">&quot;[chunkhash].js&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JSONP 异步加载资源时的回调函数名称，需要和服务端搭配使用</span></span><br><span class="line">    <span class="attr">jsonpFunction</span>: <span class="string">&quot;myWebpackJsonp&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成的 Source Map 文件名称</span></span><br><span class="line">    <span class="attr">sourceMapFilename</span>: <span class="string">&quot;[file].map&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浏览器开发者工具里显示的源码模块名称</span></span><br><span class="line">    <span class="attr">devtoolModuleFilenameTemplate</span>: <span class="string">&quot;webpack:///[resource-path]&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步加载跨域的资源时使用的方式</span></span><br><span class="line">    <span class="attr">crossOriginLoading</span>: <span class="string">&quot;use-credentials&quot;</span>,</span><br><span class="line">    <span class="attr">crossOriginLoading</span>: <span class="string">&quot;anonymous&quot;</span>,</span><br><span class="line">    <span class="attr">crossOriginLoading</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置模块相关</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 配置 Loader</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>, <span class="comment">// 正则匹配命中要使用 Loader 的文件</span></span><br><span class="line">        <span class="attr">include</span>: [</span><br><span class="line">          <span class="comment">// 只会命中这里面的文件</span></span><br><span class="line">          path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;app&quot;</span>),</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">exclude</span>: [</span><br><span class="line">          <span class="comment">// 忽略这里面的文件</span></span><br><span class="line">          path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;app/demo-files&quot;</span>),</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// 使用那些 Loader，有先后次序，从后往前执行</span></span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>, <span class="comment">// 直接使用 Loader 的名称</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="comment">// 给 html-loader 传一些参数</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">noParse</span>: [</span><br><span class="line">      <span class="comment">// 不用解析和处理的模块</span></span><br><span class="line">      <span class="regexp">/special-library\.js$/</span>, <span class="comment">// 用正则匹配</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置寻找模块的规则</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">modules</span>: [</span><br><span class="line">      <span class="comment">// 寻找模块的根目录，array 类型，默认以 node_modules 为根目录</span></span><br><span class="line">      <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">      path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;app&quot;</span>),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.json&quot;</span>, <span class="string">&quot;.jsx&quot;</span>, <span class="string">&quot;.css&quot;</span>], <span class="comment">// 模块的后缀名</span></span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="comment">// 模块别名配置，用于映射模块</span></span><br><span class="line">      <span class="comment">// 把 &#x27;module&#x27; 映射 &#x27;new-module&#x27;，同样的 &#x27;module/path/file&#x27; 也会被映射成 &#x27;new-module/path/file&#x27;</span></span><br><span class="line">      <span class="attr">module</span>: <span class="string">&quot;new-module&quot;</span>,</span><br><span class="line">      <span class="comment">// 使用结尾符号 $ 后，把 &#x27;only-module&#x27; 映射成 &#x27;new-module&#x27;，</span></span><br><span class="line">      <span class="comment">// 但是不像上面的，&#x27;module/path/file&#x27; 不会被映射成 &#x27;new-module/path/file&#x27;</span></span><br><span class="line">      <span class="string">&quot;only-module$&quot;</span>: <span class="string">&quot;new-module&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">alias</span>: [</span><br><span class="line">      <span class="comment">// alias 还支持使用数组来更详细的配置</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;module&quot;</span>, <span class="comment">// 老的模块</span></span><br><span class="line">        <span class="attr">alias</span>: <span class="string">&quot;new-module&quot;</span>, <span class="comment">// 新的模块</span></span><br><span class="line">        <span class="comment">// 是否是只映射模块，如果是 true 只有 &#x27;module&#x27; 会被映射，如果是 false &#x27;module/inner/path&#x27; 也会被映射</span></span><br><span class="line">        <span class="attr">onlyModule</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">symlinks</span>: <span class="literal">true</span>, <span class="comment">// 是否跟随文件软链接去搜寻模块的路径</span></span><br><span class="line">    <span class="attr">descriptionFiles</span>: [<span class="string">&quot;package.json&quot;</span>], <span class="comment">// 模块的描述文件</span></span><br><span class="line">    <span class="attr">mainFields</span>: [<span class="string">&quot;main&quot;</span>], <span class="comment">// 模块的描述文件里的描述入口的文件的字段名称</span></span><br><span class="line">    <span class="attr">enforceExtension</span>: <span class="literal">false</span>, <span class="comment">// 是否强制导入语句必须要写明文件后缀</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输出文件性能检查配置</span></span><br><span class="line">  <span class="attr">performance</span>: &#123;</span><br><span class="line">    <span class="attr">hints</span>: <span class="string">&quot;warning&quot;</span>, <span class="comment">// 有性能问题时输出警告</span></span><br><span class="line">    <span class="attr">hints</span>: <span class="string">&quot;error&quot;</span>, <span class="comment">// 有性能问题时输出错误</span></span><br><span class="line">    <span class="attr">hints</span>: <span class="literal">false</span>, <span class="comment">// 关闭性能检查</span></span><br><span class="line">    <span class="attr">maxAssetSize</span>: <span class="number">200000</span>, <span class="comment">// 最大文件大小 (单位 bytes)</span></span><br><span class="line">    <span class="attr">maxEntrypointSize</span>: <span class="number">400000</span>, <span class="comment">// 最大入口文件大小 (单位 bytes)</span></span><br><span class="line">    <span class="attr">assetFilter</span>: <span class="keyword">function</span> (<span class="params">assetFilename</span>) &#123;</span><br><span class="line">      <span class="comment">// 过滤要检查的文件</span></span><br><span class="line">      <span class="keyword">return</span> assetFilename.<span class="title function_">endsWith</span>(<span class="string">&quot;.css&quot;</span>) || assetFilename.<span class="title function_">endsWith</span>(<span class="string">&quot;.js&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>, <span class="comment">// 配置 source-map 类型</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">context</span>: __dirname, <span class="comment">// Webpack 使用的根目录，string 类型必须是绝对路径</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置输出代码的运行环境</span></span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;web&quot;</span>, <span class="comment">// 浏览器，默认</span></span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;webworker&quot;</span>, <span class="comment">// WebWorker</span></span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;node&quot;</span>, <span class="comment">// Node.js，使用 `require` 语句加载 Chunk 代码</span></span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;async-node&quot;</span>, <span class="comment">// Node.js，异步加载 Chunk 代码</span></span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;node-webkit&quot;</span>, <span class="comment">// nw.js</span></span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;electron-main&quot;</span>, <span class="comment">// electron, 主线程</span></span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;electron-renderer&quot;</span>, <span class="comment">// electron, 渲染线程</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="comment">// 使用来自 JavaScript 运行环境提供的全局变量</span></span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;jQuery&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">stats</span>: &#123;</span><br><span class="line">    <span class="comment">// 控制台输出日志控制</span></span><br><span class="line">    <span class="attr">assets</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">colors</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">errors</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">errorDetails</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">hash</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// DevServer 相关的配置</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// 代理到后端服务接口</span></span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">contentBase</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public&quot;</span>), <span class="comment">// 配置 DevServer HTTP 服务器的文件根目录</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>, <span class="comment">// 是否开启 gzip 压缩</span></span><br><span class="line">    <span class="attr">historyApiFallback</span>: <span class="literal">true</span>, <span class="comment">// 是否开发 HTML5 History API 网页</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 是否开启模块热替换功能</span></span><br><span class="line">    <span class="attr">https</span>: <span class="literal">false</span>, <span class="comment">// 是否开启 HTTPS 模式</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">profile</span>: <span class="literal">true</span>, <span class="comment">// 是否捕捉 Webpack 构建的性能信息，用于分析什么原因导致构建性能不佳</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cache</span>: <span class="literal">false</span>, <span class="comment">// 是否启用缓存提升构建速度</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">watch</span>: <span class="literal">true</span>, <span class="comment">// 是否开始</span></span><br><span class="line">  <span class="attr">watchOptions</span>: &#123;</span><br><span class="line">    <span class="comment">// 监听模式选项</span></span><br><span class="line">    <span class="comment">// 不监听的文件或文件夹，支持正则匹配。默认为空</span></span><br><span class="line">    <span class="attr">ignored</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    <span class="comment">// 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高</span></span><br><span class="line">    <span class="comment">// 默认为300ms</span></span><br><span class="line">    <span class="attr">aggregateTimeout</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="comment">// 判断文件是否发生变化是不停的去询问系统指定文件有没有变化，默认每隔1000毫秒询问一次</span></span><br><span class="line">    <span class="attr">poll</span>: <span class="number">1000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="项目中常用"><a href="#项目中常用" class="headerlink" title="项目中常用"></a>项目中常用</h2><h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><h3 id="使用-ts"><a href="#使用-ts" class="headerlink" title="使用 ts"></a>使用 ts</h3><h3 id="使用-scss"><a href="#使用-scss" class="headerlink" title="使用 scss"></a>使用 scss</h3><h3 id="jsx-语法"><a href="#jsx-语法" class="headerlink" title="jsx 语法"></a>jsx 语法</h3><h3 id="构建-Electron-应用"><a href="#构建-Electron-应用" class="headerlink" title="构建 Electron 应用"></a>构建 Electron 应用</h3><h3 id="多个单页面应用"><a href="#多个单页面应用" class="headerlink" title="多个单页面应用"></a>多个单页面应用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npm init --yes</span><br><span class="line">$ npm i webpack webpack-cli --save-dev</span><br><span class="line"></span><br><span class="line">$ npx webpack --version</span><br><span class="line">// @TODO !!!!!</span><br><span class="line"> webpack智能提示</span><br></pre></td></tr></table></figure><p><img src="../images/webpack/image-20230108201330222.png" alt="image-20230108201330222"></p><p>当当前项目有安装某个包 而没有全局安装时 可以在项目中使用npx 执行这个包的命令</p><p>打包后 是自执行函数</p><p>对象是依赖图谱 包括 模块的路径以及 chunk 成为代码片段</p><p><img src="../images/webpack/image-20230111143718492.png" alt="image-20230111143718492"></p><p>chunks ？？</p><p><img src="../images/webpack/image-20230111201528583.png" alt="image-20230111201528583"></p><p>简单jswebpack 打包</p><p>webpack 自动生成html 引入js </p><p><img src="../images/webpack/image-20230112160443163.png" alt="image-20230112160443163"></p><p>版本与webpack 对应</p><p><img src="../images/webpack/image-20230114065751933.png" alt="image-20230114065751933"></p><p>清理 </p><p>webpack 只能处理js json 格式文件， 集成css vue 图片 jsx</p><p><img src="../images/webpack/image-20230114071217444.png" alt="image-20230114071217444"></p><p>css 单独成一个文件 （抽取并生成独立文件）min-css-extract-plugin</p><p>plugins 没有顺序要求</p><p><img src="../images/webpack/image-20230114071514061.png" alt="image-20230114071514061"></p><p>安装配置loader css less scss </p><p>安装使用 postCSS 工具集</p><p><img src="../images/webpack/image-20230119101726022.png" alt="image-20230119101726022"></p><p><img src="../images/webpack/image-20230119101853025.png" alt="image-20230119101853025"></p><p><img src="../images/webpack/image-20230119102334700.png" alt="image-20230119102334700"></p><p><img src="../images/webpack/image-20230119102615227.png" alt="image-20230119102615227"></p><p><img src="../images/webpack/image-20230119103038961.png" alt="image-20230119103038961"></p><p>rc 文件直接写 换行不需要引号 括号</p><p><img src="../images/webpack/image-20230119103400814.png" alt="image-20230119103400814"></p><p><img src="../images/webpack/image-20230119111758064.png" alt="image-20230119111758064"></p><p><img src="../images/webpack/image-20230119112110834.png" alt="image-20230119112110834"></p><p>css 压缩</p><p><img src="../images/webpack/image-20230119113104023.png" alt="image-20230119113104023">给loader 增加配置</p><p>实现自定义loader</p><p><img src="../images/webpack/image-20230119112704473.png" alt="image-20230119112704473"></p><p><img src="../images/webpack/image-20230119112737996.png" alt="image-20230119112737996"></p><p>loader 要有返回值</p><p><img src="../images/webpack/image-20230119131323734.png" alt="image-20230119131323734"></p><p><img src="../images/webpack/image-20230119131742641.png" alt="image-20230119131742641">)<img src="../images/webpack/image-20230119131742795.png" alt="image-20230119131742795"></p><p>如何解决自定义的loader 的路径问题    </p><p><img src="../images/webpack/image-20230119132548130.png" alt="image-20230119132548130">和modolus 同级</p><p><img src="../images/webpack/image-20230119133434410.png" alt="image-20230119133434410"></p><p><img src="../images/webpack/image-20230119133146926.png" alt="image-20230119133146926"></p><p>引入图片。用什么loader 处理（file-loader url-loader）</p><p><img src="../images/webpack/image-20230119135740703.png" alt="image-20230119135740703"></p><p><img src="../images/webpack/image-20230119141051573.png" alt="image-20230119141051573"></p><p><img src="../images/webpack/image-20230119143414119.png" alt="image-20230119143414119"></p><p>图片小于某个值 转成base64</p><p>image-webpack-loader 必须在url-loader 或者file-loader 之前使用</p><p><img src="../images/webpack/image-20230126130221297.png" alt="image-20230126130221297"></p><p>第三方字体引入 </p><p>也是使用file-loader url-loader </p><p><img src="../images/webpack/image-20230126130253047.png" alt="image-20230126130253047"></p><p><img src="../images/webpack/image-20230126130502370.png" alt="image-20230126130502370"></p><p>多页面打包通用方案</p><p>entry 要支持绝对路径和相对路径</p><p>output path 必须是绝对路径</p><p><img src="../images/webpack/image-20230126152033192.png" alt="image-20230126152033192"></p><p><img src="../images/webpack/image-20230126152044567.png" alt="image-20230126152044567"></p><p><img src="../images/webpack/image-20230126152311445.png" alt="image-20230126152311445"></p><p><img src="../images/webpack/image-20230126152341926.png" alt="image-20230126152341926"></p><p><img src="../images/webpack/image-20230126152631873.png" alt="image-20230126152631873"></p><p>性能优化</p><p>js模块处理</p><p>babel</p><p><img src="../images/webpack/image-20230126163941210.png" alt="image-20230126163941210"></p><img src="../images/webpack/image-20230126194548480.png" alt="image-20230126194548480" style="zoom:200%;" /><p><img src="../images/webpack/image-20230126194638046.png" alt="image-20230126194638046"></p><p>转换</p><p>安装polyfill</p><p>npm install @babel/polyfill -s</p><p>可以在js 逻辑执行前引入（js入口文件）或者html引入</p><p><img src="../images/webpack/image-20230126201216588.png" alt="image-20230126201216588"></p><p>false 默认值。打包后体积很大</p><p><img src="../images/webpack/image-20230126201642825.png" alt="image-20230126201642825"></p><p>自定义plugin的实现</p><p>webpack 打包编译过程中， 会触发一系列的钩子事件（插件）</p><p>所谓插件其实就是找到相应的钩子（时间节点），在上面注册自己的任务（事件主体）</p><p>插件就是在某个时刻，帮助我们完善一些工作的机制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const webpack = require(&quot;webpack&quot;)</span><br><span class="line">const config = require(&quot;./webpack.config.js&quot;)</span><br><span class="line"></span><br><span class="line">const compiler = webpack(config);</span><br><span class="line"></span><br><span class="line">object.keys(compiler.hooks).forEach((hookName) =&gt; &#123;</span><br><span class="line">// 同步钩子 用tap</span><br><span class="line">// 异步钩子 用tapSaync  </span><br><span class="line">compiler.hooks[hookName].tap(&quot;事件名称&quot;，(compilation) =&gt; &#123;</span><br><span class="line">console.log(`run ---&gt;$&#123;hookName&#125;`)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">compiler.run()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// myPlugins.js</span><br><span class="line">// 插件的结构</span><br><span class="line"></span><br><span class="line">class TestWebpackPlugin &#123;</span><br><span class="line">construct(options) &#123;</span><br><span class="line">console.log(options)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">apply(compiler) &#123;</span><br><span class="line"> // 不能缺少</span><br><span class="line"> compiler.hooks.emit.tapAsync(&quot;TxtwebpackPlugin&quot;,(compliation,cb)=&gt; &#123;</span><br><span class="line"> complication.assests[&quot;xxx.txt&quot;] = &#123;</span><br><span class="line"> let contnet = &quot;test content&quot;</span><br><span class="line"> source: function () &#123;</span><br><span class="line"> return content </span><br><span class="line"> &#125;,</span><br><span class="line"> size: function() &#123;</span><br><span class="line"> return content.length</span><br><span class="line"> &#125; </span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line"> console.log();</span><br><span class="line"> cb();</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mosule.exports = TestWebpackPlugin;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">// 使用</span><br><span class="line">// 引入</span><br><span class="line">import myPlugins from &quot;./xxxx/XXXX.js&quot;</span><br><span class="line">plugins:&#123;</span><br><span class="line">new myPlugins(&#123;</span><br><span class="line">name: &#x27;tesMyPlugins&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack打包bundle原理分析：</p><p>依赖图谱对象</p><p>模块的路径以及 该模块编译后的代码</p><p>分析：分析该模块是否有依赖？记录改依赖的路径</p><p>该依赖的原始路径就是相对路径</p><p>编译 生生成代码片段</p><p>汇总成一个依赖图谱</p><p>生成文件， 使用fs </p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2020/03/20/Ajax/"/>
      <url>/2020/03/20/Ajax/</url>
      
        <content type="html"><![CDATA[<h3 id="AJAX-Asynchronous-JavaScript-and-XML（异步的-JavaScript-和-XML）。"><a href="#AJAX-Asynchronous-JavaScript-and-XML（异步的-JavaScript-和-XML）。" class="headerlink" title="AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。"></a>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</h3><h3 id="AJAX-用于和服务器交换数据，是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。"><a href="#AJAX-用于和服务器交换数据，是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。" class="headerlink" title="AJAX 用于和服务器交换数据，是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。"></a>AJAX 用于和服务器交换数据，是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</h3><h3 id="XMLHttpRequest-对象-是-AJAX-的基础"><a href="#XMLHttpRequest-对象-是-AJAX-的基础" class="headerlink" title="XMLHttpRequest 对象 是 AJAX 的基础"></a>XMLHttpRequest 对象 是 AJAX 的基础</h3><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); <span class="comment">// ie 6以上</span></span><br><span class="line"><span class="keyword">var</span> xmlhttp =<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>); <span class="comment">// ie5 ie6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 规定请求的类型、URL 以及是否异步处理请求。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Sting</span>&#125; method：请求的类型；GET 或 POST</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Sting</span>&#125; url：文件在服务器上的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Boolean</span>&#125; async：true（异步）或 false（同步）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(method,url,<span class="keyword">async</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 将请求发送到服务器。。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Sting</span>&#125; 仅用于 POST 请求</span></span><br><span class="line"><span class="comment"> * /</span></span><br><span class="line"><span class="comment">xmlhttp.send(string)</span></span><br></pre></td></tr></table></figure><h3 id="兼容问题"><a href="#兼容问题" class="headerlink" title="兼容问题"></a>兼容问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;</span><br><span class="line">    request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    request = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get方法</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;demo_get2.asp?fname=Bill&amp;lname=Gates&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br><span class="line"><span class="comment">// post方法</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;ajax_test.asp&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>(<span class="string">&quot;fname=Bill&amp;lname=Gates&quot;</span>);</span><br></pre></td></tr></table></figure><p></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 向请求添加 HTTP 头。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">type</span>&#125; header: 规定头的名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">type</span>&#125; value: 规定头的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">setRequestHeader</span>(header,value)</span><br></pre></td></tr></table></figure><p></p><h3 id="响应处理"><a href="#响应处理" class="headerlink" title="响应处理"></a>响应处理</h3><p>onreadystatechange 事件，存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。<br>获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>responseText</td><td>获得字符串形式的响应数据。</td></tr><tr><td>responseXML</td><td>获得 XML 形式的响应数据。</td></tr><tr><td>readyState</td><td>存有 XMLHttpRequest 的状态。 <br/>从 0 到 4 发生变化。<br/>0: 请求未初始化<br/>1: 服务器连接已建立<br/>2: 请求已接收<br/>3: 请求处理中<br/>4: 请求已完成，且响应已就绪</td></tr><tr><td>status</td><td>200: “OK” 404: 未找到页面</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//async=true 时 请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数</span></span><br><span class="line"><span class="title class_">Async</span> = <span class="literal">true</span></span><br><span class="line">xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;test1.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Async = false 不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;test1.txt&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span><br></pre></td></tr></table></figure><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ajax = <span class="keyword">function</span>（options = &#123;&#125;） &#123;</span><br><span class="line">    options.<span class="property">type</span> = ( options.<span class="property">type</span> || <span class="string">&#x27;GET&#x27;</span> ).<span class="title function_">toUpperCase</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> data = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i  <span class="keyword">in</span> options.<span class="property">data</span>) &#123;</span><br><span class="line">      data.<span class="title function_">push</span>(<span class="built_in">encodeURIComponent</span>(i) + <span class="string">&quot;=&quot;</span> + <span class="built_in">encodeURIComponent</span>(otions.<span class="property">data</span>[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = data.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="property">onreadstatechange</span> = <span class="keyword">function</span>（） &#123;</span><br><span class="line">        <span class="keyword">if</span>（xhr.<span class="property">readyState</span> === <span class="number">4</span>）&#123;</span><br><span class="line">            <span class="keyword">const</span> status = xhr.<span class="property">status</span>;</span><br><span class="line">            <span class="keyword">if</span> (status &gt;= <span class="number">200</span> &amp;&amp; status &lt;<span class="number">300</span>) &#123;</span><br><span class="line">                options.<span class="property">success</span> &amp;&amp; options.<span class="title function_">success</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>), xhr.<span class="property">responseXML</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                option.<span class="property">error</span> &amp;&amp; options.<span class="title function_">error</span>(status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">type</span> === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, options.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span> + data, <span class="literal">true</span>);</span><br><span class="line">        xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-foem-urlencoded&#x27;</span>);</span><br><span class="line">        xhr.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ajax 封装</span></span><br><span class="line"><span class="keyword">var</span> isrequesting = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">action, data, successcallback, errorcallback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isrequesting) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isrequesting = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: action,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: data,</span><br><span class="line">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">ex, b, c</span>) &#123;</span><br><span class="line">                isrequesting = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (errorcallback) &#123;</span><br><span class="line">                    <span class="title function_">errorcallback</span>(ex, b, c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">                isrequesting = <span class="literal">false</span>;</span><br><span class="line">                <span class="title function_">successcallback</span>(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">        isrequesting = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目接入sentry</title>
      <link href="/2020/03/19/vue%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%85%A5sentry/"/>
      <url>/2020/03/19/vue%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%85%A5sentry/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  为了自主监听前端项目在测试和运行中出现的错误，达到高校定位问题所在，完善和修复项目开发中没有周全考虑的问题等产生的bug。<br>  Points：主动 纠错 定位 修复</p><p>  原理：<br>  跟踪运行时错误，如果在组件渲染时出现运行错误，错误将会被传递至全局 Vue.config.errorHandler 配置函数 (如果已设置)。利用这个钩子函数来配合错误跟踪服务是个不错的主意。Sentry，为Vue提供官方集成。</p><h1 id="1-sentry-注册-amp-添加sentry项目"><a href="#1-sentry-注册-amp-添加sentry项目" class="headerlink" title="1.sentry 注册 &amp; 添加sentry项目"></a>1.sentry 注册 &amp; 添加sentry项目</h1><p>  注册<br>  添加sentry项目<br>  登陆sentry - create projiect - browsers - vue.js</p><h1 id="2-vue项目安装插件"><a href="#2-vue项目安装插件" class="headerlink" title="2.vue项目安装插件"></a>2.vue项目安装插件</h1><pre><code>npm install @sentry/browsernpm install @sentry/integrations</code></pre><h1 id="3-vue-项目引入"><a href="#3-vue-项目引入" class="headerlink" title="3.vue 项目引入"></a>3.vue 项目引入</h1><pre><code>import * as Sentry from &apos;@sentry/browser&apos;;import * as Integrations from &apos;@sentry/integrations&apos;;Sentry.init(&#123;dsn: &apos;https://9257bb5c60814f518e012fb3d0e9dda6@sentry.io/4320951&apos;, // 不同的项目dsn不同integrations: [new Integrations.Vue(&#123;Vue, attachProps: true // 是否上报组件的 props&#125;)],&#125;);    </code></pre><h1 id="4-其他设置"><a href="#4-其他设置" class="headerlink" title="4.其他设置"></a>4.其他设置</h1><h2 id="仅仅设置生产环境才上传错误"><a href="#仅仅设置生产环境才上传错误" class="headerlink" title="仅仅设置生产环境才上传错误"></a>仅仅设置生产环境才上传错误</h2><p>使用 process.env.NODE_ENV === ‘product’ 判断</p><h2 id="接入后浏览器控制器没有任何报错"><a href="#接入后浏览器控制器没有任何报错" class="headerlink" title="接入后浏览器控制器没有任何报错"></a>接入后浏览器控制器没有任何报错</h2><p>设置 logErrors: true，本地控制台会像正常报错，否则上传错误而不报错。</p><h2 id="vue项目上传的错误信息是压缩后的"><a href="#vue项目上传的错误信息是压缩后的" class="headerlink" title="vue项目上传的错误信息是压缩后的"></a>vue项目上传的错误信息是压缩后的</h2><p><a href="https://docs.sentry.io/platforms/javascript/sourcemaps/">sentry官网</a> 这里有说解决指引,建议来这里看看啦</p><pre><code>If you are uploading source map artifacts yourself, you must specify the release in your SDK. Sentry will use the release name to associate digested event data with the files you’ve uploaded via the releases API, sentry-cli or sentry-webpack-plugin. This step is optional if you are hosting source maps on the remote server.</code></pre><p>上传source-map 解决思路:通过release name 和 sentry-cli or sentry-webpack-plugin 的上传进行关联</p><p> sentry-webpack-plugin</p><h3 id="1-在process定义一个release标识"><a href="#1-在process定义一个release标识" class="headerlink" title="1.在process定义一个release标识"></a>1.在process定义一个release标识</h3><p>例如：process.env.RELEASE_VERSION = v1.0.0。在vue-cli2.0版本里面，npm run build，执行 node build.js , 在这里添加这样的标识是不错的，当然啦很多人说webpack.prod.conf.js里面添加也是可以的。<br>然而但是，我在项目中接入的时候，发现输出整个process.env发现只有{NODE_ENV:’product’ },惊不惊喜意不意外，那就找到plugins：[new webpack.DefinePlugin({ ‘process.env’: env (这是个引用值)})]，修改对应的修改吧。</p><h3 id="2-引入插件"><a href="#2-引入插件" class="headerlink" title="2.引入插件"></a>2.引入插件</h3><pre><code>npm install --save-dev @sentry/webpack-pluginnpm install @sentry/webpack-plugin --only=dev</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">SentryCliPlugin</span> <span class="keyword">from</span> <span class="string">&#x27;@Sentry/webpack-plugin&#x27;</span></span><br><span class="line"><span class="attr">plugins</span>:[</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">SentryCliPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">include</span>: <span class="string">&quot;./dist&quot;</span>, <span class="comment">// 需要上传到sentry服务器的资源目录,会自动匹配js 以及map文件</span></span><br><span class="line">      <span class="attr">release</span>: process.<span class="property">env</span>.<span class="property">RELEASE_VERSION</span>, <span class="comment">// 版本号</span></span><br><span class="line">      <span class="attr">configFile</span>: <span class="string">&quot;sentry.properties&quot;</span>, <span class="comment">// 不用改</span></span><br><span class="line">      <span class="attr">ignore</span>: [<span class="string">&#x27;node_modules&#x27;</span>, <span class="string">&#x27;webpack.config.js&#x27;</span>],</span><br><span class="line">      <span class="attr">urlPrefix</span>: <span class="string">&quot;~/static/&quot;</span>  <span class="comment">// 线上对应的url资源的相对路径，打包后默认在dist，并且里面包含 index.html 和 static 文件夹放置静态资源</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-sentry-init-添加版本"><a href="#3-sentry-init-添加版本" class="headerlink" title="3.sentry init 添加版本"></a>3.sentry init 添加版本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Sentry</span>.<span class="title function_">init</span>(&#123;</span><br><span class="line">  <span class="attr">release</span>: processenv.<span class="property">RELEASE_VERSION</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-添加-sentryclirc-文件"><a href="#4-添加-sentryclirc-文件" class="headerlink" title="4.添加 .sentryclirc 文件"></a>4.添加 .sentryclirc 文件</h3><pre><code>[auth]token=db1bf055c63640408762... // settings-- API keys -- Auth tockens-- create new token[defaults]url = http://log.XX.cn // 服务器地址org = sentry // 组织名称，settings-- Gerneral settings -- settingsproject = llb // 项目名称</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> sentry </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用的页面效果实现</title>
      <link href="/2020/03/19/%E5%B8%B8%E7%94%A8%E7%9A%84%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/03/19/%E5%B8%B8%E7%94%A8%E7%9A%84%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><h3 id="1-段落文字除了最后一行左对齐，-其余两端对齐"><a href="#1-段落文字除了最后一行左对齐，-其余两端对齐" class="headerlink" title="1. 段落文字除了最后一行左对齐， 其余两端对齐"></a>1. 段落文字除了最后一行左对齐， 其余两端对齐</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:justify;</span><br><span class="line">     <span class="attribute">text-justify</span>:inter-ideograph;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-文字超长省略"><a href="#2-文字超长省略" class="headerlink" title="2.文字超长省略"></a>2.文字超长省略</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.limit-text</span> &#123;</span><br><span class="line">   <span class="attribute">max-width</span>:<span class="number">1rem</span>; <span class="comment">/* 宽度必须 */</span></span><br><span class="line">   <span class="attribute">overflow</span>: hidden;</span><br><span class="line">   <span class="attribute">white-space</span>:nowrap;</span><br><span class="line">   <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-多行超出省略"><a href="#3-多行超出省略" class="headerlink" title="3.多行超出省略"></a>3.多行超出省略</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mult-limit-tetx</span> &#123;</span><br><span class="line">    <span class="comment">/*font-size: 0.28rem;*/</span></span><br><span class="line">    <span class="comment">/*width: 6.2rem;*/</span></span><br><span class="line">    <span class="comment">/*height: 5rem; */</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/*滚动条整体样式*/</span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  width: 2px;</span><br><span class="line">  height: 2px;</span><br><span class="line">&#125;</span><br><span class="line">/* 滚动条的滑轨背景颜色 */</span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">  background-color: rgba(168, 180, 203, 0.2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 滑轨两头的监听按钮颜色 */</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-button &#123;</span><br><span class="line">  // background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 横向滚动条和纵向滚动条相交处尖角的颜色 */</span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">  background-color: rgba(168, 180, 203, 0.1);</span><br><span class="line">  // background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line">/*滚动条里面小方块 滑块*/</span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  border-radius: 2px;</span><br><span class="line">  background-color: rgba(168, 180, 203, 0.3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><p>1.左右布局</p><h1 id="特殊形状"><a href="#特殊形状" class="headerlink" title="特殊形状"></a>特殊形状</h1><h3 id="圆、椭圆"><a href="#圆、椭圆" class="headerlink" title="圆、椭圆"></a>圆、椭圆</h3><table><thead><tr><th>简写</th><th>等价于</th><th>备注</th></tr></thead><tbody><tr><td>border-radius</td><td><code>border-top-left-radius</code><br /> <code>border-top-right-radius</code> <br /><code>border-bottom-right-radius</code> <br /><code>border-bottom-left-radius</code></td><td></td></tr><tr><td>向上半圆</td><td>border-radius: 50% / 100% 100% 0 0;<br />border-radius: 100px 100px 0 0;</td><td>可以单独指定水平和垂直半径，<br />只要用一个(水平/垂直)分隔这两个值就行。</td></tr><tr><td>向左半圆</td><td>border-radius: 100% 0 0 100% / 50%;</td><td></td></tr><tr><td>四分之一椭圆</td><td>border-radius: 100% 0 0 0;</td><td></td></tr><tr><td>扇形</td><td>border-radius: 100px 0 0;</td><td></td></tr></tbody></table><h3 id="平行四边形"><a href="#平行四边形" class="headerlink" title="平行四边形"></a>平行四边形</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 直接在元素上加文字回跟着倾斜</span></span><br><span class="line"><span class="comment"> * 所以样式在伪元素中实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative; <span class="comment">/* 其他的文字颜色、内外变局等样式*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;<span class="attribute">bottom</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">skew</span>(-<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">50%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">50%</span>, <span class="number">50%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">50%</span>); // 裁剪路径 处理不规则图形</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切角"><a href="#切角" class="headerlink" title="切角"></a>切角</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 切角</span><br><span class="line">&#123;</span><br><span class="line">background: #58a;</span><br><span class="line">background: linear-gradient(135deg, transparent 15px, #58a 0) top left,</span><br><span class="line"> linear-gradient(-135deg, transparent 15px, #58a 0) top right,</span><br><span class="line"> linear-gradient(-45deg, transparent 15px, #58a 0) bottom right,</span><br><span class="line"> linear-gradient(45deg, transparent 15px, #58a 0) bottom left;</span><br><span class="line">background-size: 50% 50%;</span><br><span class="line">background-repeat: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line">// 圆弧切角</span><br><span class="line">&#123;</span><br><span class="line">background: #58a;</span><br><span class="line">    background:radial-gradient(circle at top left, transparent 15px, #58a 0) top left,</span><br><span class="line">                radial-gradient(circle at top right, transparent 15px, #58a 0) top right,</span><br><span class="line">                radial-gradient(circle at bottom  right, transparent 15px, #58a 0) bottom right,</span><br><span class="line">                radial-gradient(circle at bottom left, transparent 15px, #58a 0) bottom left;</span><br><span class="line">    background-size: 50% 50%;</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="弧形"><a href="#弧形" class="headerlink" title="弧形"></a>弧形</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.arc&#123;</span><br><span class="line">border-radius: 100px 0;</span><br><span class="line">-webkit-transform: rotate(45deg);</span><br><span class="line">-ms-transform: rotate(45deg);</span><br><span class="line">-o-transform: rotate(45deg);</span><br><span class="line">transform: rotate(45deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yeminshan/photos/raw/master/typro_img_upload/image-20220524152240297.png" alt="image-20220524152240297"></p><h3 id="小三角"><a href="#小三角" class="headerlink" title="小三角"></a>小三角</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.triangle&#123;</span><br><span class="line">border: 50px solid green;</span><br><span class="line">width: 0;</span><br><span class="line">height: 0;</span><br><span class="line">border-top-color: yellow;</span><br><span class="line">border-right-color: blue;</span><br><span class="line">border-bottom-color: pink;</span><br><span class="line">border-left-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">.arrow&#123;</span><br><span class="line">background: none;/*为了清除前面div设置的背景颜色*/</span><br><span class="line">border: 50px solid red;</span><br><span class="line">width: 0;</span><br><span class="line">height: 0;</span><br><span class="line">border-color: red transparent transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="疑问框"><a href="#疑问框" class="headerlink" title="疑问框"></a>疑问框</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*圆角矩形*/</span><br><span class="line">.rectangle&#123;</span><br><span class="line">width: 200px;</span><br><span class="line">border-radius: 15px;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">/*小三角*/</span><br><span class="line">.rectangle::before&#123;</span><br><span class="line">content: &quot;&quot;;</span><br><span class="line">width: 0;</span><br><span class="line">height: 0;</span><br><span class="line">border: 15px solid red;</span><br><span class="line">border-color: red transparent transparent transparent;</span><br><span class="line">position:absolute;</span><br><span class="line">bottom: -30px;</span><br><span class="line">left: 40px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://xxxgitone.github.io/2017/03/27/shape/">其他效果</a></p><p>背景</p><p>background-image: linear-gradient(#ccc 0%, #1d84ef 50%, transparent 50%);</p><p>‘background-image’: <code>-webkit-linear-gradient(100deg, $&#123;this.$store.getters[&#39;theme/themeColorHex&#39;](0.7)&#125; 0%, $&#123;this.$store.getters[&#39;theme/themeColorHex&#39;](1)&#125; 100%)</code></p><p>  box-shadow: inset 0px 0px 12px 0px rgb(40 63 88 / 10%);</p><p>右键点解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span size=&quot;medium&quot; @contextmenu.prevent.native=&quot;openMenu($event)&quot; /&gt;</span><br></pre></td></tr></table></figure><p>![image-20220804142625635](/Users/yvonne/Library/Application Support/typora-user-images/image-20220804142625635.png)</p><p>flex-shrink: 0;</p><p>固定元素不被挤压</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nodejs</title>
      <link href="/2020/03/19/nodejs/"/>
      <url>/2020/03/19/nodejs/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介认识"><a href="#1-简介认识" class="headerlink" title="1.简介认识"></a>1.简介认识</h2><pre><code>nodejs就是这个解释器（他不是一个语言）让javascript运行在服务端的开发平台（js运行环境）【Node.js给了javascript在服务器端运行环境，能在服务器运行】是一个基于 Chrome V8 引擎的 JavaScript 运行环境。内核是用了chrome的V8引擎。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型。是一个服务器程序。</code></pre><p>  <strong>优势：</strong></p><p>处理大流量数据<br>特别适合实时应用<br>完美支持对象型数据库<br>异步处理大量并发连接</p><p><strong>Javascript与Nodejs的异同:</strong></p><p><strong>javaScript:</strong></p><p>ECMAScript:语言基础，如：语法、数据类型结构以及一些内置对象</p><p>DOM:操作页面元素方法</p><p>BOM:操作浏览器方法</p><p><strong>Node.jsS</strong></p><p>ECMAScript:语言基础，如：语法、数据类型结构以及一些内置对象</p><p>os:操作系统</p><p>file:文件系统</p><p>net:网络系统</p><p>database:数据库</p><h2 id="2-Node-js-应用是由哪几部分组成的："><a href="#2-Node-js-应用是由哪几部分组成的：" class="headerlink" title="2.Node.js 应用是由哪几部分组成的："></a>2.Node.js 应用是由哪几部分组成的：</h2><p><strong>引入 required 模块</strong>：我们可以使用 require 指令来载入 Node.js 模块。(自带http模块)</p><p><strong>创建服务器</strong>：服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。</p><p><strong>接收请求与响应请求</strong>： 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><h1 id="3-Nodejs应用的主文件index-js的组成部分"><a href="#3-Nodejs应用的主文件index-js的组成部分" class="headerlink" title="3.Nodejs应用的主文件index.js的组成部分"></a>3.Nodejs应用的主文件index.js的组成部分</h1><ol><li><p>引入依赖模块</p></li><li><p>设置相关配置</p></li><li><p><strong>连接数据库（可选）</strong></p></li><li><p>定义中间件</p></li><li><p>定义路由</p></li><li><p>开启服务</p></li><li><p><strong>在多核系统上启动cluster多核处理模块（可选）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">//引用依赖模块</span><br><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">var path = require(&#x27;path&#x27;);</span><br><span class="line">var favicon = require(&#x27;serve-favicon&#x27;);</span><br><span class="line">var logger = require(&#x27;morgan&#x27;);</span><br><span class="line">var cookieParser = require(&#x27;cookie-parser&#x27;);</span><br><span class="line">var bodyParser = require(&#x27;body-parser&#x27;);</span><br><span class="line"></span><br><span class="line">var routes = require(&#x27;./routes/index&#x27;);</span><br><span class="line">var users = require(&#x27;./routes/users&#x27;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">// 视图引擎设置</span><br><span class="line">app.set(&#x27;views&#x27;, path.join(__dirname, &#x27;views&#x27;));</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;jade&#x27;);</span><br><span class="line"></span><br><span class="line">//中间件</span><br><span class="line">app.use(favicon(path.join(__dirname, &#x27;public&#x27;, &#x27;favicon.ico&#x27;)));</span><br><span class="line">app.use(logger(&#x27;dev&#x27;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &#x27;public&#x27;)));</span><br><span class="line"></span><br><span class="line">//路由</span><br><span class="line">app.use(&#x27;/&#x27;, routes);</span><br><span class="line">app.use(&#x27;/users&#x27;, users);</span><br><span class="line"></span><br><span class="line">//遇到错误时的中间件</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  var err = new Error(&#x27;Not Found&#x27;);</span><br><span class="line">  err.status = 404;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">if (app.get(&#x27;env&#x27;) === &#x27;development&#x27;) &#123;</span><br><span class="line">  app.use(function(err, req, res, next) &#123;</span><br><span class="line">    res.status(err.status || 500);</span><br><span class="line">    res.render(&#x27;error&#x27;, &#123;</span><br><span class="line">      message: err.message,</span><br><span class="line">      error: err</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&#x27;error&#x27;, &#123;</span><br><span class="line">    message: err.message,</span><br><span class="line">    error: &#123;&#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//抛出 提供给www.js 并通过www.js来开启服务</span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-npm-install-安装包"><a href="#3-npm-install-安装包" class="headerlink" title="3.npm install 安装包"></a>3.npm install 安装包</h3><p>npm install XX ，并且还会生成package.json，并将安装包信息记录在devDependencies或dependencies</p><h3 id="4-npm-init-生成package-json-用来记录这个项目的详细信息的；创建npm-项目"><a href="#4-npm-init-生成package-json-用来记录这个项目的详细信息的；创建npm-项目" class="headerlink" title="4.npm init 生成package.json,用来记录这个项目的详细信息的；创建npm 项目"></a>4.npm init 生成package.json,用来记录这个项目的详细信息的；创建npm 项目</h3><h3 id="5-node事件循环"><a href="#5-node事件循环" class="headerlink" title="5.node事件循环"></a>5.node事件循环</h3><h2 id="node-版本管理工具-nvm"><a href="#node-版本管理工具-nvm" class="headerlink" title="node 版本管理工具 nvm"></a>node 版本管理工具 nvm</h2><ol><li>安装(mac: )<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>安装淘宝镜像<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>mac安装不成功时：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org --verbose  </span><br><span class="line">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org --verbose</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>.bash_profile问题</p><p>方法：1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch ~/.bash_profile</span><br><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure><p>open ~/.bash_profile <em>打开.bash_profile文件，把里面的内容copy到其它地方备份，然后关闭这个文件。</em></p><p>rm ~/.bash_profile<em>二 删除.bash_profile文件</em></p><p><em>执行这行命令后会有提示 【override rw-r–r–  root/staff for /Users/hyu/.bash_profile?】</em> <em># 输入【y】即可。</em></p><p>touch ~/.bash_profile  <em>三 新建.bash_profile文件</em></p><p>open ~/.bash_profile <em>四 打开恢复刚刚备份的内容</em></p><p>source ~/.bash_profile <em>刷新配置文件（其实应该不刷新也可以，因为一会安装nvm会自动刷新）</em></p></blockquote><blockquote><p>window： 安装地址：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a> 推荐nvm-setup.zip</p><p>输入nvm 验证，若不成功：</p><p>1.重启电脑。</p><p>2.手动添加环境变量</p><p>安装软件根目录找到settings.txt ，新建系统变量  NVM_HOM：settings.txt root的值；NVM_SYMLINK：settings.txt path的值。在path 追加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;%NVM_HOME%;%NVM_SYMLINK%;</span><br></pre></td></tr></table></figure><p>你安装不成功，安装软件根目录找到settings.txt 追加</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root:</span> <span class="variable constant_">XXX</span> /<span class="regexp">/ 原有的</span></span><br><span class="line"><span class="regexp">path: XXX /</span><span class="regexp">/ 原有的</span></span><br><span class="line"><span class="regexp">node_mirror: https:/</span><span class="regexp">/npm.taobao.org/mirrors</span><span class="regexp">/node/</span></span><br><span class="line"><span class="symbol">npm_mirror:</span> <span class="symbol">https:</span>/<span class="regexp">/npm.taobao.org/mirrors</span><span class="regexp">/npm/</span></span><br></pre></td></tr></table></figure></blockquote><p>node 版本管理工具 gnvm</p><p>1.将 gnvm.exe 复制到 node 安装目录下 （先安装 node 的情况，未安装时，直接新建一个文件夹，将 gnvm.exe 存放进去。添加该文件夹环境变量）</p><p>2.设置淘宝源 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gnvm config registry TAOBAO</span><br></pre></td></tr></table></figure><p>3.常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gnvm ls                         # 查看node 版本</span><br><span class="line">gnvm search *.*.*               # 查询node版本</span><br><span class="line">gnvm use XXXX                   # 切换node版本</span><br><span class="line">gnvm install X.X.X              # 安装某版本</span><br><span class="line">gnvm uninstall X.X.X            # 卸载</span><br></pre></td></tr></table></figure><h3 id="nodemon使用"><a href="#nodemon使用" class="headerlink" title="nodemon使用"></a>nodemon使用</h3>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http</title>
      <link href="/2020/03/19/http/"/>
      <url>/2020/03/19/http/</url>
      
        <content type="html"><![CDATA[<h3 id="1-一次完整的HTTP事务流程"><a href="#1-一次完整的HTTP事务流程" class="headerlink" title="1.一次完整的HTTP事务流程"></a>1.一次完整的HTTP事务流程</h3><p>（1）域名解析【网址到IP地址的转换】【DNS解析浏览器缓存-系统缓存【host文件】- 路由器缓存-ISP（服务提供商）DNS缓存本地域名服务器-根域名服务器-顶级域名服务器-主域名服务器】</p><p>（2）发起TCP的三次握手</p><p>（3）建立TCP连接后发起http请求</p><p>（4）服务器响应http请求，浏览器得到HTML代码</p><p>（5）浏览器解析HTML代码，并请求HTML代码中的资源</p><p>（6）浏览器对页面进行渲染呈现给用户</p><p>（7）连接结束</p><h3 id="2-HTTP状态码"><a href="#2-HTTP状态码" class="headerlink" title="2.HTTP状态码"></a>2.HTTP状态码</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>（1）1**：信息，服务器收到请求，需要请求者继续执行操作</p><p>（2）2**：成功，操作被成功接收并处理</p><p>（3）3**：重定向，需要进一步的操作以完成请求</p><p>（4）4**：客户端错误，请求包含语法错误或者无法完成请求</p><p>（5）5**：服务器错误，服务器在处理请求的过程中发生了错误</p><h4 id="常见的HTTP状态码："><a href="#常见的HTTP状态码：" class="headerlink" title="常见的HTTP状态码："></a>常见的HTTP状态码：</h4><p>200——OK，请求成功<br>301——Moved Permanently，资源（网页等）被永久转移到其他URL<br>302——Found，307——Temporary Redirect，临时重定向，请求的文档被临时移动到别处<br>304——Not Modified，未修改，表示客户端缓存的版本是最近的<br>401——Unauthorized，请求要求用户的身份认证<br>403——Forbidden，禁止，服务器理解客户端请求，但是拒绝处理此请求，通常是权限设置所致<br>404——Not Found，请求的资源（网页等）不存在<br>500——Internal Server Error——内部服务器错误<br>502——Bad Gateway，充当网关或代理的服务器从远端服务器接收到了一个无效的请求<br>504——Gateway Time-out，充当网关或代理的服务器，未及时从远端服务器获取请求</p><h3 id="3-浏览器同源策略"><a href="#3-浏览器同源策略" class="headerlink" title="3.浏览器同源策略"></a>3.浏览器同源策略</h3><p>（1）“同源策略”三个相同”：</p><p>协议相同<br>域名相同<br>端口相同<br>（2）同源策略的目的是为了保证用户信息的安全，防止恶意的网站窃取数据。不同源的客户端脚本在没有明确授权的情况下，不能读写对方的资源。</p><p>（3）如果非同源，共有三种行为受到限制：</p><p>Cookie、LocalStorage和IndexDB无法读取<br>DOM无法获得<br>AJAX请求不能发送</p><p>（4）不受同源策略限制的：</p><p>页面中的链接，重定向以及表单提交<br>跨域资源的引入是可以的，但是js不能读写加载的内容。如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=.../&gt;&lt;/script&gt;，&lt;img&gt;，&lt;link&gt;，&lt;iframe&gt;</span><br></pre></td></tr></table></figure><h3 id="4-跨域"><a href="#4-跨域" class="headerlink" title="4.跨域"></a>4.跨域</h3><p>（1）受同源策略的限制，不是同源的脚本不能操作其他源下面的对象。想要操作另一个源下的对象，就需要跨域。</p><p>（2）跨域的实现方式</p><p>降域 document.domain<br>设置窗口片段标识符，监听读取location.hash<br>window.name<br>HTML5的postMessage方法<br>LocalStorage<br>JSONP<br>WebSocket<br>CORS</p><h3 id="5-HTTP-amp-HTPPS"><a href="#5-HTTP-amp-HTPPS" class="headerlink" title="5.HTTP&amp; HTPPS"></a>5.HTTP&amp; HTPPS</h3><p>HTTPS在HTTP的基础上加入了SSL/TLS，依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。SSL（Secure Socket Layer，安全套接层），TLS（Transport Layer Securit，传输层安全协议）</p><p>（1）HTTPS协议需要CA申请证书，一般免费证书比较少，所以需要一定费用</p><p>（2）HTTP是超文本传输协议，信息是明文传输，HTTPS则是具有安全性的SSL加密传输协议</p><p>（3）HTTP和HTTPS使用的是完全不同的连接方式，使用的端口号也不一样，前者是80，后者是443</p><p>（4）HTTP连接很简单无连接，是无状态的；HTTPS协议是由HTTP+SSL协议构建的可进行加密传输、身份认证的网络协议，比较安全。</p><p>（5）谷歌搜索引擎算法中，比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中排名会更高</p><h3 id="6-图解http"><a href="#6-图解http" class="headerlink" title="6.图解http"></a>6.<a href="https://www.processon.com/view/link/58025201e4b0d6b27dd4c8af#map">图解http</a></h3><h3 id="7-GET-与-POST-对比"><a href="#7-GET-与-POST-对比" class="headerlink" title="7.GET 与 POST 对比"></a>7.GET 与 POST 对比</h3><p>http 响应报文<br>三部分组成： 状态行、响应头(Response Header)、响应正文</p><p>1.http URL：<br>GET http URL 的长度有限制（3k）;<br>POST http URL 的长度没有限制，需要制定传输类型，请求头多了content-Type 和 Content-Length</p><p>2.请求信息：<br>GET 请求信息在 URL 里<br>POST 请求信息在 请求body 里</p><p>3.post  请求数据格式</p><p>content-type:application/x-www-form-urlencoded 【form表单默认的数据格式】 按key1=val1&amp;key2=val2URL 转码    Query String Parameters </p><p>content-type: application/json     请求数据格式必须是json（用JSON.stringfy处理过的   Request Payload  （会有{}）</p><p>content-type: multipart/form-data 用于表单上传，多用于上传文件  Form Data</p><p>(content-type:application/x-www-form-urlencoded + QS 转换 =&gt;  Form Data)</p><p>1.请求种类有 HEAD、GET、PUT、POST、DELETE、OPTIONS等，但是基本上用到的大多都是GET、PUT、POST、DELETE。</p><p>2.原来在 CORS-跨域资源共享 中，可以使用 OPTIONS 方法发起一个预检请求，以检测实际请求是否可以被服务器所接受。预检请求报文中的 Access-Control-Request-Method 首部字段告知服务器实际请求所使用的 HTTP 方法；Access-Control-Request-Headers 首部字段告知服务器实际请求所携带的自定义首部字段。服务器基于从预检请求获得的信息来判断，是否接受接下来的实际请求。览器先询问服务器，当前网页的域名是否在服务器的许可名单之中，及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。<br>3.当你的Content-Type设置为“application/json;charset=utf-8”并自定义请求头可能就会导致这种情况</p><p>4.AJAX中出现两次请求，OPTIONS请求和GET请求，原因可能是 ：</p><p>1、请求方法不是GET/HEAD/POST<br>2、POST请求的Content-Type并非  application/x-www-form-urlencoded, multipart/form-data, 或text/plain<br>3、请求设置了自定义的header字段</p><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><p>Axios 是一个基于 promise 的 HTTP 库<br>axios默认是 json 格式提交， 若要支持form-data 需要 转义 一般应用qs 方法</p><p>request 请求</p><p>response 响应<br>响应结构：<br>data： 服务端返回的数据<br>status：http状态码<br>statusTest：状态信息<br>headers： 响应头<br>config： 请求提供的配置信息</p><ol><li>transformResponse  在传递给 then/catch 前，允许修改响应数据</li><li>transformRequest  必须返回一个字符串，或 ArrayBuffer，或 Strea</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.transformResponse = [</span><br><span class="line">  (data) =&gt; &#123;</span><br><span class="line">    return JSONBIG(&#123;</span><br><span class="line">      storeAsString: true,</span><br><span class="line">    &#125;).parse(data);</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
